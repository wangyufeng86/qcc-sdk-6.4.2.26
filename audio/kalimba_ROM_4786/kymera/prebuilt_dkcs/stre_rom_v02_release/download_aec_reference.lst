
/home/svc-audio-dspsw/kymera_builds/builds/2019/kymera_1912051504/kalimba/kymera/tools/KCSMaker/out/4786/stre_rom_v02_release/download/debugbin/download_aec_reference.elf:     file format elf32-littlekalimba

Disassembly of section .text_maxim:

84200000 <$_set_rate_monitor_new_amount_ptr>:
// *****************************************************************************
.MODULE $cbops.rate_monitor_op.set_rate_monitor_new_amount_ptr;
.CODESEGMENT PM;
.MAXIM;
$_set_rate_monitor_new_amount_ptr:
   NULL = r0;
84200000:	0f 00 02 00 	Null = r0 + Null;
   if Z rts;
84200004:	00 00 0d dc 	if EQ rts;
   push r3;
84200008:	00 00 50 f3 	push r3;
   r3 = M[r0 +   ($cbops_c.cbops_op_struct.PARAMETER_AREA_START_FIELD+$cbops.param_hdr.OPERATOR_DATA_PTR_FIELD)];
8420000c:	0c 00 52 d1 	r3 = M[r0 + 12];
   M[r3 + $cbops_rate_monitor_op.rate_monitor_op_struct.NEW_AMOUNT_PTR_FIELD] = r1;
84200010:	34 00 35 d5 	M[r3 + 52] = r1;
   pop r3;
84200014:	00 00 54 f3 	pop r3;
   rts;
84200018:	0f 00 0d dc 	rts;

8420001c <$_rate_monitor_op_initialise>:
// *****************************************************************************
.MODULE $cbops.rate_monitor_op.rate_monitor_op_initialise;
.CODESEGMENT PM;
.MAXIM;
$_rate_monitor_op_initialise:
   push rLink;
8420001c:	00 00 d0 f3 	push rLink;
   // run init function from ROM
   call $_rate_monitor_op_initiatlize;
84200020:	06 00 00 fd 	call 0x6bb84;
84200024:	84 bb f0 e1 
   // then do the extra init
   M[r0 + $cbops_rate_monitor_op.rate_monitor_op_struct.ACC_DRIFT_FIELD] = Null;
84200028:	3c 00 02 d5 	M[r0 + 60] = Null;
   M[r0 + $cbops_rate_monitor_op.rate_monitor_op_struct.EXPECTED_ACC_SUM_FIELD] = Null;
8420002c:	38 00 02 d5 	M[r0 + 56] = Null;
   M[r0 + $cbops_rate_monitor_op.rate_monitor_op_struct.STALL_FIELD] = NULL;
84200030:	20 00 02 d5 	M[r0 + 32] = Null;
   pop rLink;
84200034:	00 00 d4 f3 	pop rLink;
   rts;
84200038:	0f 00 0d dc 	rts;
Disassembly of section .text_minim:

8420003c <$_aec_reference_create>:
aec_latency_common *aec_latency_ptr = NULL;
#endif


bool aec_reference_create(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
8420003c:	f4 1d       	pushm <FP(=SP), r4, r5, r6, r7, rLink>, SP = SP + 0x10;
8420003e:	17 00       	r5 = r0 + Null;
84200040:	21 09       	r7 = r2 + Null;
84200042:	28 09       	r6 = r3 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200044:	3e 99       	r4 = M[r5 + 48];

    patch_fn_shared(aec_reference);

#ifdef CAPABILITY_DOWNLOAD_BUILD
    /* let the patches know it's not running from ROM */
    set_aec_reference_not_running_from_rom();
84200046:	18 f0 27 e8 	call (m) $_set_aec_reference_not_running_from_rom;
#endif

    /* Setup Response to Creation Request.   Assume Failure*/
    *response_id = OPCMD_CREATE;
8420004a:	90 f0 00 ee 	M[r7 + Null] = Null;
    if(!base_op_build_std_response(STATUS_CMD_FAILED,op_data->id,response_data))
8420004e:	7b 88       	r1 = M[r5 + 4];
84200050:	02 f0 00 60 	r0 = Null + 4096;
84200054:	44 08       	r2 = r6 + Null;
84200056:	ff fd 00 f0 	call (m) 0x204;
8420005a:	2f ed 
8420005c:	10 04       	Null = r0 - Null;
8420005e:	03 62       	if NE jump (m) Lc_aec_reference_create_3;

84200060 <Lc_aec_reference_create_2>:
    {
        return(FALSE);
84200060:	02 00       	r0 = Null + Null;
84200062:	6e 6e       	jump (m) Lc_aec_reference_create_14;

84200064 <Lc_aec_reference_create_3>:
    }

    /* Processing is in timer task.  This prevents kicks from
       propagating to the main processing function */
    op_data->stop_chain_kicks = TRUE;
84200064:	09 71       	r7 = Null + 1;
84200066:	79 f0 19 8a 	MB[r5 + 25] = r7;

    /* Initialize extended data for operator.  Assume intialized to zero*/
    op_extra_data->cap_id = op_data->cap_data->id;
8420006a:	79 89       	rMAC = M[r5 + 20];
8420006c:	09 e8       	rMAC = M[rMAC + Null];
8420006e:	61 f0 59 8e 	M[r4 + 356] = rMAC;
    op_extra_data->ReInitFlag = TRUE;
84200072:	49 08       	rMAC = r7 + Null;
84200074:	61 f0 5c 8e 	M[r4 + 368] = rMAC;
    op_extra_data->Cur_mode = AEC_REFERENCE_SYSMODE_FULL;
84200078:	61 f0 5a 8e 	M[r4 + 360] = rMAC;
    op_extra_data->kick_id = TIMER_ID_INVALID;
8420007c:	60 f0 5d 8e 	M[r4 + 372] = Null;
                         (AEC_REFERENCE_DEFAULT_TASK_PERIOD >= AEC_REFERENCE_MIN_TASK_PERIOD) &&
                         ((SECOND%AEC_REFERENCE_DEFAULT_TASK_PERIOD)==0)),
                        AEC_REFERENCE_DEFAULT_TASK_PERIOD_Not_Accepted);

    /* set default task period */
    if(!aec_reference_set_task_period(op_extra_data, AEC_REFERENCE_DEFAULT_TASK_PERIOD, 1))
84200080:	03 f0 e8 43 	r1 = Null + 1000;
84200084:	0c 00       	r2 = rMAC + Null;
84200086:	32 00       	r0 = r4 + Null;
84200088:	06 f0 25 ed 	call (m) $_aec_reference_set_task_period;
8420008c:	10 04       	Null = r0 - Null;
8420008e:	42 60       	if EQ jump (m) Lc_aec_reference_create_8;

84200090 <Lc_aec_reference_create_4>:
    }


#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
    /* set minimum tag length for mic output metadata tags */
    op_extra_data->mic_metadata_min_tag_len = AEC_REFERENCE_MIC_METADATA_MIN_TAG_LEN;
84200090:	01 3b       	rMAC = Null + 60;
84200092:	61 f0 cc 8e 	M[r4 + 816] = rMAC;

    /* create time to play with default params */
    op_extra_data->mic_time_to_play = ttp_init();
84200096:	ff fd b3 f0 	call (m) 0x16698;
8420009a:	23 e0 
8420009c:	62 f0 cf 8e 	M[r4 + 828] = r0;
    if (op_extra_data->mic_time_to_play != NULL)
842000a0:	61 f0 cf 88 	rMAC = M[r4 + 828];
842000a4:	37 60       	if EQ jump (m) Lc_aec_reference_create_8;

842000a6 <Lc_aec_reference_create_5>:
    {
        ttp_params params;
        ttp_get_default_params(&params, TTP_TYPE_PCM);
842000a6:	4b 08       	r1 = r7 + Null;
842000a8:	82 11       	r0 = FP + 24;
842000aa:	ff fd b3 f0 	call (m) 0x166de;
842000ae:	35 e1 
        ttp_configure_params(op_extra_data->mic_time_to_play, &params);
842000b0:	83 11       	r1 = FP + 24;
842000b2:	62 f0 cf 88 	r0 = M[r4 + 828];
842000b6:	ff fd b3 f0 	call (m) 0x16822;
842000ba:	2d eb 
       but is not declared as such because we may want it to be configurable in the future */

    /* For Atlas this must be less than for equal to the ping/pong period.
       Also set AEC_REFERENCE_TIME_PERIOD
    */
    op_extra_data->mic_rate_ability  = RATEMATCHING_SUPPORT_NONE;
842000bc:	60 f0 67 8e 	M[r4 + 412] = Null;
    op_extra_data->spkr_rate_ability = RATEMATCHING_SUPPORT_NONE;
842000c0:	60 f0 6f 8e 	M[r4 + 444] = Null;
    op_extra_data->mic_shift  = AEC_REFERENCE_DEFAULT_EP_SHIFT;
842000c4:	60 f0 6d 8e 	M[r4 + 436] = Null;
    op_extra_data->spkr_shift = -AEC_REFERENCE_DEFAULT_EP_SHIFT;
842000c8:	60 f0 74 8e 	M[r4 + 464] = Null;

    /* Note:  sample rate config must be sent before the operator's terminals may be connected
       input_rate and output_rate are initialized to zero and checked in the connect operation */

    /*allocate the volume control shared memory */
    op_extra_data->shared_volume_ptr = allocate_shared_volume_cntrl();
842000cc:	ff fd 8b f0 	call (m) 0x1181c;
842000d0:	31 ea 
842000d2:	62 f0 58 8e 	M[r4 + 352] = r0;
    if(!op_extra_data->shared_volume_ptr)
842000d6:	61 f0 58 88 	rMAC = M[r4 + 352];
842000da:	24 60       	if EQ jump (m) Lc_aec_reference_create_10;

842000dc <Lc_aec_reference_create_6>:
    {
        goto aFailed;
    }

    if(!cpsInitParameters(&op_extra_data->parms_def,(unsigned*)AEC_REFERENCE_GetDefaults(op_extra_data->cap_id),(unsigned*)&op_extra_data->params,sizeof(AEC_REFERENCE_PARAMETERS)))
842000dc:	62 f0 59 88 	r0 = M[r4 + 356];
842000e0:	15 f0 21 e0 	call (m) $_AEC_REFERENCE_GetDefaults;
842000e4:	13 00       	r1 = r0 + Null;
842000e6:	05 f0 94 40 	r3 = Null + 148;
842000ea:	64 f0 cc 20 	r2 = r4 + 204;
842000ee:	62 f0 78 21 	r0 = r4 + 376;
842000f2:	ff fd 01 f0 	call (m) 0x424;
842000f6:	33 e9 
842000f8:	10 04       	Null = r0 - Null;
842000fa:	0c 60       	if EQ jump (m) Lc_aec_reference_create_8;

842000fc <Lc_aec_reference_create_7>:
    {
        goto aFailed;
    }

#if defined(IO_DEBUG)
    aec_latency_ptr = &op_extra_data->sync_block;
842000fc:	61 f0 14 22 	rMAC = r4 + 532;
84200100:	e0 f0 01 f0 	M[Null + $_aec_latency_ptr] = rMAC;
84200104:	58 8e 
#endif

    /* operator state variable set to not running state. based on base_op.c */
    op_data->state = OP_NOT_RUNNING;
84200106:	79 f0 18 8a 	MB[r5 + 24] = r7;
 * \param  response_data Pointer to the pointer to message that is allocated in the function.
 * \param  new_status  A status ID that is to be sent in the message.
 */
inline static void base_op_change_response_status(void **response_data, STATUS_KYMERA new_status)
{
    (((OP_STD_RSP *)(*response_data))->status = new_status);
8420010a:	81 f0 00 e8 	rMAC = M[r6 + Null];
8420010e:	48 8e       	M[rMAC + 4] = Null;
84200110:	16 6e       	jump (m) Lc_aec_reference_create_13;

84200112 <Lc_aec_reference_create_8>:
    patch_fn_shared(aec_reference);

    base_op_change_response_status(response_data,STATUS_OK);
    return TRUE;
  aFailed:
    if(op_extra_data->shared_volume_ptr)
84200112:	62 f0 58 88 	r0 = M[r4 + 352];
84200116:	06 60       	if EQ jump (m) Lc_aec_reference_create_10;

84200118 <Lc_aec_reference_create_9>:
    {
        release_shared_volume_cntrl(op_extra_data->shared_volume_ptr);
84200118:	ff fd 8b f0 	call (m) 0x11840;
8420011c:	29 e9 
        op_extra_data->shared_volume_ptr = NULL;
8420011e:	60 f0 58 8e 	M[r4 + 352] = Null;

84200122 <Lc_aec_reference_create_10>:
    }

#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
    /* free it if we created time to play context for mic */
    if (op_extra_data->mic_time_to_play != NULL)
84200122:	62 f0 cf 88 	r0 = M[r4 + 828];
84200126:	06 60       	if EQ jump (m) Lc_aec_reference_create_12;

84200128 <Lc_aec_reference_create_11>:
    {
        ttp_free(op_extra_data->mic_time_to_play);
84200128:	ff fd b4 f0 	call (m) 0x16af4;
8420012c:	2d ee 
        op_extra_data->mic_time_to_play = NULL;
8420012e:	60 f0 cf 8e 	M[r4 + 828] = Null;

84200132 <Lc_aec_reference_create_12>:
84200132:	01 f0 00 60 	rMAC = Null + 4096;
84200136:	82 f0 00 e8 	r0 = M[r6 + Null];
8420013a:	51 8e       	M[r0 + 4] = rMAC;

8420013c <Lc_aec_reference_create_13>:

    /* chance to fix up */
    patch_fn_shared(aec_reference);

    base_op_change_response_status(response_data,STATUS_OK);
    return TRUE;
8420013c:	4a 08       	r0 = r7 + Null;

8420013e <Lc_aec_reference_create_14>:
    }
#endif /* AEC_REFERENCE_GENERATE_MIC_TIMESTAMP */

    base_op_change_response_status(response_data, STATUS_CMD_FAILED);
    return TRUE;
}
8420013e:	f4 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, rLink>;
84200140:	d8 4c       	rts;

84200142 <$_aec_reference_destroy>:
     */
    op_extra_data->channel_status = 0;
}

bool aec_reference_destroy(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
84200142:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200144:	17 00       	r5 = r0 + Null;
84200146:	28 09       	r6 = r3 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200148:	3e 99       	r4 = M[r5 + 48];
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);

    patch_fn_shared(aec_reference);

    /* Setup Response to Destroy Request.*/
    if(!base_op_destroy(op_data, message_data, response_id, response_data))
8420014a:	ef fd ff ff 	call (m) 0xac;
8420014e:	23 eb 
84200150:	10 04       	Null = r0 - Null;
84200152:	03 62       	if NE jump (m) Lc_aec_reference_destroy_3;

84200154 <Lc_aec_reference_destroy_2>:
    {
        return(FALSE);
84200154:	02 00       	r0 = Null + Null;
84200156:	17 6e       	jump (m) Lc_aec_reference_destroy_6;

84200158 <Lc_aec_reference_destroy_3>:
    }

    /* Make sure everything is cleared */
    aec_reference_cleanup(op_data);
84200158:	3a 00       	r0 = r5 + Null;
8420015a:	08 f0 3b e7 	call (m) $_aec_reference_cleanup;

    /* calling the "destroy" assembly function - this frees up all the capability-internal memory */
    /*free volume control shared memory*/
    release_shared_volume_cntrl(op_extra_data->shared_volume_ptr);
8420015e:	62 f0 58 88 	r0 = M[r4 + 352];
84200162:	ff fd 8b f0 	call (m) 0x11840;
84200166:	3f e6 
    op_extra_data->shared_volume_ptr = NULL;
84200168:	60 f0 58 8e 	M[r4 + 352] = Null;


#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
    /* delete mic time-to-play object */
    if(op_extra_data->mic_time_to_play != NULL)
8420016c:	62 f0 cf 88 	r0 = M[r4 + 828];
84200170:	06 60       	if EQ jump (m) Lc_aec_reference_destroy_5;

84200172 <Lc_aec_reference_destroy_4>:
    {
        ttp_free(op_extra_data->mic_time_to_play);
84200172:	ff fd b4 f0 	call (m) 0x16af4;
84200176:	23 ec 
        op_extra_data->mic_time_to_play = NULL;
84200178:	60 f0 cf 8e 	M[r4 + 828] = Null;

8420017c <Lc_aec_reference_destroy_5>:
8420017c:	81 f0 00 e8 	rMAC = M[r6 + Null];
84200180:	48 8e       	M[rMAC + 4] = Null;
    }
#endif

    base_op_change_response_status(response_data,STATUS_OK);
    return(TRUE);
84200182:	42 20       	r0 = Null + 1;

84200184 <Lc_aec_reference_destroy_6>:
}
84200184:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200186:	d8 4c       	rts;

84200188 <$_aec_reference_reset>:
    *response_id = OPCMD_STOP;
    return(aec_reference_stop_reset(op_data,response_data));
}

bool aec_reference_reset(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
84200188:	c8 1c       	pushm <FP(=SP), rLink>;
8420018a:	2b 00       	r1 = r3 + Null;
    /* Setup Response to Reset Request.   Assume Failure*/
    *response_id = OPCMD_RESET;
8420018c:	01 21       	rMAC = Null + 4;
8420018e:	21 ee       	M[r2 + Null] = rMAC;
    return(aec_reference_stop_reset(op_data,response_data));
84200190:	10 f0 2d e4 	call (m) $_aec_reference_stop_reset;

84200194 <Lc_aec_reference_reset_2>:
}
84200194:	c8 48       	popm <FP, rLink>;
84200196:	d8 4c       	rts;

84200198 <$_aec_reference_connect>:


bool aec_reference_connect(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
84200198:	f6 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x10;
8420019a:	13 09       	r9 = r0 + Null;
8420019c:	22 09       	r8 = r2 + Null;
8420019e:	45 de       	M[FP + 32] = r3;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
842001a0:	b7 f0 0c 88 	r5 = M[r9 + 48];


bool aec_reference_connect(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    unsigned terminal_id    = ((unsigned*)message_data)[0];    /* extract the terminal_id */
842001a4:	1e e8       	r4 = M[r1 + Null];
    tCbuffer* pterminal_buf = (tCbuffer*)(uintptr_t)(((unsigned *)message_data)[1]);
842001a6:	38 f0 01 88 	r6 = M[r1 + 4];
    INT_OP_ID int_id = op_data->id;
842001aa:	b9 f0 01 88 	r7 = M[r9 + 4];

    patch_fn_shared(aec_reference);

    L3_DBG_MSG1("AEC REFERENCE --- connect TID = %x", terminal_id);
842001ae:	01 f0 28 91 	rMAC = MBS[Null + 0x328];
842001b2:	c8 24       	Null = rMAC - 3;
842001b4:	08 68       	if LT jump (m) Lc_aec_reference_connect_3;

842001b6 <Lc_aec_reference_connect_2>:
842001b6:	55 f1 02 f0 	r0 = Null + 357564416;
842001ba:	00 40 
842001bc:	33 00       	r1 = r4 + Null;
842001be:	ff fd 03 f0 	call (m) 0x9b4;
842001c2:	37 ef 

842001c4 <Lc_aec_reference_connect_3>:


    /* Setup Response to Connection Request.   Assume Failure*/
    *response_id = OPCMD_CONNECT;
842001c4:	41 21       	rMAC = Null + 5;
842001c6:	a1 f0 00 ee 	M[r8 + Null] = rMAC;
    if(!base_op_build_std_response(STATUS_CMD_FAILED,op_data->id,response_data))
842001ca:	b3 f0 01 88 	r1 = M[r9 + 4];
842001ce:	02 f0 00 60 	r0 = Null + 4096;
842001d2:	44 d8       	r2 = M[FP + 32];
842001d4:	ff fd 00 f0 	call (m) 0x204;
842001d8:	31 e1 
842001da:	10 04       	Null = r0 - Null;
842001dc:	03 62       	if NE jump (m) Lc_aec_reference_connect_5;

842001de <Lc_aec_reference_connect_4>:
    {
        return(FALSE);
842001de:	02 00       	r0 = Null + Null;
842001e0:	d8 6e       	jump (m) Lc_aec_reference_connect_45;

842001e2 <Lc_aec_reference_connect_5>:
    }

    /* Only allow connection if operator has been configured */
    if((op_extra_data->input_rate==0) || (op_extra_data->output_rate==0) )
842001e2:	70 f0 64 88 	Null = M[r5 + 400];
842001e6:	13 60       	if EQ jump (m) Lc_aec_reference_connect_10;

842001e8 <Lc_aec_reference_connect_6>:
842001e8:	70 f0 65 88 	Null = M[r5 + 404];
842001ec:	10 60       	if EQ jump (m) Lc_aec_reference_connect_10;

842001ee <Lc_aec_reference_connect_7>:
        return(TRUE);
    }

    /* (i)  check if the terminal ID is valid . The number has to be less than the maximum number of sinks or sources .  */
    /* (ii) check if we are connecting to the right type . It has to be a buffer pointer and not endpoint connection */
    if( !base_op_is_terminal_valid(op_data, terminal_id) || !pterminal_buf)
842001ee:	33 00       	r1 = r4 + Null;
842001f0:	5a 08       	r0 = r9 + Null;
842001f2:	ef fd ff ff 	call (m) 0x1de;
842001f6:	2d ef 
842001f8:	10 04       	Null = r0 - Null;
842001fa:	04 60       	if EQ jump (m) Lc_aec_reference_connect_9;

842001fc <Lc_aec_reference_connect_8>:
842001fc:	0f f8 00 c2 	Null = r6 - Null;
84200200:	08 62       	if NE jump (m) Lc_aec_reference_connect_11;

84200202 <Lc_aec_reference_connect_9>:
84200202:	01 f0 03 60 	rMAC = Null + 4099;
84200206:	42 d8       	r0 = M[FP + 32];
84200208:	12 e8       	r0 = M[r0 + Null];
8420020a:	51 8e       	M[r0 + 4] = rMAC;

8420020c <Lc_aec_reference_connect_10>:
    }

    /* Only allow connection if operator has been configured */
    if((op_extra_data->input_rate==0) || (op_extra_data->output_rate==0) )
    {
        return(TRUE);
8420020c:	42 20       	r0 = Null + 1;
8420020e:	c1 6e       	jump (m) Lc_aec_reference_connect_45;

84200210 <Lc_aec_reference_connect_11>:
        base_op_change_response_status(response_data,STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    /* check if the terminal is already connected and if not , connect the terminal */
    if(terminal_id & TERMINAL_SINK_MASK)
84200210:	40 f0 61 f0 	rMAC = r4 AND 0x800000;
84200214:	00 00 
84200216:	5c 60       	if EQ jump (m) Lc_aec_reference_connect_27;

84200218 <Lc_aec_reference_connect_12>:
    {
        terminal_id &= ~ TERMINAL_SINK_MASK;
84200218:	bf ff 66 ff 	r4 = r4 AND 0xff7fffff;
8420021c:	ff 1f 

        if(terminal_id==AEC_REF_MIC_TERMINAL1)
8420021e:	b0 24       	Null = r4 - 2;
84200220:	35 62       	if NE jump (m) Lc_aec_reference_connect_19;

84200222 <Lc_aec_reference_connect_13>:
        {
            uint32 config_value;

            /* get info about overridden endpoints */
            op_extra_data->mic_endpoint = get_overriden_endpoint(int_id,
                                                                 AEC_REF_MIC_TERMINAL1 | TERMINAL_SINK_MASK);
84200222:	08 f0 03 f0 	r1 = Null + 8388610;
84200226:	02 40 
84200228:	4a 08       	r0 = r7 + Null;
8420022a:	ff fd 24 f0 	call (m) 0x4ab0;
8420022e:	27 e4 
84200230:	72 f0 7f 8e 	M[r5 + 508] = r0;

            if(!get_override_ep_ratematch_ability(op_extra_data->mic_endpoint,&config_value))
84200234:	43 12       	r1 = FP + 36;
84200236:	72 f0 7f 88 	r0 = M[r5 + 508];
8420023a:	ff fd 24 f0 	call (m) 0x4a4e;
8420023e:	35 e0 
84200240:	10 04       	Null = r0 - Null;
84200242:	e0 61       	if EQ jump (m) Lc_aec_reference_connect_9;

84200244 <Lc_aec_reference_connect_14>:
            /* Save rate matching ability HW or SW*/
            op_extra_data->mic_rate_ability   = RATEMATCHING_SUPPORT_SW;
            op_extra_data->mic_rate_enactment = RATEMATCHING_SUPPORT_SW;
#else
            /* Save rate matching ability HW or SW*/
            op_extra_data->mic_rate_ability   = (unsigned)config_value;
84200244:	49 d8       	rMAC = M[FP + 36];
84200246:	71 f0 67 8e 	M[r5 + 412] = rMAC;
            op_extra_data->mic_rate_enactment = RATEMATCHING_SUPPORT_NONE;
8420024a:	70 f0 68 8e 	M[r5 + 416] = Null;
#endif
            if(op_extra_data->mic_sync_enable)
8420024e:	70 f0 d4 88 	Null = M[r5 + 848];
84200252:	0b 60       	if EQ jump (m) Lc_aec_reference_connect_17;

84200254 <Lc_aec_reference_connect_15>:
            {
                /* Mic output will be synchronised to speaker input, SW or HW depends on
                 * it's ability.
                 */
                op_extra_data->mic_rate_enactment = op_extra_data->mic_rate_ability;
84200254:	71 f0 68 8e 	M[r5 + 416] = rMAC;
                if(op_extra_data->mic_rate_enactment == RATEMATCHING_SUPPORT_HW)
84200258:	88 24       	Null = rMAC - 2;
8420025a:	07 62       	if NE jump (m) Lc_aec_reference_connect_17;

8420025c <Lc_aec_reference_connect_16>:
                {
                    set_override_ep_ratematch_enacting(op_extra_data->mic_endpoint, TRUE);
8420025c:	43 20       	r1 = Null + 1;
8420025e:	72 f0 7f 88 	r0 = M[r5 + 508];
84200262:	ff fd 23 f0 	call (m) 0x4a3e;
84200266:	3d ee 

84200268 <Lc_aec_reference_connect_17>:
                }
            }

#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
            /* see if mic graph wants to use an external rate adjust operator */
            aec_reference_mic_check_external_rate_adjust_op(op_extra_data);
84200268:	3a 00       	r0 = r5 + Null;
8420026a:	06 f0 33 ee 	call (m) $_aec_reference_mic_check_external_rate_adjust_op;
#endif /* INSTALL_DELEGATE_RATE_ADJUST_SUPPORT */

            if(!get_override_ep_sample_rate(op_extra_data->mic_endpoint,&config_value))
8420026e:	43 12       	r1 = FP + 36;
84200270:	72 f0 7f 88 	r0 = M[r5 + 508];
84200274:	ff fd 23 f0 	call (m) 0x4a02;
84200278:	2f ec 
8420027a:	10 04       	Null = r0 - Null;
8420027c:	c3 61       	if EQ jump (m) Lc_aec_reference_connect_9;

8420027e <Lc_aec_reference_connect_18>:
            {
                /* Should never fail */
                base_op_change_response_status(response_data,STATUS_INVALID_CMD_PARAMS);
                return TRUE;
            }
            op_extra_data->mic_rate = (unsigned)config_value;
8420027e:	49 d8       	rMAC = M[FP + 36];
84200280:	71 f0 66 8e 	M[r5 + 408] = rMAC;
        else if(terminal_id==AEC_REF_INPUT_TERMINAL1)
        {
            op_extra_data->spkr_in_endpoint = get_overriden_endpoint(int_id,
                                                                     AEC_REF_INPUT_TERMINAL1 | TERMINAL_SINK_MASK);
        }
        op_extra_data->input_stream[terminal_id] = pterminal_buf;
84200284:	78 f0 02 8e 	M[r5 + 8] = r6;
84200288:	60 6e       	jump (m) Lc_aec_reference_connect_36;

8420028a <Lc_aec_reference_connect_19>:
                return TRUE;
            }
            op_extra_data->mic_rate = (unsigned)config_value;

        }
        else if(terminal_id==AEC_REF_INPUT_TERMINAL1)
8420028a:	30 04       	Null = r4 - Null;
8420028c:	16 62       	if NE jump (m) Lc_aec_reference_connect_24;

8420028e <Lc_aec_reference_connect_20>:
        {
            op_extra_data->spkr_in_endpoint = get_overriden_endpoint(int_id,
                                                                     AEC_REF_INPUT_TERMINAL1 | TERMINAL_SINK_MASK);
8420028e:	08 f0 03 f0 	r1 = Null + 8388608;
84200292:	00 40 
84200294:	4a 08       	r0 = r7 + Null;
84200296:	ff fd 24 f0 	call (m) 0x4ab0;
8420029a:	3b e0 
8420029c:	72 f0 82 8e 	M[r5 + 520] = r0;
        }
        op_extra_data->input_stream[terminal_id] = pterminal_buf;
842002a0:	78 f0 00 ee 	M[r5 + Null] = r6;

842002a4 <Lc_aec_reference_connect_21>:
 *
 * \return TRUE if the buffer supports metadata. FALSE if it doesn't.
 */
static inline bool buff_has_metadata(tCbuffer *buff)
{
    if (BUFF_METADATA(buff))
842002a4:	81 f0 05 88 	rMAC = M[r6 + 20];
842002a8:	49 c6       	rMAC = rMAC AND 0x8000;
842002aa:	4f 60       	if EQ jump (m) Lc_aec_reference_connect_36;

842002ac <Lc_aec_reference_connect_22>:
         */
        if(IsSpeakerInputTerminal(terminal_id) &&
           buff_has_metadata(pterminal_buf))
        {
            /* set metadata buffer if it hasn't been set already */
            if(NULL == op_extra_data->spkr_input_metadata_buffer)
842002ac:	71 f0 c9 88 	rMAC = M[r5 + 804];
842002b0:	4c 62       	if NE jump (m) Lc_aec_reference_connect_36;

842002b2 <Lc_aec_reference_connect_23>:
            {
                op_extra_data->spkr_input_metadata_buffer = pterminal_buf;
842002b2:	78 f0 c9 8e 	M[r5 + 804] = r6;
842002b6:	49 6e       	jump (m) Lc_aec_reference_connect_36;

842002b8 <Lc_aec_reference_connect_24>:
        else if(terminal_id==AEC_REF_INPUT_TERMINAL1)
        {
            op_extra_data->spkr_in_endpoint = get_overriden_endpoint(int_id,
                                                                     AEC_REF_INPUT_TERMINAL1 | TERMINAL_SINK_MASK);
        }
        op_extra_data->input_stream[terminal_id] = pterminal_buf;
842002b8:	72 54       	r0 = r4 LSHIFT 2;
842002ba:	78 f0 02 ee 	M[r5 + r0] = r6;
inline static bool IsSpeakerInputTerminal(unsigned term_idx)
{
    return ( (term_idx==AEC_REF_INPUT_TERMINAL1)
          || (term_idx==AEC_REF_INPUT_TERMINAL2)
          || ( (term_idx>=AEC_REF_INPUT_TERMINAL3)
              && (term_idx<=AEC_REF_INPUT_TERMINAL8) ) );
842002be:	70 24       	Null = r4 - 1;
842002c0:	f2 61       	if EQ jump (m) Lc_aec_reference_connect_21;

842002c2 <Lc_aec_reference_connect_25>:
842002c2:	b0 25       	Null = r4 - 6;
842002c4:	42 64       	if NC jump (m) Lc_aec_reference_connect_36;

842002c6 <Lc_aec_reference_connect_26>:
842002c6:	f0 26       	Null = r4 - 11;
842002c8:	f9 ff dd ef 	if LS jump (m) Lc_aec_reference_connect_21;

842002cc <Lc_14>:
842002cc:	3e 6e       	jump (m) Lc_aec_reference_connect_36;

842002ce <Lc_aec_reference_connect_27>:
        }
#endif /* AEC_REFERENCE_SUPPORT_METADATA */
    }
    else
    {
        if(terminal_id==AEC_REF_SPKR_TERMINAL1)
842002ce:	70 24       	Null = r4 - 1;
842002d0:	26 62       	if NE jump (m) Lc_aec_reference_connect_31;

842002d2 <Lc_aec_reference_connect_28>:
        {
            uint32 config_value;

            op_extra_data->spkr_endpoint = get_overriden_endpoint(int_id,
                                                                  AEC_REF_SPKR_TERMINAL1);
842002d2:	43 20       	r1 = Null + 1;
842002d4:	4a 08       	r0 = r7 + Null;
842002d6:	ff fd 23 f0 	call (m) 0x4ab0;
842002da:	3b ee 
842002dc:	72 f0 80 8e 	M[r5 + 512] = r0;

            if(!get_override_ep_ratematch_ability(op_extra_data->spkr_endpoint,&config_value))
842002e0:	83 12       	r1 = FP + 40;
842002e2:	72 f0 80 88 	r0 = M[r5 + 512];
842002e6:	ff fd 23 f0 	call (m) 0x4a4e;
842002ea:	29 eb 
842002ec:	10 04       	Null = r0 - Null;
842002ee:	8a 61       	if EQ jump (m) Lc_aec_reference_connect_9;

842002f0 <Lc_aec_reference_connect_29>:

#if defined(ENABLE_FORCE_SW_RATEMATCH)
            op_extra_data->spkr_rate_ability   = RATEMATCHING_SUPPORT_SW;
            op_extra_data->spkr_rate_enactment = RATEMATCHING_SUPPORT_SW;
#else
            op_extra_data->spkr_rate_ability   = (unsigned)config_value;
842002f0:	51 d8       	rMAC = M[FP + 40];
842002f2:	71 f0 6f 8e 	M[r5 + 444] = rMAC;
            op_extra_data->spkr_rate_enactment = RATEMATCHING_SUPPORT_NONE;
842002f6:	70 f0 71 8e 	M[r5 + 452] = Null;
#endif

#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
            /* see if speaker graph wants to use an external rate adjust operator */
            aec_reference_spkr_check_external_rate_adjust_op(op_extra_data);
842002fa:	3a 00       	r0 = r5 + Null;
842002fc:	06 f0 23 e8 	call (m) $_aec_reference_spkr_check_external_rate_adjust_op;
#endif
            if(!get_override_ep_sample_rate(op_extra_data->spkr_endpoint,&config_value))
84200300:	83 12       	r1 = FP + 40;
84200302:	72 f0 80 88 	r0 = M[r5 + 512];
84200306:	ff fd 23 f0 	call (m) 0x4a02;
8420030a:	3d e7 
8420030c:	10 04       	Null = r0 - Null;
8420030e:	7a 61       	if EQ jump (m) Lc_aec_reference_connect_9;

84200310 <Lc_aec_reference_connect_30>:
            {
                /* Should never fail */
                base_op_change_response_status(response_data,STATUS_INVALID_CMD_PARAMS);
                return TRUE;
            }
            op_extra_data->spkr_rate = (unsigned)config_value;
84200310:	51 d8       	rMAC = M[FP + 40];
84200312:	71 f0 6e 8e 	M[r5 + 440] = rMAC;
        }
        else if(terminal_id==AEC_REF_REFERENCE_TERMINAL)
        {
            op_extra_data->sync_block.speaker_data = 0;
        }
        op_extra_data->output_stream[terminal_id] = pterminal_buf;
84200316:	78 f0 11 8e 	M[r5 + 68] = r6;
8420031a:	17 6e       	jump (m) Lc_aec_reference_connect_36;

8420031c <Lc_aec_reference_connect_31>:
                return TRUE;
            }
            op_extra_data->spkr_rate = (unsigned)config_value;

        }
        else if (terminal_id==AEC_REF_OUTPUT_TERMINAL1)
8420031c:	f0 24       	Null = r4 - 3;
8420031e:	1c 62       	if NE jump (m) Lc_aec_reference_connect_38;

84200320 <Lc_aec_reference_connect_32>:
        {
            op_extra_data->mic_out_endpoint = get_overriden_endpoint(int_id,
                                                                     AEC_REF_OUTPUT_TERMINAL1);
84200320:	c3 20       	r1 = Null + 3;
84200322:	4a 08       	r0 = r7 + Null;
84200324:	ff fd 23 f0 	call (m) 0x4ab0;
84200328:	2d ec 
8420032a:	72 f0 81 8e 	M[r5 + 516] = r0;
            op_extra_data->sync_block.mic_data = 0;
8420032e:	70 f0 88 8e 	M[r5 + 544] = Null;
        }
        else if(terminal_id==AEC_REF_REFERENCE_TERMINAL)
        {
            op_extra_data->sync_block.speaker_data = 0;
        }
        op_extra_data->output_stream[terminal_id] = pterminal_buf;
84200332:	78 f0 13 8e 	M[r5 + 76] = r6;

84200336 <Lc_aec_reference_connect_33>:
84200336:	81 f0 05 88 	rMAC = M[r6 + 20];
8420033a:	49 c6       	rMAC = rMAC AND 0x8000;
8420033c:	06 60       	if EQ jump (m) Lc_aec_reference_connect_36;

8420033e <Lc_aec_reference_connect_34>:
#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
       /* set metadata buffer for mic outputs */
       if(IsMicrophoneOutputTerminal(terminal_id) &&
          buff_has_metadata(pterminal_buf))
       {
           if(NULL == op_extra_data->mic_metadata_buffer)
8420033e:	71 f0 ca 88 	rMAC = M[r5 + 808];
84200342:	03 62       	if NE jump (m) Lc_aec_reference_connect_36;

84200344 <Lc_aec_reference_connect_35>:
           {   /* first connected mic output buffer with metadata */
               op_extra_data->mic_metadata_buffer = pterminal_buf;
84200344:	78 f0 ca 8e 	M[r5 + 808] = r6;

84200348 <Lc_aec_reference_connect_36>:

    }

    /* OP not running, accept connections */
    /* OP is running, validate terminals and reset config */
    if(op_data->state != OP_RUNNING)
84200348:	b1 f0 18 80 	rMAC = MBS[r9 + 24];
8420034c:	1c 60       	if EQ jump (m) Lc_aec_reference_connect_44;

8420034e <Lc_aec_reference_connect_37>:
8420034e:	41 d8       	rMAC = M[FP + 32];
84200350:	09 e8       	rMAC = M[rMAC + Null];
84200352:	48 8e       	M[rMAC + 4] = Null;
84200354:	5c 6f       	jump (m) Lc_aec_reference_connect_10;

84200356 <Lc_aec_reference_connect_38>:
        {
            op_extra_data->mic_out_endpoint = get_overriden_endpoint(int_id,
                                                                     AEC_REF_OUTPUT_TERMINAL1);
            op_extra_data->sync_block.mic_data = 0;
        }
        else if(terminal_id==AEC_REF_REFERENCE_TERMINAL)
84200356:	30 04       	Null = r4 - Null;
84200358:	06 62       	if NE jump (m) Lc_aec_reference_connect_40;

8420035a <Lc_aec_reference_connect_39>:
        {
            op_extra_data->sync_block.speaker_data = 0;
8420035a:	70 f0 89 8e 	M[r5 + 548] = Null;
        }
        op_extra_data->output_stream[terminal_id] = pterminal_buf;
8420035e:	78 f0 10 8e 	M[r5 + 64] = r6;
84200362:	f3 6f       	jump (m) Lc_aec_reference_connect_36;

84200364 <Lc_aec_reference_connect_40>:
84200364:	72 54       	r0 = r4 LSHIFT 2;
84200366:	39 00       	rMAC = r5 + Null;
84200368:	51 00       	rMAC = r0 + rMAC;
8420036a:	18 f0 10 8e 	M[rMAC + 64] = r6;
{
    return ((AEC_REF_OUTPUT_TERMINAL1 <= term_idx &&
            AEC_REF_OUTPUT_TERMINAL4 >= term_idx) ||
            (AEC_REF_OUTPUT_TERMINAL5 <= term_idx &&
                         AEC_REF_OUTPUT_TERMINAL8 >= term_idx)
            );
8420036e:	f0 24       	Null = r4 - 3;
84200370:	ec 65       	if NC jump (m) Lc_aec_reference_connect_36;

84200372 <Lc_aec_reference_connect_41>:
84200372:	b0 25       	Null = r4 - 6;
84200374:	f9 ff c3 ef 	if LS jump (m) Lc_aec_reference_connect_33;

84200378 <Lc_aec_reference_connect_42>:
84200378:	70 27       	Null = r4 - 13;
8420037a:	e7 65       	if NC jump (m) Lc_aec_reference_connect_36;

8420037c <Lc_aec_reference_connect_43>:
8420037c:	30 2c       	Null = r4 - 16;
8420037e:	f9 ff b9 ef 	if LS jump (m) Lc_aec_reference_connect_33;

84200382 <Lc_15>:
84200382:	e3 6f       	jump (m) Lc_aec_reference_connect_36;

84200384 <Lc_aec_reference_connect_44>:
    /* OP is running, validate terminals and reset config */
    if(op_data->state != OP_RUNNING)
    {
        base_op_change_response_status(response_data,STATUS_OK);
    }
    else if(validate_channels_and_build(op_data))
84200384:	5a 08       	r0 = r9 + Null;
84200386:	0b f0 39 e7 	call (m) $_validate_channels_and_build;
8420038a:	10 04       	Null = r0 - Null;
8420038c:	e1 63       	if NE jump (m) Lc_aec_reference_connect_37;

8420038e <Lc_16>:
8420038e:	3f 6f       	jump (m) Lc_aec_reference_connect_10;

84200390 <Lc_aec_reference_connect_45>:
    {
        base_op_change_response_status(response_data,STATUS_OK);
    }
    return TRUE;
}
84200390:	f6 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200392:	d8 4c       	rts;

84200394 <$_aec_reference_disconnect>:

bool aec_reference_disconnect(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
84200394:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200396:	11 09       	r7 = r0 + Null;
84200398:	20 09       	r6 = r2 + Null;
8420039a:	2a 09       	r8 = r3 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
8420039c:	96 f0 0c 88 	r4 = M[r7 + 48];
}

bool aec_reference_disconnect(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    unsigned terminal_id = *((unsigned*)message_data);
842003a0:	1f e8       	r5 = M[r1 + Null];

    patch_fn_shared(aec_reference);

    L3_DBG_MSG1("AEC REFERENCE --- disconnect TID = %x", terminal_id);
842003a2:	01 f0 28 91 	rMAC = MBS[Null + 0x328];
842003a6:	c8 24       	Null = rMAC - 3;
842003a8:	08 68       	if LT jump (m) Lc_aec_reference_disconnect_3;

842003aa <Lc_aec_reference_disconnect_2>:
842003aa:	55 f1 02 f0 	r0 = Null + 357564451;
842003ae:	23 40 
842003b0:	3b 00       	r1 = r5 + Null;
842003b2:	ff fd 03 f0 	call (m) 0x9b4;
842003b6:	23 e0 

842003b8 <Lc_aec_reference_disconnect_3>:

    /* Setup Response to Disconnection Request. Assume Failure*/
    *response_id = OPCMD_DISCONNECT;
842003b8:	81 21       	rMAC = Null + 6;
842003ba:	81 f0 00 ee 	M[r6 + Null] = rMAC;
    if(!base_op_build_std_response(STATUS_CMD_FAILED,op_data->id,response_data))
842003be:	93 f0 01 88 	r1 = M[r7 + 4];
842003c2:	02 f0 00 60 	r0 = Null + 4096;
842003c6:	54 08       	r2 = r8 + Null;
842003c8:	ef fd ff ff 	call (m) 0x204;
842003cc:	3d e1 
842003ce:	10 04       	Null = r0 - Null;
842003d0:	03 62       	if NE jump (m) Lc_aec_reference_disconnect_5;

842003d2 <Lc_aec_reference_disconnect_4>:
    {
        return(FALSE);
842003d2:	02 00       	r0 = Null + Null;
842003d4:	9b 6e       	jump (m) Lc_aec_reference_disconnect_54;

842003d6 <Lc_aec_reference_disconnect_5>:
    }

    /* check if the terminal ID is valid . The number has to be less than the maximum number of sinks or sources.  */
    if(!base_op_is_terminal_valid(op_data, terminal_id))
842003d6:	3b 00       	r1 = r5 + Null;
842003d8:	4a 08       	r0 = r7 + Null;
842003da:	ef fd ff ff 	call (m) 0x1de;
842003de:	25 e0 
842003e0:	10 04       	Null = r0 - Null;
842003e2:	08 62       	if NE jump (m) Lc_aec_reference_disconnect_8;

842003e4 <Lc_aec_reference_disconnect_6>:
842003e4:	01 f0 03 60 	rMAC = Null + 4099;
842003e8:	a2 f0 00 e8 	r0 = M[r8 + Null];
842003ec:	51 8e       	M[r0 + 4] = rMAC;

842003ee <Lc_aec_reference_disconnect_7>:
    {
        base_op_change_response_status(response_data,STATUS_INVALID_CMD_PARAMS);
        return TRUE;
842003ee:	42 20       	r0 = Null + 1;
842003f0:	8d 6e       	jump (m) Lc_aec_reference_disconnect_54;

842003f2 <Lc_aec_reference_disconnect_8>:
    }

    /* check if the terminal is connected and if so , disconnect the terminal */
    if(terminal_id & TERMINAL_SINK_MASK)
842003f2:	40 f0 71 f0 	rMAC = r5 AND 0x800000;
842003f6:	00 00 
842003f8:	3b 60       	if EQ jump (m) Lc_aec_reference_disconnect_29;

842003fa <Lc_aec_reference_disconnect_9>:
inline static bool IsSpeakerInputTerminal(unsigned term_idx)
{
    return ( (term_idx==AEC_REF_INPUT_TERMINAL1)
          || (term_idx==AEC_REF_INPUT_TERMINAL2)
          || ( (term_idx>=AEC_REF_INPUT_TERMINAL3)
              && (term_idx<=AEC_REF_INPUT_TERMINAL8) ) );
842003fa:	bf ff 77 ff 	r5 = r5 AND 0xff7fffff;
842003fe:	ff 1f 
84200400:	08 60       	if EQ jump (m) Lc_aec_reference_disconnect_13;

84200402 <Lc_aec_reference_disconnect_10>:
84200402:	78 24       	Null = r5 - 1;
84200404:	06 60       	if EQ jump (m) Lc_aec_reference_disconnect_13;

84200406 <Lc_aec_reference_disconnect_11>:
84200406:	b8 25       	Null = r5 - 6;
84200408:	26 64       	if NC jump (m) Lc_aec_reference_disconnect_26;

8420040a <Lc_aec_reference_disconnect_12>:
8420040a:	f8 26       	Null = r5 - 11;
8420040c:	08 f0 c3 e0 	if HI jump (m) Lc_aec_reference_disconnect_25;

84200410 <Lc_aec_reference_disconnect_13>:
        terminal_id &= ~ TERMINAL_SINK_MASK;

#ifdef AEC_REFERENCE_SUPPORT_METADATA
        if(IsSpeakerInputTerminal(terminal_id))
        {
            tCbuffer *this_buf = op_extra_data->input_stream[terminal_id];
84200410:	7a 54       	r0 = r5 LSHIFT 2;
84200412:	b1 e8       	rMAC = M[r4 + r0];
            if(this_buf == op_extra_data->spkr_input_metadata_buffer)
84200414:	62 f0 c9 88 	r0 = M[r4 + 804];
84200418:	88 04       	Null = rMAC - r0;
8420041a:	16 62       	if NE jump (m) Lc_aec_reference_disconnect_23;

8420041c <Lc_aec_reference_disconnect_14>:
            {
                /* disconnecting buffer is the metadata buffer,
                 * change the metadata buffer to another connected
                 * buffer with metadata, if there is any.
                 */
                tCbuffer *new_metadata_buf = NULL;
8420041c:	02 00       	r0 = Null + Null;
                int idx;
                for(idx=0; idx < MAX_NUMBER_SPEAKERS; idx++)
8420041e:	03 00       	r1 = Null + Null;
84200420:	03 6e       	jump (m) Lc_aec_reference_disconnect_16;

84200422 <Lc_aec_reference_disconnect_15>:
                {
                    tCbuffer *inp_buf = op_extra_data->input_stream[SpeakerInputTerminalByIndex(idx)];
84200422:	98 24       	Null = r1 - 2;
84200424:	03 66       	if GE jump (m) Lc_aec_reference_disconnect_17;

84200426 <Lc_aec_reference_disconnect_16>:
84200426:	1c 00       	r2 = r1 + Null;
84200428:	02 6e       	jump (m) Lc_aec_reference_disconnect_18;

8420042a <Lc_aec_reference_disconnect_17>:
8420042a:	1c 21       	r2 = r1 + 4;

8420042c <Lc_aec_reference_disconnect_18>:
8420042c:	64 54       	r2 = r2 LSHIFT 2;
                    if(inp_buf != NULL &&
                       inp_buf != this_buf &&
                       buff_has_metadata(inp_buf))
8420042e:	34 e9       	r2 = M[r4 + r2];
84200430:	06 60       	if EQ jump (m) Lc_aec_reference_disconnect_21;

84200432 <Lc_aec_reference_disconnect_19>:
84200432:	60 04       	Null = r2 - rMAC;
84200434:	04 60       	if EQ jump (m) Lc_aec_reference_disconnect_21;

84200436 <Lc_aec_reference_disconnect_20>:
84200436:	65 89       	r3 = M[r2 + 20];
84200438:	6d c6       	r3 = r3 AND 0x8000;
8420043a:	64 62       	if NE jump (m) Lc_aec_reference_disconnect_52;

8420043c <Lc_aec_reference_disconnect_21>:
                 * change the metadata buffer to another connected
                 * buffer with metadata, if there is any.
                 */
                tCbuffer *new_metadata_buf = NULL;
                int idx;
                for(idx=0; idx < MAX_NUMBER_SPEAKERS; idx++)
8420043c:	5b 20       	r1 = r1 + 1;
8420043e:	18 26       	Null = r1 - 8;
84200440:	f1 69       	if LT jump (m) Lc_aec_reference_disconnect_15;

84200442 <Lc_aec_reference_disconnect_22>:
                    {
                        new_metadata_buf = inp_buf;
                        break;
                    }
                }
                op_extra_data->spkr_input_metadata_buffer = new_metadata_buf;
84200442:	62 f0 c9 8e 	M[r4 + 804] = r0;

84200446 <Lc_aec_reference_disconnect_23>:
                op_extra_data->mic_ext_rate_adjust_op = 0;
            }
#endif /* INSTALL_DELEGATE_RATE_ADJUST_SUPPORT */

        }
        else if(terminal_id==AEC_REF_INPUT_TERMINAL1)
84200446:	38 04       	Null = r5 - Null;
84200448:	03 62       	if NE jump (m) Lc_aec_reference_disconnect_25;

8420044a <Lc_aec_reference_disconnect_24>:
        {
            op_extra_data->spkr_in_endpoint=NULL;
8420044a:	60 f0 82 8e 	M[r4 + 520] = Null;

8420044e <Lc_aec_reference_disconnect_25>:
        }
        op_extra_data->input_stream[terminal_id] = NULL;
8420044e:	7a 54       	r0 = r5 LSHIFT 2;
84200450:	b0 ee       	M[r4 + r0] = Null;
84200452:	3e 6e       	jump (m) Lc_aec_reference_disconnect_46;

84200454 <Lc_aec_reference_disconnect_26>:
                op_extra_data->spkr_input_metadata_buffer = new_metadata_buf;
            }
        }
#endif /* AEC_REFERENCE_SUPPORT_METADATA */

        if(terminal_id==AEC_REF_MIC_TERMINAL1)
84200454:	b8 24       	Null = r5 - 2;
84200456:	fc 63       	if NE jump (m) Lc_aec_reference_disconnect_25;

84200458 <Lc_aec_reference_disconnect_27>:
        {
            op_extra_data->mic_endpoint=NULL;
84200458:	60 f0 7f 8e 	M[r4 + 508] = Null;
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
            if(op_extra_data->mic_ext_rate_adjust_op != 0)
8420045c:	62 f0 ad 88 	r0 = M[r4 + 692];
84200460:	f7 61       	if EQ jump (m) Lc_aec_reference_disconnect_25;

84200462 <Lc_aec_reference_disconnect_28>:
            {
                /* set external op to passthrough mode */
                stream_delegate_rate_adjust_set_passthrough_mode(op_extra_data->mic_ext_rate_adjust_op, TRUE);
84200462:	43 20       	r1 = Null + 1;
84200464:	14 f0 21 e4 	call (m) $_stream_delegate_rate_adjust_set_passthrough_mode;
                op_extra_data->mic_ext_rate_adjust_op = 0;
84200468:	60 f0 ad 8e 	M[r4 + 692] = Null;
8420046c:	f1 6f       	jump (m) Lc_aec_reference_disconnect_25;

8420046e <Lc_aec_reference_disconnect_29>:
{
    return ((AEC_REF_OUTPUT_TERMINAL1 <= term_idx &&
            AEC_REF_OUTPUT_TERMINAL4 >= term_idx) ||
            (AEC_REF_OUTPUT_TERMINAL5 <= term_idx &&
                         AEC_REF_OUTPUT_TERMINAL8 >= term_idx)
            );
8420046e:	f8 24       	Null = r5 - 3;
84200470:	36 64       	if NC jump (m) Lc_aec_reference_disconnect_48;

84200472 <Lc_aec_reference_disconnect_30>:
84200472:	b8 25       	Null = r5 - 6;
84200474:	09 f0 8f e0 	if LS jump (m) Lc_aec_reference_disconnect_33;

84200478 <Lc_aec_reference_disconnect_31>:
84200478:	78 27       	Null = r5 - 13;
8420047a:	27 64       	if NC jump (m) Lc_aec_reference_disconnect_45;

8420047c <Lc_aec_reference_disconnect_32>:
8420047c:	38 2c       	Null = r5 - 16;
8420047e:	08 f0 cb e0 	if HI jump (m) Lc_aec_reference_disconnect_45;

84200482 <Lc_aec_reference_disconnect_33>:
    else
    {
#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
        if(IsMicrophoneOutputTerminal(terminal_id))
        {
            tCbuffer *this_buf = op_extra_data->output_stream[terminal_id];
84200482:	7a 54       	r0 = r5 LSHIFT 2;
84200484:	31 00       	rMAC = r4 + Null;
84200486:	51 00       	rMAC = r0 + rMAC;
84200488:	09 a8       	rMAC = M[rMAC + 64];
            if(this_buf == op_extra_data->mic_metadata_buffer)
8420048a:	62 f0 ca 88 	r0 = M[r4 + 808];
8420048e:	88 04       	Null = rMAC - r0;
84200490:	18 62       	if NE jump (m) Lc_aec_reference_disconnect_43;

84200492 <Lc_aec_reference_disconnect_34>:
            {
                /* disconnecting buffer is the mic metadata buffer,
                 * change the metadata buffer to another connected
                 * buffer with metadata, if there is any.
                 */
                tCbuffer *new_metadata_buf = NULL;
84200492:	02 00       	r0 = Null + Null;
                int idx;
                for(idx=0; idx < MAX_NUMBER_MICS; idx++)
84200494:	03 00       	r1 = Null + Null;
84200496:	03 6e       	jump (m) Lc_aec_reference_disconnect_36;

84200498 <Lc_aec_reference_disconnect_35>:
                {
                    tCbuffer *out_buf = op_extra_data->output_stream[MicrophoneOutputTerminalByIndex(idx)];
84200498:	98 24       	Null = r1 - 2;
8420049a:	03 66       	if GE jump (m) Lc_aec_reference_disconnect_37;

8420049c <Lc_aec_reference_disconnect_36>:
8420049c:	dc 20       	r2 = r1 + 3;
8420049e:	02 6e       	jump (m) Lc_aec_reference_disconnect_38;

842004a0 <Lc_aec_reference_disconnect_37>:
842004a0:	5c 22       	r2 = r1 + 9;

842004a2 <Lc_aec_reference_disconnect_38>:
842004a2:	65 f0 40 20 	r3 = r4 + 64;
842004a6:	64 54       	r2 = r2 LSHIFT 2;
                    if(out_buf != NULL &&
                       out_buf != this_buf &&
                       buff_has_metadata(out_buf))
842004a8:	2c e9       	r2 = M[r3 + r2];
842004aa:	06 60       	if EQ jump (m) Lc_aec_reference_disconnect_41;

842004ac <Lc_aec_reference_disconnect_39>:
842004ac:	60 04       	Null = r2 - rMAC;
842004ae:	04 60       	if EQ jump (m) Lc_aec_reference_disconnect_41;

842004b0 <Lc_aec_reference_disconnect_40>:
842004b0:	65 89       	r3 = M[r2 + 20];
842004b2:	6d c6       	r3 = r3 AND 0x8000;
842004b4:	29 62       	if NE jump (m) Lc_aec_reference_disconnect_53;

842004b6 <Lc_aec_reference_disconnect_41>:
                 * change the metadata buffer to another connected
                 * buffer with metadata, if there is any.
                 */
                tCbuffer *new_metadata_buf = NULL;
                int idx;
                for(idx=0; idx < MAX_NUMBER_MICS; idx++)
842004b6:	5b 20       	r1 = r1 + 1;
842004b8:	18 26       	Null = r1 - 8;
842004ba:	ef 69       	if LT jump (m) Lc_aec_reference_disconnect_35;

842004bc <Lc_aec_reference_disconnect_42>:
                    {
                        new_metadata_buf = out_buf;
                        break;
                    }
                }
                op_extra_data->mic_metadata_buffer = new_metadata_buf;
842004bc:	62 f0 ca 8e 	M[r4 + 808] = r0;

842004c0 <Lc_aec_reference_disconnect_43>:
                op_extra_data->spkr_ext_rate_adjust_op = 0;
            }
#endif /* INSTALL_DELEGATE_RATE_ADJUST_SUPPORT */

        }
        else if(terminal_id==AEC_REF_OUTPUT_TERMINAL1)
842004c0:	f8 24       	Null = r5 - 3;
842004c2:	03 62       	if NE jump (m) Lc_aec_reference_disconnect_45;

842004c4 <Lc_aec_reference_disconnect_44>:
        {
            op_extra_data->mic_out_endpoint=NULL;
842004c4:	60 f0 81 8e 	M[r4 + 516] = Null;

842004c8 <Lc_aec_reference_disconnect_45>:
        }
        op_extra_data->output_stream[terminal_id] = NULL;
842004c8:	7a 54       	r0 = r5 LSHIFT 2;
842004ca:	96 01       	r4 = r0 + r4;
842004cc:	30 ae       	M[r4 + 64] = Null;

842004ce <Lc_aec_reference_disconnect_46>:
    }

    /* OP not running, accept disconnections */
    /* OP is running, validate terminals and reset config */
    if(op_data->state != OP_RUNNING)
842004ce:	91 f0 18 80 	rMAC = MBS[r7 + 24];
842004d2:	12 60       	if EQ jump (m) Lc_aec_reference_disconnect_51;

842004d4 <Lc_aec_reference_disconnect_47>:
842004d4:	a1 f0 00 e8 	rMAC = M[r8 + Null];
842004d8:	48 8e       	M[rMAC + 4] = Null;
842004da:	8a 6f       	jump (m) Lc_aec_reference_disconnect_7;

842004dc <Lc_aec_reference_disconnect_48>:
                op_extra_data->mic_metadata_buffer = new_metadata_buf;
            }
        }
#endif /* AEC_REFERENCE_GENERATE_MIC_TIMESTAMP */

        if(terminal_id==AEC_REF_SPKR_TERMINAL1)
842004dc:	78 24       	Null = r5 - 1;
842004de:	f5 63       	if NE jump (m) Lc_aec_reference_disconnect_45;

842004e0 <Lc_aec_reference_disconnect_49>:
        {
            op_extra_data->spkr_endpoint=NULL;
842004e0:	60 f0 80 8e 	M[r4 + 512] = Null;
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
            if(op_extra_data->spkr_ext_rate_adjust_op != 0)
842004e4:	62 f0 ae 88 	r0 = M[r4 + 696];
842004e8:	f0 61       	if EQ jump (m) Lc_aec_reference_disconnect_45;

842004ea <Lc_aec_reference_disconnect_50>:
            {
                /* set external op to passthrough mode */
                stream_delegate_rate_adjust_set_passthrough_mode(op_extra_data->spkr_ext_rate_adjust_op, TRUE);
842004ea:	43 20       	r1 = Null + 1;
842004ec:	13 f0 39 ef 	call (m) $_stream_delegate_rate_adjust_set_passthrough_mode;
                op_extra_data->spkr_ext_rate_adjust_op = 0;
842004f0:	60 f0 ae 8e 	M[r4 + 696] = Null;
842004f4:	ea 6f       	jump (m) Lc_aec_reference_disconnect_45;

842004f6 <Lc_aec_reference_disconnect_51>:
    /* OP is running, validate terminals and reset config */
    if(op_data->state != OP_RUNNING)
    {
        base_op_change_response_status(response_data,STATUS_OK);
    }
    else if(validate_channels_and_build(op_data))
842004f6:	4a 08       	r0 = r7 + Null;
842004f8:	0a f0 27 ec 	call (m) $_validate_channels_and_build;
842004fc:	10 04       	Null = r0 - Null;
842004fe:	eb 63       	if NE jump (m) Lc_aec_reference_disconnect_47;

84200500 <Lc_17>:
84200500:	77 6f       	jump (m) Lc_aec_reference_disconnect_7;

84200502 <Lc_aec_reference_disconnect_52>:
                    tCbuffer *inp_buf = op_extra_data->input_stream[SpeakerInputTerminalByIndex(idx)];
                    if(inp_buf != NULL &&
                       inp_buf != this_buf &&
                       buff_has_metadata(inp_buf))
                    {
                        new_metadata_buf = inp_buf;
84200502:	22 00       	r0 = r2 + Null;
                        break;
84200504:	9f 6f       	jump (m) Lc_aec_reference_disconnect_22;

84200506 <Lc_aec_reference_disconnect_53>:
                    tCbuffer *out_buf = op_extra_data->output_stream[MicrophoneOutputTerminalByIndex(idx)];
                    if(out_buf != NULL &&
                       out_buf != this_buf &&
                       buff_has_metadata(out_buf))
                    {
                        new_metadata_buf = out_buf;
84200506:	22 00       	r0 = r2 + Null;
                        break;
84200508:	da 6f       	jump (m) Lc_aec_reference_disconnect_42;

8420050a <Lc_aec_reference_disconnect_54>:
    {
        base_op_change_response_status(response_data,STATUS_OK);
    }

    return TRUE;
}
8420050a:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
8420050c:	d8 4c       	rts;

8420050e <$_aec_reference_start>:

    return TRUE;
}

bool aec_reference_start(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
8420050e:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84200510:	16 00       	r4 = r0 + Null;
84200512:	2f 00       	r5 = r3 + Null;
    patch_fn_shared(aec_reference);

    /* Setup Response to Start Request.   Assume Failure*/
    *response_id = OPCMD_START;
84200514:	81 20       	rMAC = Null + 2;
84200516:	21 ee       	M[r2 + Null] = rMAC;
    if(!base_op_build_std_response(STATUS_CMD_FAILED,op_data->id,response_data))
84200518:	73 88       	r1 = M[r4 + 4];
8420051a:	02 f0 00 60 	r0 = Null + 4096;
8420051e:	3c 00       	r2 = r5 + Null;
84200520:	ef fd fe ff 	call (m) 0x204;
84200524:	25 e7 
84200526:	10 04       	Null = r0 - Null;
84200528:	03 62       	if NE jump (m) Lc_aec_reference_start_3;

8420052a <Lc_aec_reference_start_2>:
    {
        return(FALSE);
8420052a:	02 00       	r0 = Null + Null;
8420052c:	0f 6e       	jump (m) Lc_aec_reference_start_8;

8420052e <Lc_aec_reference_start_3>:
    }
    /* do something only if the current state is "connected" */
    if(op_data->state == OP_RUNNING)
8420052e:	31 b0       	rMAC = MBS[r4 + 24];
84200530:	0a 60       	if EQ jump (m) Lc_aec_reference_start_6;

84200532 <Lc_aec_reference_start_4>:
        base_op_change_response_status(response_data,STATUS_OK);
        return(TRUE);
    }

    /* Validate channel configuration */
    if(!validate_channels_and_build(op_data))
84200532:	32 00       	r0 = r4 + Null;
84200534:	0a f0 2b ea 	call (m) $_validate_channels_and_build;
84200538:	10 04       	Null = r0 - Null;
8420053a:	07 60       	if EQ jump (m) Lc_aec_reference_start_7;

8420053c <Lc_aec_reference_start_5>:
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
8420053c:	32 99       	r0 = M[r4 + 48];
    }
#ifdef AEC_REFERENCE_SPKR_TTP
    {
        AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
        /* initialisation for timed playback in speaker path */
        aec_reference_spkr_ttp_init(op_extra_data);
8420053e:	11 f0 23 e2 	call (m) $_aec_reference_spkr_ttp_init;
    }
#endif /* AEC_REFERENCE_SPKR_TTP */
    /* set internal capability state variable to "running" */
    /* operator state variable set to not running state. based on base_op.c */
    op_data->state = OP_RUNNING;
84200542:	30 ba       	MB[r4 + 24] = Null;

84200544 <Lc_aec_reference_start_6>:
84200544:	39 e8       	rMAC = M[r5 + Null];
84200546:	48 8e       	M[rMAC + 4] = Null;

84200548 <Lc_aec_reference_start_7>:
    }
    /* do something only if the current state is "connected" */
    if(op_data->state == OP_RUNNING)
    {
        base_op_change_response_status(response_data,STATUS_OK);
        return(TRUE);
84200548:	42 20       	r0 = Null + 1;

8420054a <Lc_aec_reference_start_8>:
    /* operator state variable set to not running state. based on base_op.c */
    op_data->state = OP_RUNNING;

    base_op_change_response_status(response_data,STATUS_OK);
    return TRUE;
}
8420054a:	f2 48       	popm <FP, r4, r5, rLink>;
8420054c:	d8 4c       	rts;

8420054e <$_aec_reference_stop>:
    base_op_change_response_status(response_data,STATUS_OK);
    return TRUE;
}

bool aec_reference_stop(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
8420054e:	c8 1c       	pushm <FP(=SP), rLink>;
84200550:	2b 00       	r1 = r3 + Null;
    /* Setup Response to Stop Request.   Assume Failure*/
    *response_id = OPCMD_STOP;
84200552:	c1 20       	rMAC = Null + 3;
84200554:	21 ee       	M[r2 + Null] = rMAC;
    return(aec_reference_stop_reset(op_data,response_data));
84200556:	0e f0 27 e6 	call (m) $_aec_reference_stop_reset;

8420055a <Lc_aec_reference_stop_2>:
}
8420055a:	c8 48       	popm <FP, rLink>;
8420055c:	d8 4c       	rts;

8420055e <$_aec_reference_buffer_details>:

    return TRUE;
}

bool aec_reference_buffer_details(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
8420055e:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200560:	28 09       	r6 = r3 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200562:	16 99       	r4 = M[r0 + 48];
}

bool aec_reference_buffer_details(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    unsigned term_id =  *((unsigned *)message_data);
84200564:	1f e8       	r5 = M[r1 + Null];
    OP_BUF_DETAILS_RSP *resp;

    patch_fn_shared(aec_reference);

    if(!base_op_buffer_details(op_data, message_data, response_id, response_data))
84200566:	ef fd fd ff 	call (m) 0xbe;
8420056a:	39 ea 
8420056c:	10 04       	Null = r0 - Null;
8420056e:	03 62       	if NE jump (m) Lc_aec_reference_buffer_details_3;

84200570 <Lc_aec_reference_buffer_details_2>:
    {
        return FALSE;
84200570:	02 00       	r0 = Null + Null;
84200572:	8e 6e       	jump (m) Lc_aec_reference_buffer_details_30;

84200574 <Lc_aec_reference_buffer_details_3>:
    }
    resp = (OP_BUF_DETAILS_RSP*)*response_data;
84200574:	88 f0 00 e8 	r6 = M[r6 + Null];

    if ( term_id & TERMINAL_SINK_MASK)
84200578:	40 f0 71 f0 	rMAC = r5 AND 0x800000;
8420057c:	00 00 
8420057e:	0d 60       	if EQ jump (m) Lc_aec_reference_buffer_details_7;

84200580 <Lc_aec_reference_buffer_details_4>:
          || ( (term_idx>=AEC_REF_INPUT_TERMINAL3)
              && (term_idx<=AEC_REF_INPUT_TERMINAL8) ) );
}
inline static bool IsMicrophoneTerminal(unsigned term_idx)
{
    term_idx &= ~TERMINAL_SINK_MASK;
84200580:	bf ff 71 ff 	rMAC = r5 AND 0xff7fffff;
84200584:	ff 1f 

    if(term_idx < AEC_REF_MIC_TERMINAL1)
84200586:	88 24       	Null = rMAC - 2;
84200588:	02 f0 f3 e1 	if C jump (m) Lc_aec_reference_buffer_details_28;

8420058c <Lc_aec_reference_buffer_details_5>:
            resp->needs_override = TRUE;
            resp->b.buffer_size  = 0;
        }
        else
        {
            if(op_extra_data->input_buffer_size != 0)
8420058c:	61 f0 d6 88 	rMAC = M[r4 + 856];
84200590:	10 60       	if EQ jump (m) Lc_aec_reference_buffer_details_9;

84200592 <Lc_aec_reference_buffer_details_6>:
            {
                /* buffer size based on user configuration */
                resp->b.buffer_size = op_extra_data->input_buffer_size;
84200592:	81 f0 04 8e 	M[r6 + 16] = rMAC;
84200596:	18 6e       	jump (m) Lc_aec_reference_buffer_details_10;

84200598 <Lc_aec_reference_buffer_details_7>:
inline static bool IsSpeakerTerminal(unsigned term_idx)
{
    return ( (term_idx==AEC_REF_SPKR_TERMINAL1)
          || (term_idx==AEC_REF_SPKR_TERMINAL2)
          || ( (term_idx>=AEC_REF_SPKR_TERMINAL3)
              && (term_idx<=AEC_REF_SPKR_TERMINAL8) ) );
84200598:	78 24       	Null = r5 - 1;
8420059a:	2d 62       	if NE jump (m) Lc_aec_reference_buffer_details_15;

8420059c <Lc_aec_reference_buffer_details_8>:
    if ( term_id & TERMINAL_SINK_MASK)
    {
        if(IsMicrophoneTerminal(term_id))
        {
            /* override MIC endpoints */
            resp->needs_override = TRUE;
8420059c:	81 f0 08 82 	rMAC = MBU[r6 + 8];
842005a0:	11 ff fb 1f 	rMAC = rMAC AND 0xfffffffb;
842005a4:	c9 c8       	rMAC = rMAC OR 0x4;
842005a6:	81 f0 08 8a 	MB[r6 + 8] = rMAC;
            resp->b.buffer_size  = 0;
842005aa:	80 f0 04 8e 	M[r6 + 16] = Null;
842005ae:	21 6e       	jump (m) Lc_aec_reference_buffer_details_14;

842005b0 <Lc_aec_reference_buffer_details_9>:
                /* buffer size based on sample rate. task period + 2ms for safety,
                 * 2ms extra should be enough as assumption is that scheduling jitter
                 * assumed will not be too high.
                 */
                resp->b.buffer_size  =
                    frac_mult(op_extra_data->input_rate,FRACTIONAL(0.002)+op_extra_data->task_period_frac);
842005b0:	62 f0 64 88 	r0 = M[r4 + 400];
842005b4:	61 f0 93 88 	rMAC = M[r4 + 588];
842005b8:	06 f1 13 f0 	r1 = rMAC + 4294967;
842005bc:	37 31 
842005be:	00 f3 72 c9 	r0 = r0 * r1 (frac);
842005c2:	82 f0 04 8e 	M[r6 + 16] = r0;

842005c6 <Lc_aec_reference_buffer_details_10>:

#ifdef AEC_REFERENCE_SUPPORT_METADATA
            /* currently metadata is supported only for
             * speaker input channels.
             */
            L3_DBG_MSG("AEC_REFERENCE: metadata is supported for speaker inputs");
842005c6:	01 f0 28 91 	rMAC = MBS[Null + 0x328];
842005ca:	c8 24       	Null = rMAC - 3;
842005cc:	07 68       	if LT jump (m) Lc_aec_reference_buffer_details_12;

842005ce <Lc_aec_reference_buffer_details_11>:
842005ce:	55 f1 02 f0 	r0 = Null + 357564489;
842005d2:	49 40 
842005d4:	ff fd 01 f0 	call (m) 0x9a2;
842005d8:	2f ee 

842005da <Lc_aec_reference_buffer_details_12>:
            resp->metadata_buffer = op_extra_data->spkr_input_metadata_buffer;
842005da:	61 f0 c9 88 	rMAC = M[r4 + 804];
842005de:	81 f0 03 8e 	M[r6 + 12] = rMAC;

842005e2 <Lc_aec_reference_buffer_details_13>:
             */
            if(op_extra_data->mic_metadata_enable &&
               IsMicrophoneOutputTerminal(term_id))
            {
                resp->metadata_buffer = op_extra_data->mic_metadata_buffer;
                resp->supports_metadata = TRUE;
842005e2:	81 f0 08 82 	rMAC = MBU[r6 + 8];
842005e6:	11 ff ef 1f 	rMAC = rMAC AND 0xffffffef;
842005ea:	c9 c9       	rMAC = rMAC OR 0x10;
842005ec:	81 f0 08 8a 	MB[r6 + 8] = rMAC;

842005f0 <Lc_aec_reference_buffer_details_14>:
            }
#endif /* AEC_REFERENCE_GENERATE_MIC_TIMESTAMP */
        }
    }

    return TRUE;
842005f0:	42 20       	r0 = Null + 1;
842005f2:	4e 6e       	jump (m) Lc_aec_reference_buffer_details_30;

842005f4 <Lc_aec_reference_buffer_details_15>:
842005f4:	b8 24       	Null = r5 - 2;
842005f6:	d3 61       	if EQ jump (m) Lc_aec_reference_buffer_details_8;

842005f8 <Lc_aec_reference_buffer_details_16>:
842005f8:	f8 25       	Null = r5 - 7;
842005fa:	04 64       	if NC jump (m) Lc_aec_reference_buffer_details_18;

842005fc <Lc_aec_reference_buffer_details_17>:
842005fc:	38 27       	Null = r5 - 12;
842005fe:	f9 ff 9f ef 	if LS jump (m) Lc_aec_reference_buffer_details_8;

84200602 <Lc_aec_reference_buffer_details_18>:
            resp->needs_override = TRUE;
            resp->b.buffer_size  = 0;
        }
        else
        {
            if(op_extra_data->output_buffer_size != 0)
84200602:	61 f0 d5 88 	rMAC = M[r4 + 852];
84200606:	14 60       	if EQ jump (m) Lc_aec_reference_buffer_details_21;

84200608 <Lc_aec_reference_buffer_details_19>:
            {
                /* buffer size based on user configuration */
                resp->b.buffer_size = op_extra_data->output_buffer_size;
84200608:	81 f0 04 8e 	M[r6 + 16] = rMAC;

                if(AEC_REF_REFERENCE_TERMINAL == term_id)
8420060c:	38 04       	Null = r5 - Null;
8420060e:	26 62       	if NE jump (m) Lc_aec_reference_buffer_details_23;

84200610 <Lc_aec_reference_buffer_details_20>:
                     * within [ref_delay, ref_delay+jitter] range. For that reason we add an extra
                     * for ref buffer so mic output can use full output_buffer_size
                     */
                    unsigned ref_extra =
                        frac_mult(op_extra_data->output_rate,
                                  op_extra_data->task_period_frac + FRACTIONAL(0.001));
84200610:	62 f0 65 88 	r0 = M[r4 + 404];
84200614:	61 f0 93 88 	rMAC = M[r4 + 588];
84200618:	83 f0 13 f0 	r1 = rMAC + 2147483;
8420061c:	9b 28 
8420061e:	00 f3 72 c9 	r0 = r0 * r1 (frac);

                    resp->b.buffer_size += ref_extra;
84200622:	81 f0 04 88 	rMAC = M[r6 + 16];
84200626:	51 00       	rMAC = r0 + rMAC;
84200628:	81 f0 04 8e 	M[r6 + 16] = rMAC;
8420062c:	17 6e       	jump (m) Lc_aec_reference_buffer_details_23;

8420062e <Lc_aec_reference_buffer_details_21>:
                }
            }
            else
            {
                unsigned two_task_period_size = frac_mult(op_extra_data->output_rate,
                                                          2*op_extra_data->task_period_frac) + 1;
8420062e:	62 f0 65 88 	r0 = M[r4 + 404];
84200632:	63 f0 93 88 	r1 = M[r4 + 588];
84200636:	1b 54       	r1 = r1 LSHIFT 1;
84200638:	00 f3 72 c9 	r0 = r0 * r1 (frac);
8420063c:	51 20       	rMAC = r0 + 1;
                /* buffer size based on sample rate */
                resp->b.buffer_size  = frac_mult(op_extra_data->output_rate,FRACTIONAL(0.0087));
8420063e:	62 f0 65 88 	r0 = M[r4 + 404];
84200642:	11 f0 83 f6 	r1 = Null + 18683107;
84200646:	e3 68 
84200648:	00 f3 72 c9 	r0 = r0 * r1 (frac);
8420064c:	82 f0 04 8e 	M[r6 + 16] = r0;
                /* given that this is for cvc-like operators and limited task periods that the
				 * operator supports, 8.7ms would be adequate for all use cases. In case of very
				 * high task period is used make sure output has space for at least two task period.
                 */
                resp->b.buffer_size = MAX(resp->b.buffer_size,
                                          two_task_period_size);
84200650:	50 04       	Null = r0 - rMAC;
84200652:	02 f0 89 e0 	if C jump (m) Lc_aec_reference_buffer_details_23;

84200656 <Lc_aec_reference_buffer_details_22>:
84200656:	81 f0 04 8e 	M[r6 + 16] = rMAC;

8420065a <Lc_aec_reference_buffer_details_23>:
#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
            /* Support metadta for microphone output channels (reference channel not included)
             * if enabled by the user.
             */
            if(op_extra_data->mic_metadata_enable &&
               IsMicrophoneOutputTerminal(term_id))
8420065a:	60 f0 cd 88 	Null = M[r4 + 820];
8420065e:	c9 61       	if EQ jump (m) Lc_aec_reference_buffer_details_14;

84200660 <Lc_aec_reference_buffer_details_24>:
{
    return ((AEC_REF_OUTPUT_TERMINAL1 <= term_idx &&
            AEC_REF_OUTPUT_TERMINAL4 >= term_idx) ||
            (AEC_REF_OUTPUT_TERMINAL5 <= term_idx &&
                         AEC_REF_OUTPUT_TERMINAL8 >= term_idx)
            );
84200660:	f8 24       	Null = r5 - 3;
84200662:	c7 65       	if NC jump (m) Lc_aec_reference_buffer_details_14;

84200664 <Lc_aec_reference_buffer_details_25>:
84200664:	b8 25       	Null = r5 - 6;
84200666:	09 f0 8b e0 	if LS jump (m) Lc_aec_reference_buffer_details_27;

8420066a <Lc_aec_reference_buffer_details_26>:
8420066a:	38 2c       	Null = r5 - 16;
8420066c:	f8 ff 85 ef 	if HI jump (m) Lc_aec_reference_buffer_details_14;

84200670 <Lc_aec_reference_buffer_details_27>:
            {
                resp->metadata_buffer = op_extra_data->mic_metadata_buffer;
84200670:	61 f0 ca 88 	rMAC = M[r4 + 808];
84200674:	81 f0 03 8e 	M[r6 + 12] = rMAC;
84200678:	b5 6f       	jump (m) Lc_aec_reference_buffer_details_13;

8420067a <Lc_aec_reference_buffer_details_28>:

    if(term_idx < AEC_REF_MIC_TERMINAL1)
    {
        return FALSE;
    }
    if(term_idx <= AEC_REF_MIC_TERMINAL4)
8420067a:	48 25       	Null = rMAC - 5;
8420067c:	f9 ff a1 ee 	if LS jump (m) Lc_aec_reference_buffer_details_8;

84200680 <Lc_aec_reference_buffer_details_29>:
    {
        return TRUE;
    }
    return (term_idx >= AEC_REF_MIC_TERMINAL5);
84200680:	02 00       	r0 = Null + Null;
84200682:	08 27       	Null = rMAC - 12;
84200684:	22 f0 42 ce 	if C r0 = Null + 1;
    }
    resp = (OP_BUF_DETAILS_RSP*)*response_data;

    if ( term_id & TERMINAL_SINK_MASK)
    {
        if(IsMicrophoneTerminal(term_id))
84200688:	10 04       	Null = r0 - Null;
8420068a:	89 63       	if NE jump (m) Lc_aec_reference_buffer_details_8;

8420068c <Lc_18>:
8420068c:	80 6f       	jump (m) Lc_aec_reference_buffer_details_5;

8420068e <Lc_aec_reference_buffer_details_30>:
#endif /* AEC_REFERENCE_GENERATE_MIC_TIMESTAMP */
        }
    }

    return TRUE;
}
8420068e:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200690:	d8 4c       	rts;

84200692 <$_aec_reference_timer_task>:
        op_extra_data->sync_block.frm_count = 0;
    }
}

void aec_reference_timer_task(void *kick_object)
{
84200692:	f6 1e       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x20;
84200694:	13 09       	r9 = r0 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200696:	b6 f0 0c 88 	r4 = M[r9 + 48];
void aec_reference_timer_task(void *kick_object)
{
    OPERATOR_DATA         *op_data = (OPERATOR_DATA*) kick_object;
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    TIME next_fire_time;
    unsigned                 sink_kicks=0,source_kicks=0;
8420069a:	40 de       	M[FP + 32] = Null;
8420069c:	48 de       	M[FP + 36] = Null;
#ifdef PROFILER_ON
    if (op_data->profiler != NULL)
8420069e:	b2 f0 08 88 	r0 = M[r9 + 32];
842006a2:	04 60       	if EQ jump (m) Lc_aec_reference_timer_task_3;

842006a4 <Lc_aec_reference_timer_task_2>:
    {
        PROFILER_START(op_data->profiler);
842006a4:	ff fd 64 f1 	call (m) 0x2d006;
842006a8:	23 eb 

842006aa <Lc_aec_reference_timer_task_3>:
    }
#endif

    patch_fn_shared(aec_reference_run);

    if(op_extra_data->ReInitFlag==TRUE)
842006aa:	61 f0 5c 88 	rMAC = M[r4 + 368];
842006ae:	48 24       	Null = rMAC - 1;
842006b0:	0c 62       	if NE jump (m) Lc_aec_reference_timer_task_7;

842006b2 <Lc_aec_reference_timer_task_4>:
    {
        op_extra_data->ReInitFlag=FALSE;
842006b2:	60 f0 5c 8e 	M[r4 + 368] = Null;

        /* Handle Reinitialize */
        if(op_extra_data->mic_sidetone_op)
842006b6:	62 f0 6c 88 	r0 = M[r4 + 432];
842006ba:	04 60       	if EQ jump (m) Lc_aec_reference_timer_task_6;

842006bc <Lc_aec_reference_timer_task_5>:
        {
            initialize_sidetone_filter_op(op_extra_data->mic_sidetone_op);
842006bc:	ff fd 58 f3 	call 0x6b82c;
842006c0:	30 eb 

842006c2 <Lc_aec_reference_timer_task_6>:
        }

        aec_reference_set_mic_gains(op_data);
842006c2:	5a 08       	r0 = r9 + Null;
842006c4:	05 f0 35 e9 	call (m) $_aec_reference_set_mic_gains;

842006c8 <Lc_aec_reference_timer_task_7>:
    }

    if(op_extra_data->mic_sidetone_op)
842006c8:	62 f0 6c 88 	r0 = M[r4 + 432];
842006cc:	0a 60       	if EQ jump (m) Lc_aec_reference_timer_task_9;

842006ce <Lc_aec_reference_timer_task_8>:
    {
        update_sidetone_filter_op(op_extra_data->mic_sidetone_op,
                                  op_extra_data->params.OFFSET_CONFIG & AEC_REFERENCE_CONFIG_SIDETONEENA,
                                  op_extra_data->shared_volume_ptr->ndvc_filter_sum_lpdnz);
842006ce:	61 f0 58 88 	rMAC = M[r4 + 352];
842006d2:	4c 88       	r2 = M[rMAC + 4];
842006d4:	61 f0 33 88 	rMAC = M[r4 + 204];
842006d8:	cb c1       	r1 = rMAC AND 0x10;
842006da:	ff fd 58 f3 	call 0x6b7d4;
842006de:	3a e7 

842006e0 <Lc_aec_reference_timer_task_9>:
        */
       && (0 != (op_extra_data->params.OFFSET_CONFIG & AEC_REFERENCE_CONFIG_SIDETONEENA))
       /* Also check that both speaker and mic still connected */
       && (NULL != op_extra_data->output_stream[AEC_REF_SPKR_TERMINAL1])
       && (NULL != op_extra_data->input_stream[AEC_REF_MIC_TERMINAL1])
       )
842006e0:	62 f0 99 88 	r0 = M[r4 + 612];
842006e4:	0e 60       	if EQ jump (m) Lc_aec_reference_timer_task_14;

842006e6 <Lc_aec_reference_timer_task_10>:
842006e6:	61 f0 33 88 	rMAC = M[r4 + 204];
842006ea:	c9 c1       	rMAC = rMAC AND 0x10;
842006ec:	0a 60       	if EQ jump (m) Lc_aec_reference_timer_task_14;

842006ee <Lc_aec_reference_timer_task_11>:
842006ee:	71 a8       	rMAC = M[r4 + 68];
842006f0:	08 60       	if EQ jump (m) Lc_aec_reference_timer_task_14;

842006f2 <Lc_aec_reference_timer_task_12>:
842006f2:	b1 88       	rMAC = M[r4 + 8];
842006f4:	06 60       	if EQ jump (m) Lc_aec_reference_timer_task_14;

842006f6 <Lc_aec_reference_timer_task_13>:
    {
        /* Run sidetone graph */
        cbops_process_data(op_extra_data->sidetone_graph, CBOPS_MAX_COPY_SIZE-1);
842006f6:	03 f0 ff 41 	r1 = Null + 511;
842006fa:	ff fd d9 f2 	call 0x5b9a4;
842006fe:	2a e5 

84200700 <Lc_aec_reference_timer_task_14>:
    }

    op_extra_data->task_decim_counter++;
84200700:	61 f0 98 88 	rMAC = M[r4 + 608];
84200704:	49 20       	rMAC = rMAC + 1;
84200706:	61 f0 98 8e 	M[r4 + 608] = rMAC;
    if(op_extra_data->task_decim_counter >= op_extra_data->task_decim_factor)
8420070a:	62 f0 97 88 	r0 = M[r4 + 604];
8420070e:	88 04       	Null = rMAC - r0;
84200710:	03 64       	if NC jump (m) Lc_aec_reference_timer_task_16;

84200712 <Lc_aec_reference_timer_task_15>:
    {
        op_extra_data->task_decim_counter = 0;
84200712:	60 f0 98 8e 	M[r4 + 608] = Null;

84200716 <Lc_aec_reference_timer_task_16>:
    }
    if(op_extra_data->task_decim_counter == 0)
84200716:	60 f0 98 88 	Null = M[r4 + 608];
8420071a:	01 f0 fb e4 	if NE jump (m) Lc_aec_reference_timer_task_78;

8420071e <Lc_aec_reference_timer_task_17>:
    {
        /* Process the speaker path if we have speaker graph and
         * speaker is still connected
         */
        bool spkr_graph_active = (NULL != op_extra_data->spkr_graph) &&
            (NULL != op_extra_data->output_stream[AEC_REF_SPKR_TERMINAL1]);
8420071e:	61 f0 72 88 	rMAC = M[r4 + 456];
84200722:	07 60       	if EQ jump (m) Lc_aec_reference_timer_task_19;

84200724 <Lc_aec_reference_timer_task_18>:
84200724:	72 a8       	r0 = M[r4 + 68];
84200726:	01 00       	rMAC = Null + Null;
84200728:	80 04       	Null = Null - r0;
8420072a:	21 f0 41 ce 	if NE rMAC = Null + 1;
8420072e:	02 6e       	jump (m) Lc_aec_reference_timer_task_20;

84200730 <Lc_aec_reference_timer_task_19>:
84200730:	01 00       	rMAC = Null + Null;

84200732 <Lc_aec_reference_timer_task_20>:
84200732:	51 de       	M[FP + 40] = rMAC;

        /* Process the mic path if we have mic graph and
         * mic is still connected
         */
        bool mic_graph_active = (NULL != op_extra_data->mic_graph) &&
            (NULL != op_extra_data->input_stream[AEC_REF_MIC_TERMINAL1]);
84200734:	61 f0 6a 88 	rMAC = M[r4 + 424];
84200738:	07 60       	if EQ jump (m) Lc_aec_reference_timer_task_22;

8420073a <Lc_aec_reference_timer_task_21>:
8420073a:	b1 88       	rMAC = M[r4 + 8];
8420073c:	07 00       	r5 = Null + Null;
8420073e:	40 04       	Null = Null - rMAC;
84200740:	21 f0 47 ce 	if NE r5 = Null + 1;
84200744:	02 6e       	jump (m) Lc_aec_reference_timer_task_23;

84200746 <Lc_aec_reference_timer_task_22>:
84200746:	07 00       	r5 = Null + Null;

84200748 <Lc_aec_reference_timer_task_23>:
         * 1- we have a rate monitor op for speaker, and/or
         * 2- speaker hasn't started consuming (to detect start of flow)
         */
        if(spkr_graph_active &&
           (op_extra_data->spkr_rate_monitor_op != NULL ||
            !op_extra_data->spkr_flow_started))
84200748:	51 d8       	rMAC = M[FP + 40];
8420074a:	2f 60       	if EQ jump (m) Lc_aec_reference_timer_task_31;

8420074c <Lc_aec_reference_timer_task_24>:
8420074c:	61 f0 73 88 	rMAC = M[r4 + 460];
84200750:	04 62       	if NE jump (m) Lc_aec_reference_timer_task_26;

84200752 <Lc_aec_reference_timer_task_25>:
84200752:	60 f0 d3 88 	Null = M[r4 + 844];
84200756:	29 62       	if NE jump (m) Lc_aec_reference_timer_task_31;

84200758 <Lc_aec_reference_timer_task_26>:
             * since previous run and pass it to the rate monitor cbops op. The
             * op can use its transfer amount, however since speaker graph runs after mic
             * graph, the new amount will have bigger jitter which might affect
             * reference synchronisation.
             */
            tCbuffer *monbuf = op_extra_data->output_stream[AEC_REF_SPKR_TERMINAL1];
84200758:	69 f0 11 88 	r7 = M[r4 + 68];
            unsigned new_offset = cbuffer_get_read_mmu_offset(monbuf);
8420075c:	4a 08       	r0 = r7 + Null;
8420075e:	ff fd 91 f0 	call (m) 0x12a28;
84200762:	2b e6 
84200764:	10 09       	r6 = r0 + Null;
            if(new_offset >= op_extra_data->spkr_last_offset)
84200766:	61 f0 d1 88 	rMAC = M[r4 + 836];
8420076a:	1f f8 00 c2 	Null = r6 - rMAC;
8420076e:	06 64       	if NC jump (m) Lc_aec_reference_timer_task_28;

84200770 <Lc_aec_reference_timer_task_27>:
            {
                op_extra_data->spkr_new_amount = new_offset - op_extra_data->spkr_last_offset;
84200770:	1f f8 01 c2 	rMAC = r6 - rMAC;
84200774:	61 f0 d2 8e 	M[r4 + 840] = rMAC;
84200778:	0c 6e       	jump (m) Lc_aec_reference_timer_task_29;

8420077a <Lc_aec_reference_timer_task_28>:
            }
            else
            {
                op_extra_data->spkr_new_amount = new_offset + cbuffer_get_size_in_words(monbuf) - op_extra_data->spkr_last_offset;
8420077a:	4a 08       	r0 = r7 + Null;
8420077c:	ff fd 90 f0 	call (m) 0x12858;
84200780:	3d e6 
84200782:	8f f2 01 c0 	rMAC = r0 + r6;
84200786:	62 f0 d1 88 	r0 = M[r4 + 836];
8420078a:	89 04       	rMAC = rMAC - r0;
8420078c:	61 f0 d2 8e 	M[r4 + 840] = rMAC;

84200790 <Lc_aec_reference_timer_task_29>:
            }
            op_extra_data->spkr_last_offset = new_offset;
84200790:	68 f0 d1 8e 	M[r4 + 836] = r6;

            /* Set a flag showing that speaker output has started consuming samples. */
            if(!op_extra_data->spkr_flow_started)
84200794:	60 f0 d3 88 	Null = M[r4 + 844];
84200798:	08 62       	if NE jump (m) Lc_aec_reference_timer_task_31;

8420079a <Lc_aec_reference_timer_task_30>:
            {
                op_extra_data->spkr_flow_started = op_extra_data->spkr_new_amount != 0;
8420079a:	01 00       	rMAC = Null + Null;
8420079c:	60 f0 d2 88 	Null = M[r4 + 840];
842007a0:	21 f0 41 ce 	if NE rMAC = Null + 1;
842007a4:	61 f0 d3 8e 	M[r4 + 844] = rMAC;

842007a8 <Lc_aec_reference_timer_task_31>:
            }
        }
#endif /* AEC_REF_CALC_SPKR_RATE_MONITOR_AMOUNT */

        /*  - Run MIC cbops */
        if(mic_graph_active)
842007a8:	38 04       	Null = r5 - Null;
842007aa:	7f 60       	if EQ jump (m) Lc_aec_reference_timer_task_57;

842007ac <Lc_aec_reference_timer_task_32>:
        {
            unsigned b4_space = 0;
            tCbuffer *mic_buf = op_extra_data->output_stream[AEC_REF_OUTPUT_TERMINAL1];
842007ac:	f7 a8       	r5 = M[r4 + 76];
            unsigned after_space;
            unsigned amount_produced;

            b4_space = cbuffer_calc_amount_space_in_words(mic_buf);
842007ae:	3a 00       	r0 = r5 + Null;
842007b0:	ff fd 5d f1 	call (m) 0x2c1b6;
842007b4:	27 e0 
842007b6:	10 09       	r6 = r0 + Null;

            if(op_extra_data->spkr_ref_active
               || op_extra_data->mic_sync_enable)
842007b8:	60 f0 a0 88 	Null = M[r4 + 640];
842007bc:	04 62       	if NE jump (m) Lc_aec_reference_timer_task_34;

842007be <Lc_aec_reference_timer_task_33>:
842007be:	60 f0 d4 88 	Null = M[r4 + 848];
842007c2:	04 60       	if EQ jump (m) Lc_aec_reference_timer_task_35;

842007c4 <Lc_aec_reference_timer_task_34>:
            {
                /* keep REFERENCE path and MIC output synchronised */
                aec_reference_update_mic_reference_sync(op_extra_data);
842007c4:	32 00       	r0 = r4 + Null;
842007c6:	0d f0 2b e4 	call (m) $_aec_reference_update_mic_reference_sync;

842007ca <Lc_aec_reference_timer_task_35>:
            }

            cbops_process_data(op_extra_data->mic_graph, CBOPS_MAX_COPY_SIZE-1);
842007ca:	03 f0 ff 41 	r1 = Null + 511;
842007ce:	62 f0 6a 88 	r0 = M[r4 + 424];
842007d2:	ff fd d8 f2 	call 0x5b9a4;
842007d6:	32 ee 
            after_space = cbuffer_calc_amount_space_in_words(mic_buf);
842007d8:	3a 00       	r0 = r5 + Null;
842007da:	ff fd 5c f1 	call (m) 0x2c1b6;
842007de:	3d ee 

            /* Don't tolerate cbops writing more than available space */
            PL_ASSERT(b4_space >= after_space);
842007e0:	2f f8 00 c2 	Null = r6 - r0;
842007e4:	02 f0 95 e0 	if C jump (m) Lc_aec_reference_timer_task_37;

842007e8 <Lc_aec_reference_timer_task_36>:
842007e8:	03 f0 fe 5a 	r1 = Null + 3838;
842007ec:	02 f0 13 60 	r0 = Null + 4115;
842007f0:	ff fd 9b f0 	call (m) 0x13f12;
842007f4:	23 e9 
842007f6:	ec 6e       	jump (m) Lc_aec_reference_timer_task_81;

842007f8 <Lc_aec_reference_timer_task_37>:
            amount_produced = b4_space - after_space;
842007f8:	2f f8 0a c2 	r8 = r6 - r0;

#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
            if(op_extra_data->mic_metadata_buffer!= NULL
               && buff_has_metadata(op_extra_data->mic_metadata_buffer))
842007fc:	61 f0 ca 88 	rMAC = M[r4 + 808];
84200800:	08 60       	if EQ jump (m) Lc_aec_reference_timer_task_40;

84200802 <Lc_aec_reference_timer_task_38>:
84200802:	49 89       	rMAC = M[rMAC + 20];
84200804:	49 c6       	rMAC = rMAC AND 0x8000;
84200806:	05 60       	if EQ jump (m) Lc_aec_reference_timer_task_40;

84200808 <Lc_aec_reference_timer_task_39>:
            {
                aec_reference_mic_generate_metadata_with_ttp(op_extra_data, b4_space - after_space);
84200808:	53 08       	r1 = r8 + Null;
8420080a:	32 00       	r0 = r4 + Null;
8420080c:	04 f0 29 e8 	call (m) $_aec_reference_mic_generate_metadata_with_ttp;

84200810 <Lc_aec_reference_timer_task_40>:
               !op_extra_data->spkr_flow_started
#else
               /* insert silence until speaker graph hasn't started */
               !op_extra_data->spkr_ref_active
#endif
               )
84200810:	31 a8       	rMAC = M[r4 + 64];
84200812:	4b 60       	if EQ jump (m) Lc_aec_reference_timer_task_57;

84200814 <Lc_aec_reference_timer_task_41>:
84200814:	60 f0 d3 88 	Null = M[r4 + 844];
84200818:	48 62       	if NE jump (m) Lc_aec_reference_timer_task_57;

8420081a <Lc_aec_reference_timer_task_42>:
                 * Note: The synchronisation is normally done by the speaker latency operator
                 * however we don't have a running speaker graph at this situation, so is done
                 * manually here.
                 */

                unsigned mic_out_data = cbuffer_calc_amount_data_in_words(mic_buf);
8420081a:	3a 00       	r0 = r5 + Null;
8420081c:	ff fd 5c f1 	call (m) 0x2c208;
84200820:	2d ef 
84200822:	17 00       	r5 = r0 + Null;
                /* if we have more than one mic, get max amount amnong all */
                unsigned idx;
                for(idx = 1; idx < op_extra_data->num_mic_channels; ++idx)
84200824:	08 71       	r6 = Null + 1;
84200826:	0f 6e       	jump (m) Lc_aec_reference_timer_task_48;

84200828 <Lc_aec_reference_timer_task_43>:
                {
                    tCbuffer *out_buf = op_extra_data->output_stream[MicrophoneOutputTerminalByIndex(idx)];
84200828:	82 f0 09 20 	r0 = r6 + 9;

8420082c <Lc_aec_reference_timer_task_44>:
8420082c:	61 f0 40 20 	rMAC = r4 + 64;
84200830:	52 54       	r0 = r0 LSHIFT 2;
                    if(NULL != out_buf)
84200832:	8a e8       	r0 = M[rMAC + r0];
84200834:	07 60       	if EQ jump (m) Lc_aec_reference_timer_task_47;

84200836 <Lc_aec_reference_timer_task_45>:
                    {
                        unsigned out_data = cbuffer_calc_amount_data_in_words(out_buf);
84200836:	ff fd 5c f1 	call (m) 0x2c208;
8420083a:	33 ee 
                        mic_out_data = MAX(out_data, mic_out_data);
8420083c:	d0 05       	Null = r0 - r5;
8420083e:	02 64       	if NC jump (m) Lc_aec_reference_timer_task_47;

84200840 <Lc_aec_reference_timer_task_46>:
84200840:	17 00       	r5 = r0 + Null;

84200842 <Lc_aec_reference_timer_task_47>:
                 */

                unsigned mic_out_data = cbuffer_calc_amount_data_in_words(mic_buf);
                /* if we have more than one mic, get max amount amnong all */
                unsigned idx;
                for(idx = 1; idx < op_extra_data->num_mic_channels; ++idx)
84200842:	08 75       	r6 = r6 + 1;

84200844 <Lc_aec_reference_timer_task_48>:
84200844:	61 f0 78 88 	rMAC = M[r4 + 480];
84200848:	1f f8 00 c2 	Null = r6 - rMAC;
8420084c:	02 f0 91 e0 	if C jump (m) Lc_aec_reference_timer_task_51;

84200850 <Lc_aec_reference_timer_task_49>:
                {
                    tCbuffer *out_buf = op_extra_data->output_stream[MicrophoneOutputTerminalByIndex(idx)];
84200850:	80 f0 02 24 	Null = r6 - 2;
84200854:	f2 ff d5 ef 	if C jump (m) Lc_aec_reference_timer_task_43;

84200858 <Lc_aec_reference_timer_task_50>:
84200858:	02 21       	r0 = Null + 4;
8420085a:	e9 6f       	jump (m) Lc_aec_reference_timer_task_44;

8420085c <Lc_aec_reference_timer_task_51>:
                    {
                        unsigned out_data = cbuffer_calc_amount_data_in_words(out_buf);
                        mic_out_data = MAX(out_data, mic_out_data);
                    }
                }
                tCbuffer *ref_buf = op_extra_data->output_stream[AEC_REF_REFERENCE_TERMINAL];
8420085c:	68 f0 10 88 	r6 = M[r4 + 64];
                unsigned ref_data = cbuffer_calc_amount_data_in_words(ref_buf);
84200860:	42 08       	r0 = r6 + Null;
84200862:	ff fd 5c f1 	call (m) 0x2c208;
84200866:	27 ed 
84200868:	11 09       	r7 = r0 + Null;
                unsigned ideal_amount = mic_out_data +
                    op_extra_data->sync_block.ref_delay +
                    (op_extra_data->sync_block.jitter/2);
8420086a:	62 f0 85 88 	r0 = M[r4 + 532];
8420086e:	61 f0 8a 88 	rMAC = M[r4 + 552];
84200872:	12 50       	r0 = r0 LSHIFT -1;
84200874:	51 00       	rMAC = r0 + rMAC;
84200876:	cf 01       	r5 = rMAC + r5;
                /* We only insert, dropping is done via waiting for mic buffer to fill up */
                unsigned amount_to_insert = 0;
                if(ideal_amount > ref_data)
84200878:	9f f7 00 c2 	Null = r5 - r7;
8420087c:	09 f0 ad e0 	if LS jump (m) Lc_aec_reference_timer_task_57;

84200880 <Lc_aec_reference_timer_task_52>:
                {
                    unsigned ref_space = cbuffer_calc_amount_space_in_words(ref_buf);
84200880:	42 08       	r0 = r6 + Null;
84200882:	ff fd 5c f1 	call (m) 0x2c1b6;
84200886:	35 e9 
                    amount_to_insert = ideal_amount - ref_data;
84200888:	9f f7 03 c2 	r1 = r5 - r7;
                     * Note: limit to amount_produced*3/2, since we own only the write
                     * side of the buffer, although the read sides are syncronised by
                     * consumer but there is a chance the this operator preempt the consumer
                     * right at the middle of read pointer update. For that reason we apply this limit
                     */
                    amount_to_insert = MIN(amount_to_insert, amount_produced*3/2);
8420088c:	01 fa 94 d9 	r2 = r8 * 3 (int);
84200890:	24 50       	r2 = r2 LSHIFT -1;
84200892:	18 05       	Null = r1 - r2;
84200894:	02 64       	if NC jump (m) Lc_aec_reference_timer_task_54;

84200896 <Lc_aec_reference_timer_task_53>:
84200896:	23 00       	r1 = r2 + Null;

84200898 <Lc_aec_reference_timer_task_54>:
                    amount_to_insert = MIN(amount_to_insert, ref_space);
84200898:	98 04       	Null = r1 - r0;
8420089a:	02 64       	if NC jump (m) Lc_aec_reference_timer_task_56;

8420089c <Lc_aec_reference_timer_task_55>:
8420089c:	13 00       	r1 = r0 + Null;

8420089e <Lc_aec_reference_timer_task_56>:

                    /* insert silence */
                    cbuffer_block_fill(ref_buf, amount_to_insert, 0);
8420089e:	04 00       	r2 = Null + Null;
842008a0:	42 08       	r0 = r6 + Null;
842008a2:	ff fd 5d f1 	call (m) 0x2c2e8;
842008a6:	27 e2 

842008a8 <Lc_aec_reference_timer_task_57>:
                }
            }
        }

        /*  - Run SPKR cbops */
        if(spkr_graph_active)
842008a8:	51 d8       	rMAC = M[FP + 40];
842008aa:	57 60       	if EQ jump (m) Lc_aec_reference_timer_task_71;

842008ac <Lc_aec_reference_timer_task_58>:
        {
#ifdef AEC_REFERENCE_SUPPORT_METADATA
            unsigned max_to_process = CBOPS_MAX_COPY_SIZE-1;
842008ac:	01 f0 ff 41 	rMAC = Null + 511;
842008b0:	59 de       	M[FP + 44] = rMAC;
            tCbuffer *met_buf = op_extra_data->spkr_input_metadata_buffer;
            unsigned before_amount = 0;
842008b2:	00 09       	r6 = Null + Null;
            if(met_buf!= NULL && buff_has_metadata(met_buf))
842008b4:	67 f0 c9 88 	r5 = M[r4 + 804];
842008b8:	19 60       	if EQ jump (m) Lc_aec_reference_timer_task_63;

842008ba <Lc_aec_reference_timer_task_59>:
842008ba:	79 89       	rMAC = M[r5 + 20];
842008bc:	49 c6       	rMAC = rMAC AND 0x8000;
842008be:	1f 60       	if EQ jump (m) Lc_aec_reference_timer_task_64;

842008c0 <Lc_aec_reference_timer_task_60>:
            {
                /* amount of metadata available */
                unsigned meta_data_available = buff_metadata_available_octets(met_buf)/OCTETS_PER_SAMPLE;
842008c0:	3a 00       	r0 = r5 + Null;
842008c2:	ff fd 8a f0 	call (m) 0x11d04;
842008c6:	23 e2 
842008c8:	7f f2 d9 c8 	r7 = r0 LSHIFT -2;

                /* get amount in the buffer before running cbops */
                before_amount = cbuffer_calc_amount_data_in_words(met_buf);
842008cc:	3a 00       	r0 = r5 + Null;
842008ce:	ff fd 5c f1 	call (m) 0x2c208;
842008d2:	3b e9 
842008d4:	10 09       	r6 = r0 + Null;

                /* if we have metadata enabled then limit the amount to
                 * process to the amount of available metadata
                 */
                max_to_process = MIN(max_to_process, meta_data_available);
842008d6:	59 d8       	rMAC = M[FP + 44];
842008d8:	9f f1 00 c2 	Null = rMAC - r7;
842008dc:	03 64       	if NC jump (m) Lc_aec_reference_timer_task_62;

842008de <Lc_aec_reference_timer_task_61>:
842008de:	e9 f0 0b 8e 	M[FP + 44] = r7;

842008e2 <Lc_aec_reference_timer_task_62>:
#ifdef AEC_REFERENCE_SPKR_TTP
                /* Run TTP error control for speaker graph */
                aec_reference_spkr_ttp_run(op_extra_data, &max_to_process);
842008e2:	c3 12       	r1 = FP + 44;
842008e4:	32 00       	r0 = r4 + Null;
842008e6:	0e f0 3d eb 	call (m) $_aec_reference_spkr_ttp_run;

842008ea <Lc_aec_reference_timer_task_63>:
#endif
            }

            /* run cbops process */
            cbops_process_data(op_extra_data->spkr_graph, max_to_process);
842008ea:	5b d8       	r1 = M[FP + 44];
842008ec:	62 f0 72 88 	r0 = M[r4 + 456];
842008f0:	ff fd d8 f2 	call 0x5b9a4;
842008f4:	34 e5 

            if(met_buf!= NULL && buff_has_metadata(met_buf))
842008f6:	38 04       	Null = r5 - Null;
842008f8:	09 62       	if NE jump (m) Lc_aec_reference_timer_task_65;

842008fa <Lc_19>:
842008fa:	27 6e       	jump (m) Lc_aec_reference_timer_task_69;

842008fc <Lc_aec_reference_timer_task_64>:
                aec_reference_spkr_ttp_run(op_extra_data, &max_to_process);
#endif
            }

            /* run cbops process */
            cbops_process_data(op_extra_data->spkr_graph, max_to_process);
842008fc:	03 f0 ff 41 	r1 = Null + 511;
84200900:	62 f0 72 88 	r0 = M[r4 + 456];
84200904:	ff fd d8 f2 	call 0x5b9a4;
84200908:	20 e5 

8420090a <Lc_aec_reference_timer_task_65>:
8420090a:	79 89       	rMAC = M[r5 + 20];
8420090c:	49 c6       	rMAC = rMAC AND 0x8000;
8420090e:	1d 60       	if EQ jump (m) Lc_aec_reference_timer_task_69;

84200910 <Lc_aec_reference_timer_task_66>:
                 * The assumption is that the write pointer of
                 * input buffer isn't changed during cbops
                 * process.
                 */
                unsigned amount_processed;
                unsigned after_amount = cbuffer_calc_amount_data_in_words(met_buf);
84200910:	3a 00       	r0 = r5 + Null;
84200912:	ff fd 5c f1 	call (m) 0x2c208;
84200916:	37 e7 
#ifdef TODO_AEC_REFERENCE_TTP
                /* for the moment don't tolerate cbops doing anything wrong */
                PL_ASSERT(after_amount <= before_amount);
84200918:	8f f2 00 c2 	Null = r0 - r6;
8420091c:	08 f0 a5 e1 	if HI jump (m) Lc_aec_reference_timer_task_80;

84200920 <Lc_aec_reference_timer_task_67>:
                amount_processed = before_amount - after_amount;
84200920:	00 f2 38 c2 	r6 = r6 - r0;
                     */
                    unsigned buff_size = cbuffer_get_size_in_words(met_buf);
                    amount_processed = buff_size + before_amount - after_amount;
                }
#endif /* TODO_AEC_REFERENCE_TTP */
                if(amount_processed > 0)
84200924:	0f f8 00 c2 	Null = r6 - Null;
84200928:	10 60       	if EQ jump (m) Lc_aec_reference_timer_task_69;

8420092a <Lc_aec_reference_timer_task_68>:
                {
                    /* delete metadata tags for consumed input */
                    unsigned b4idx, afteridx;
                    buff_metadata_tag_list_delete(
                        buff_metadata_remove(met_buf, OCTETS_PER_SAMPLE * amount_processed, &b4idx, &afteridx));
8420092a:	45 13       	r3 = FP + 52;
8420092c:	04 13       	r2 = FP + 48;
8420092e:	01 f8 d3 c8 	r1 = r6 LSHIFT 2;
84200932:	3a 00       	r0 = r5 + Null;
84200934:	ff fd 8a f0 	call (m) 0x11d7a;
84200938:	27 e2 
8420093a:	ff fd 87 f0 	call (m) 0x11906;
8420093e:	2d ee 
                    /* update timestamp */
                    aec_reference_spkr_ttp_update_last_timestamp(op_extra_data, amount_processed);
84200940:	43 08       	r1 = r6 + Null;
84200942:	32 00       	r0 = r4 + Null;
84200944:	0f f0 3f e1 	call (m) $_aec_reference_spkr_ttp_update_last_timestamp;

84200948 <Lc_aec_reference_timer_task_69>:
            }
#else /* AEC_REFERENCE_SUPPORT_METADATA */
            cbops_process_data(op_extra_data->spkr_graph, CBOPS_MAX_COPY_SIZE-1);
#endif /* AEC_REFERENCE_SUPPORT_METADATA*/
#ifdef PROFILER_ON
            if (op_data->profiler != NULL)
84200948:	b1 f0 08 88 	rMAC = M[r9 + 32];
8420094c:	06 60       	if EQ jump (m) Lc_aec_reference_timer_task_71;

8420094e <Lc_aec_reference_timer_task_70>:
            {
                op_data->profiler->kick_inc++;
8420094e:	12 f0 2a 88 	r0 = M[rMAC + 168];
84200952:	52 20       	r0 = r0 + 1;
84200954:	12 f0 2a 8e 	M[rMAC + 168] = r0;

84200958 <Lc_aec_reference_timer_task_71>:
            }
#endif            
        }

        /* Check for Kicks (outputs).   Use Output 1 available data*/
        if(op_extra_data->sync_block.block_sync)
84200958:	60 f0 87 88 	Null = M[r4 + 540];
8420095c:	06 60       	if EQ jump (m) Lc_aec_reference_timer_task_73;

8420095e <Lc_aec_reference_timer_task_72>:
        {
            source_kicks = op_extra_data->source_kicks;
8420095e:	61 f0 7b 88 	rMAC = M[r4 + 492];
84200962:	49 de       	M[FP + 36] = rMAC;
            op_extra_data->sync_block.block_sync = 0;
84200964:	60 f0 87 8e 	M[r4 + 540] = Null;

84200968 <Lc_aec_reference_timer_task_73>:
        }

        /* Check for Kick (inputs).   Use Input 1 available space */
        if(op_extra_data->input_stream[AEC_REF_INPUT_TERMINAL1])
84200968:	32 e8       	r0 = M[r4 + Null];
8420096a:	0d 60       	if EQ jump (m) Lc_aec_reference_timer_task_76;

8420096c <Lc_aec_reference_timer_task_74>:
        {
            int available_space = cbuffer_calc_amount_space_in_words(op_extra_data->input_stream[AEC_REF_INPUT_TERMINAL1]);
8420096c:	ff fd 5c f1 	call (m) 0x2c1b6;
84200970:	2b e2 

            if(available_space >= op_extra_data->spkr_kick_size)
84200972:	61 f0 75 88 	rMAC = M[r4 + 468];
84200976:	50 04       	Null = r0 - rMAC;
84200978:	06 64       	if NC jump (m) Lc_aec_reference_timer_task_76;

8420097a <Lc_aec_reference_timer_task_75>:
            {
                sink_kicks = op_extra_data->sink_kicks;
8420097a:	61 f0 7c 88 	rMAC = M[r4 + 496];
8420097e:	41 de       	M[FP + 32] = rMAC;
            }
        }


        if(sink_kicks || source_kicks)
84200980:	08 04       	Null = rMAC - Null;
84200982:	03 62       	if NE jump (m) Lc_aec_reference_timer_task_77;

84200984 <Lc_aec_reference_timer_task_76>:
84200984:	49 d8       	rMAC = M[FP + 36];
84200986:	07 60       	if EQ jump (m) Lc_aec_reference_timer_task_78;

84200988 <Lc_aec_reference_timer_task_77>:
        {
            opmgr_kick_from_operator(op_data,source_kicks,sink_kicks);
84200988:	5a 08       	r0 = r9 + Null;
8420098a:	44 d8       	r2 = M[FP + 32];
8420098c:	4b d8       	r1 = M[FP + 36];
8420098e:	ff fd 11 f0 	call (m) 0x2d10;
84200992:	23 ec 

84200994 <Lc_aec_reference_timer_task_78>:
        }
    }

/* Next Timer Event */
    next_fire_time = time_add(get_last_fire_time(), op_extra_data->kick_period);
84200994:	ff fd 9c f0 	call (m) 0x14334;
84200998:	21 ed 
8420099a:	61 f0 94 88 	rMAC = M[r4 + 592];
8420099e:	8a 00       	r0 = rMAC + r0;
    op_extra_data->kick_id = timer_schedule_event_at(next_fire_time,
                                                     aec_reference_timer_task, (void*)op_data);
842009a0:	42 f0 03 f0 	r1 = Null + 69207699;
842009a4:	93 4a 
INLINE_SECTION static inline tTimerId timer_schedule_event_at(
       TIME event_time,
       tTimerEventFunction TimerEventFunction,
       void *data_pointer)
{
    return create_add_strict_event(event_time, TimerEventFunction, data_pointer);
842009a6:	5c 08       	r2 = r9 + Null;
842009a8:	ff fd 9b f0 	call (m) 0x1402a;
842009ac:	23 e4 
}
842009ae:	62 f0 5d 8e 	M[r4 + 372] = r0;
#ifdef PROFILER_ON
    if (op_data->profiler != NULL)
842009b2:	b2 f0 08 88 	r0 = M[r9 + 32];
842009b6:	0c 60       	if EQ jump (m) Lc_aec_reference_timer_task_81;

842009b8 <Lc_aec_reference_timer_task_79>:
    {
        PROFILER_STOP(op_data->profiler);
842009b8:	ff fd 63 f1 	call (m) 0x2d0d0;
842009bc:	39 e8 
842009be:	08 6e       	jump (m) Lc_aec_reference_timer_task_81;

842009c0 <Lc_aec_reference_timer_task_80>:
                 */
                unsigned amount_processed;
                unsigned after_amount = cbuffer_calc_amount_data_in_words(met_buf);
#ifdef TODO_AEC_REFERENCE_TTP
                /* for the moment don't tolerate cbops doing anything wrong */
                PL_ASSERT(after_amount <= before_amount);
842009c0:	03 f0 73 5b 	r1 = Null + 3955;
842009c4:	02 f0 13 60 	r0 = Null + 4115;
842009c8:	ff fd 9a f0 	call (m) 0x13f12;
842009cc:	2b ea 

842009ce <Lc_aec_reference_timer_task_81>:
    if (op_data->profiler != NULL)
    {
        PROFILER_STOP(op_data->profiler);
    }
#endif
}
842009ce:	f6 4a       	SP = SP - 0x20, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
842009d0:	d8 4c       	rts;

842009d2 <$_aec_reference_opmsg_ep_get_config>:
    return;
}
#endif /* INSTALL_DELEGATE_RATE_ADJUST_SUPPORT */

bool aec_reference_opmsg_ep_get_config(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842009d2:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
842009d4:	17 99       	r5 = M[r0 + 48];

bool aec_reference_opmsg_ep_get_config(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    OPMSG_GET_CONFIG *msg = message_data;
    OPMSG_GET_CONFIG_RESULT *result = msg->result;
842009d6:	1e 89       	r4 = M[r1 + 16];
    unsigned term_idx = msg->header.cmd_header.client_id;
842009d8:	19 e8       	rMAC = M[r1 + Null];

    /* msg->value - Pointer which will be populated with the asked configuration value
       msg->cmd_header.client_id - Terminal ID (includes TERMINAL_SINK_MASK for sinks)
       msg->key - Parameter Key to return value for */

    switch(msg->key)
842009da:	da 88       	r0 = M[r1 + 12];
842009dc:	d0 24       	Null = r0 - 3;
842009de:	62 64       	if NC jump (m) Lc_aec_reference_opmsg_ep_get_config_28;

842009e0 <Lc_aec_reference_opmsg_ep_get_config_2>:
842009e0:	d0 26       	Null = r0 - 11;
842009e2:	08 f0 c1 e1 	if HI jump (m) Lc_aec_reference_opmsg_ep_get_config_28;

842009e6 <Lc_aec_reference_opmsg_ep_get_config_3>:
842009e6:	ea 7c       	r0 = r0 + -3;
842009e8:	52 54       	r0 = r0 LSHIFT 2;
842009ea:	e0 f0 22 f0 	r0 = M[r0 + 7340280];
842009ee:	3e 88 
842009f0:	da 4c       	jump r0;

842009f2 <Lc_aec_reference_opmsg_ep_get_config_4>:
    {
        case OPMSG_OP_TERMINAL_DETAILS:
            /* Return a uint32 - Is Terminal emulating a real endpoint. Called at operator endpoint creation.
             */
            if(term_idx & TERMINAL_SINK_MASK)
842009f2:	40 f0 12 f0 	r0 = rMAC AND 0x800000;
842009f6:	00 00 
842009f8:	0e 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_get_config_8;

842009fa <Lc_aec_reference_opmsg_ep_get_config_5>:
          || ( (term_idx>=AEC_REF_INPUT_TERMINAL3)
              && (term_idx<=AEC_REF_INPUT_TERMINAL8) ) );
}
inline static bool IsMicrophoneTerminal(unsigned term_idx)
{
    term_idx &= ~TERMINAL_SINK_MASK;
842009fa:	bf ff 11 ff 	rMAC = rMAC AND 0xff7fffff;
842009fe:	ff 1f 

    if(term_idx < AEC_REF_MIC_TERMINAL1)
84200a00:	88 24       	Null = rMAC - 2;
84200a02:	02 f0 a5 e1 	if C jump (m) Lc_aec_reference_opmsg_ep_get_config_29;

84200a06 <Lc_aec_reference_opmsg_ep_get_config_6>:
    {
        return FALSE;
84200a06:	02 00       	r0 = Null + Null;

84200a08 <Lc_aec_reference_opmsg_ep_get_config_7>:
            {
                result->value = (uint32)(IsMicrophoneTerminal(term_idx)?
                                         OPMSG_GET_CONFIG_TERMINAL_DETAILS_NONE:
                                         OPMSG_GET_CONFIG_TERMINAL_DETAILS_REAL);
84200a08:	01 00       	rMAC = Null + Null;
84200a0a:	10 04       	Null = r0 - Null;
84200a0c:	20 f0 41 ce 	if EQ rMAC = Null + 1;
84200a10:	31 ee       	M[r4 + Null] = rMAC;
84200a12:	21 6e       	jump (m) Lc_aec_reference_opmsg_ep_get_config_20;

84200a14 <Lc_aec_reference_opmsg_ep_get_config_8>:
inline static bool IsSpeakerTerminal(unsigned term_idx)
{
    return ( (term_idx==AEC_REF_SPKR_TERMINAL1)
          || (term_idx==AEC_REF_SPKR_TERMINAL2)
          || ( (term_idx>=AEC_REF_SPKR_TERMINAL3)
              && (term_idx<=AEC_REF_SPKR_TERMINAL8) ) );
84200a14:	48 24       	Null = rMAC - 1;
84200a16:	08 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_get_config_12;

84200a18 <Lc_aec_reference_opmsg_ep_get_config_9>:
84200a18:	88 24       	Null = rMAC - 2;
84200a1a:	06 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_get_config_12;

84200a1c <Lc_aec_reference_opmsg_ep_get_config_10>:
84200a1c:	c8 25       	Null = rMAC - 7;
84200a1e:	4e 64       	if NC jump (m) Lc_aec_reference_opmsg_ep_get_config_32;

84200a20 <Lc_aec_reference_opmsg_ep_get_config_11>:
84200a20:	08 27       	Null = rMAC - 12;
84200a22:	08 f0 99 e1 	if HI jump (m) Lc_aec_reference_opmsg_ep_get_config_32;

84200a26 <Lc_aec_reference_opmsg_ep_get_config_12>:
84200a26:	41 20       	rMAC = Null + 1;
84200a28:	4a 6e       	jump (m) Lc_aec_reference_opmsg_ep_get_config_33;

84200a2a <Lc_aec_reference_opmsg_ep_get_config_13>:
                                         OPMSG_GET_CONFIG_TERMINAL_DETAILS_NONE:
                                         OPMSG_GET_CONFIG_TERMINAL_DETAILS_REAL);
            }
            break;
        case OPMSG_OP_TERMINAL_RATEMATCH_ABILITY: /* uint32 */
            if(term_idx == (AEC_REF_INPUT_TERMINAL1|TERMINAL_SINK_MASK) )
84200a2a:	00 f2 10 f0 	Null = rMAC - 8388608;
84200a2e:	00 24 
84200a30:	05 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_get_config_15;

84200a32 <Lc_aec_reference_opmsg_ep_get_config_14>:
            {
                result->value = (uint32)op_extra_data->spkr_rate_ability;
84200a32:	71 f0 6f 88 	rMAC = M[r5 + 444];
84200a36:	31 ee       	M[r4 + Null] = rMAC;
84200a38:	09 6e       	jump (m) Lc_aec_reference_opmsg_ep_get_config_18;

84200a3a <Lc_aec_reference_opmsg_ep_get_config_15>:
                     */
                    result->value = RATEMATCHING_SUPPORT_HW;
                }
#endif
            }
            else if (term_idx == AEC_REF_OUTPUT_TERMINAL1)
84200a3a:	c8 24       	Null = rMAC - 3;
84200a3c:	0e 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_get_config_21;

84200a3e <Lc_aec_reference_opmsg_ep_get_config_16>:
            {

                if(op_extra_data->mic_sync_enable)
84200a3e:	70 f0 d4 88 	Null = M[r5 + 848];
84200a42:	0b 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_get_config_21;

84200a44 <Lc_aec_reference_opmsg_ep_get_config_17>:
                    result->value = (uint32)RATEMATCHING_SUPPORT_AUTO;
                }
                else
                {

                    result->value = (uint32)op_extra_data->mic_rate_ability;
84200a44:	71 f0 67 88 	rMAC = M[r5 + 412];
84200a48:	31 ee       	M[r4 + Null] = rMAC;

84200a4a <Lc_aec_reference_opmsg_ep_get_config_18>:
        case OPMSG_OP_TERMINAL_RATEMATCH_ABILITY: /* uint32 */
            if(term_idx == (AEC_REF_INPUT_TERMINAL1|TERMINAL_SINK_MASK) )
            {
                result->value = (uint32)op_extra_data->spkr_rate_ability;
#ifdef ENABLE_FORCE_ENACTING_BY_AEC_REFERENCE
                if(RATEMATCHING_SUPPORT_SW == result->value)
84200a4a:	31 e8       	rMAC = M[r4 + Null];
84200a4c:	48 24       	Null = rMAC - 1;
84200a4e:	03 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_get_config_20;

84200a50 <Lc_aec_reference_opmsg_ep_get_config_19>:
                {
                    /* Advertise HW despite planning to do it in SW
                     * this will make sure that enacting will be granted
                     * to this end.
                     */
                    result->value = RATEMATCHING_SUPPORT_HW;
84200a50:	81 20       	rMAC = Null + 2;
84200a52:	31 ee       	M[r4 + Null] = rMAC;

84200a54 <Lc_aec_reference_opmsg_ep_get_config_20>:
        case OPMSG_OP_TERMINAL_PROC_TIME:         /* uint32 */
        default:
            return FALSE;
    }

    return TRUE;
84200a54:	42 20       	r0 = Null + 1;
84200a56:	39 6e       	jump (m) Lc_aec_reference_opmsg_ep_get_config_34;

84200a58 <Lc_aec_reference_opmsg_ep_get_config_21>:
                }

            }
            else
            {
                result->value = (uint32)RATEMATCHING_SUPPORT_AUTO;
84200a58:	c1 20       	rMAC = Null + 3;
84200a5a:	31 ee       	M[r4 + Null] = rMAC;
84200a5c:	fc 6f       	jump (m) Lc_aec_reference_opmsg_ep_get_config_20;

84200a5e <Lc_aec_reference_opmsg_ep_get_config_22>:
            break;
        case OPMSG_OP_TERMINAL_KICK_PERIOD:       /* uint32 */
            break;
        case OPMSG_OP_TERMINAL_RATEMATCH_RATE:    /* uint32 */

            if(term_idx == (AEC_REF_INPUT_TERMINAL1|TERMINAL_SINK_MASK) )
84200a5e:	00 f2 10 f0 	Null = rMAC - 8388608;
84200a62:	00 24 
84200a64:	0b 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_get_config_24;

84200a66 <Lc_aec_reference_opmsg_ep_get_config_23>:
            {
                result->value = rate_monitor_op_get_rate(op_extra_data->spkr_rate_monitor_op,0);
84200a66:	72 f0 73 88 	r0 = M[r5 + 460];
84200a6a:	03 00       	r1 = Null + Null;
84200a6c:	ff fd 58 f3 	call 0x6bbf0;
84200a70:	24 ec 
84200a72:	32 ee       	M[r4 + Null] = r0;
                patch_fn_shared(aec_reference);

                op_extra_data->spkr_rate_meas = (unsigned)(result->value);
84200a74:	72 f0 83 8e 	M[r5 + 524] = r0;
84200a78:	ee 6f       	jump (m) Lc_aec_reference_opmsg_ep_get_config_20;

84200a7a <Lc_aec_reference_opmsg_ep_get_config_24>:

            }
            else if (term_idx == AEC_REF_OUTPUT_TERMINAL1)
84200a7a:	c8 24       	Null = rMAC - 3;
84200a7c:	0b 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_get_config_26;

84200a7e <Lc_aec_reference_opmsg_ep_get_config_25>:
            {
                result->value = rate_monitor_op_get_rate(op_extra_data->mic_rate_monitor_op,0);
84200a7e:	72 f0 6b 88 	r0 = M[r5 + 428];
84200a82:	03 00       	r1 = Null + Null;
84200a84:	ff fd 58 f3 	call 0x6bbf0;
84200a88:	2c eb 
84200a8a:	32 ee       	M[r4 + Null] = r0;
                patch_fn_shared(aec_reference);

                op_extra_data->mic_rate_meas = (unsigned)(result->value);
84200a8c:	72 f0 84 8e 	M[r5 + 528] = r0;
84200a90:	e2 6f       	jump (m) Lc_aec_reference_opmsg_ep_get_config_20;

84200a92 <Lc_aec_reference_opmsg_ep_get_config_26>:
            }
            else
            {
                /* 1.0 in Qx.22 independent of word width */
                result->value = 1<<STREAM_RATEMATCHING_FIX_POINT_SHIFT;
84200a92:	04 f0 01 f0 	rMAC = Null + 4194304;
84200a96:	00 40 
84200a98:	31 ee       	M[r4 + Null] = rMAC;
84200a9a:	dd 6f       	jump (m) Lc_aec_reference_opmsg_ep_get_config_20;

84200a9c <Lc_aec_reference_opmsg_ep_get_config_27>:
            }

            break;
        case OPMSG_OP_TERMINAL_RATEMATCH_MEASUREMENT:
            /* TODO */
            result->rm_measurement.sp_deviation = 0;
84200a9c:	30 ee       	M[r4 + Null] = Null;
            result->rm_measurement.measurement.valid = FALSE;
84200a9e:	30 8b       	MB[r4 + 4] = Null;
            break;
84200aa0:	da 6f       	jump (m) Lc_aec_reference_opmsg_ep_get_config_20;

84200aa2 <Lc_aec_reference_opmsg_ep_get_config_28>:
        case OPMSG_OP_TERMINAL_BLOCK_SIZE:        /* uint32 */
        case OPMSG_OP_TERMINAL_PROC_TIME:         /* uint32 */
        default:
            return FALSE;
84200aa2:	02 00       	r0 = Null + Null;
84200aa4:	12 6e       	jump (m) Lc_aec_reference_opmsg_ep_get_config_34;

84200aa6 <Lc_aec_reference_opmsg_ep_get_config_29>:

    if(term_idx < AEC_REF_MIC_TERMINAL1)
    {
        return FALSE;
    }
    if(term_idx <= AEC_REF_MIC_TERMINAL4)
84200aa6:	48 25       	Null = rMAC - 5;
84200aa8:	08 f0 89 e0 	if HI jump (m) Lc_aec_reference_opmsg_ep_get_config_31;

84200aac <Lc_aec_reference_opmsg_ep_get_config_30>:
    {
        return TRUE;
84200aac:	42 20       	r0 = Null + 1;
84200aae:	ad 6f       	jump (m) Lc_aec_reference_opmsg_ep_get_config_7;

84200ab0 <Lc_aec_reference_opmsg_ep_get_config_31>:
    }
    return (term_idx >= AEC_REF_MIC_TERMINAL5);
84200ab0:	02 00       	r0 = Null + Null;
84200ab2:	08 27       	Null = rMAC - 12;
84200ab4:	22 f0 42 ce 	if C r0 = Null + 1;
84200ab8:	a8 6f       	jump (m) Lc_aec_reference_opmsg_ep_get_config_7;

84200aba <Lc_aec_reference_opmsg_ep_get_config_32>:
inline static bool IsSpeakerTerminal(unsigned term_idx)
{
    return ( (term_idx==AEC_REF_SPKR_TERMINAL1)
          || (term_idx==AEC_REF_SPKR_TERMINAL2)
          || ( (term_idx>=AEC_REF_SPKR_TERMINAL3)
              && (term_idx<=AEC_REF_SPKR_TERMINAL8) ) );
84200aba:	01 00       	rMAC = Null + Null;

84200abc <Lc_aec_reference_opmsg_ep_get_config_33>:
            }
            else
            {
                result->value = (uint32)(IsSpeakerTerminal(term_idx)?
                                         OPMSG_GET_CONFIG_TERMINAL_DETAILS_NONE:
                                         OPMSG_GET_CONFIG_TERMINAL_DETAILS_REAL);
84200abc:	02 00       	r0 = Null + Null;
84200abe:	08 04       	Null = rMAC - Null;
84200ac0:	20 f0 42 ce 	if EQ r0 = Null + 1;
84200ac4:	32 ee       	M[r4 + Null] = r0;
84200ac6:	c7 6f       	jump (m) Lc_aec_reference_opmsg_ep_get_config_20;

84200ac8 <Lc_aec_reference_opmsg_ep_get_config_34>:
        default:
            return FALSE;
    }

    return TRUE;
}
84200ac8:	f2 48       	popm <FP, r4, r5, rLink>;
84200aca:	d8 4c       	rts;

84200acc <$_aec_reference_opmsg_ep_configure>:


bool aec_reference_opmsg_ep_configure(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200acc:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200ace:	16 99       	r4 = M[r0 + 48];

bool aec_reference_opmsg_ep_configure(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    OPMSG_CONFIGURE  *msg = message_data;
    unsigned terminal_id = msg->header.cmd_header.client_id;
84200ad0:	19 e8       	rMAC = M[r1 + Null];
    uint32      value = msg->value;
84200ad2:	1f 89       	r5 = M[r1 + 16];

    /* msg->value - Pointer or Value for Key
       msg->cmd_header.client_id - Terminal ID (includes TERMINAL_SINK_MASK for sinks)
       msg->key - Parameter Key to return value for */

    switch(msg->key)
84200ad4:	da 88       	r0 = M[r1 + 12];
84200ad6:	0c 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_5;

84200ad8 <Lc_aec_reference_opmsg_ep_configure_2>:
84200ad8:	90 26       	Null = r0 - 10;
84200ada:	08 f0 95 e0 	if HI jump (m) Lc_aec_reference_opmsg_ep_configure_5;

84200ade <Lc_aec_reference_opmsg_ep_configure_3>:
84200ade:	52 24       	r0 = r0 - 1;
84200ae0:	52 54       	r0 = r0 LSHIFT 2;
84200ae2:	e0 f0 22 f0 	r0 = M[r0 + 7340316];
84200ae6:	47 88 
84200ae8:	da 4c       	jump r0;

84200aea <Lc_aec_reference_opmsg_ep_configure_4>:
    {
        case OPMSG_OP_TERMINAL_DATA_FORMAT:
            /* value is data type */
            if( ((AUDIO_DATA_FORMAT)msg->value)!=AUDIO_DATA_FORMAT_FIXP )
84200aea:	78 24       	Null = r5 - 1;
84200aec:	e7 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200aee <Lc_aec_reference_opmsg_ep_configure_5>:
            {
                return(FALSE);
84200aee:	02 00       	r0 = Null + Null;
84200af0:	e6 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_56;

84200af2 <Lc_aec_reference_opmsg_ep_configure_6>:
               TODO - Really need to know type of endpoint: ADC/DAC, I2S, Digital MIC

               CBOPS_DC_REMOVE | CBOPS_SHIFT (set data format --> AUDIO_DATA_FORMAT_FIXP)
               CBOPS_RATEADJUST (EP_RATEMATCH_ENACTING) */

            if(terminal_id == (AEC_REF_MIC_TERMINAL1|TERMINAL_SINK_MASK) )
84200af2:	00 f2 10 f0 	Null = rMAC - 8388610;
84200af6:	02 24 
84200af8:	08 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_8;

84200afa <Lc_aec_reference_opmsg_ep_configure_7>:
            {
                op_extra_data->mic_shift = get_shift_from_cbops_parameters((CBOPS_PARAMETERS *)(uintptr_t)value);
84200afa:	3a 00       	r0 = r5 + Null;
84200afc:	ff fd 1f f0 	call (m) 0x49da;
84200b00:	3f e6 
84200b02:	62 f0 6d 8e 	M[r4 + 436] = r0;
84200b06:	da 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200b08 <Lc_aec_reference_opmsg_ep_configure_8>:
            }
            else if (terminal_id == AEC_REF_SPKR_TERMINAL1)
84200b08:	48 24       	Null = rMAC - 1;
84200b0a:	d8 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200b0c <Lc_aec_reference_opmsg_ep_configure_9>:
            {
                op_extra_data->spkr_shift = get_shift_from_cbops_parameters((CBOPS_PARAMETERS *)(uintptr_t)value);
84200b0c:	3a 00       	r0 = r5 + Null;
84200b0e:	ff fd 1f f0 	call (m) 0x49da;
84200b12:	2d e6 
84200b14:	62 f0 74 8e 	M[r4 + 464] = r0;
84200b18:	d1 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200b1a <Lc_aec_reference_opmsg_ep_configure_10>:
            /* uint32 expected block size per period

               endpoint->state.audio.block_size = (unsigned int)value;
               endpoint->state.audio.kick_period =  (unsigned int)(value * (unsigned long)STREAM_KICK_PERIOD_FROM_USECS(1000000UL) /
               endpoint->state.audio.sample_rate); */
            if(terminal_id == (AEC_REF_INPUT_TERMINAL1|TERMINAL_SINK_MASK) )
84200b1a:	00 f2 10 f0 	Null = rMAC - 8388608;
84200b1e:	00 24 
84200b20:	04 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_12;

84200b22 <Lc_aec_reference_opmsg_ep_configure_11>:
            {
                op_extra_data->spkr_kick_size = (unsigned)value;
84200b22:	67 f0 75 8e 	M[r4 + 468] = r5;
84200b26:	ca 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200b28 <Lc_aec_reference_opmsg_ep_configure_12>:
            }
            else if (terminal_id == AEC_REF_OUTPUT_TERMINAL1)
84200b28:	c8 24       	Null = rMAC - 3;
84200b2a:	c8 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200b2c <Lc_aec_reference_opmsg_ep_configure_13>:

                /* mic-ref block_size latency control only works for larger block sizes, it will fail
                 * if requested block size is small, so we apply a minimum block size, below
                 * that mic-ref latency control logic will be turned off.
                 */
                unsigned min_block_size = frac_mult(op_extra_data->output_rate, FRACTIONAL(0.006));
84200b2c:	62 f0 65 88 	r0 = M[r4 + 404];
84200b30:	0c f0 43 f2 	r1 = Null + 12884901;
84200b34:	a5 73 
84200b36:	00 f3 72 c9 	r0 = r0 * r1 (frac);

                /* Validate block size for sync logic.   Output buffers size will be at least 8.7 msec of data */
                if(block_size && (block_size < min_block_size) )
84200b3a:	39 00       	rMAC = r5 + Null;
84200b3c:	05 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_16;

84200b3e <Lc_aec_reference_opmsg_ep_configure_14>:
84200b3e:	b8 04       	Null = r5 - r0;
84200b40:	02 f0 87 e0 	if C jump (m) Lc_aec_reference_opmsg_ep_configure_16;

84200b44 <Lc_aec_reference_opmsg_ep_configure_15>:
                {
                    /* Disable sync logic if block_size is to small */
                    block_size = 0;
84200b44:	01 00       	rMAC = Null + Null;

84200b46 <Lc_aec_reference_opmsg_ep_configure_16>:
                }
                op_extra_data->sync_block.block_size = block_size;
84200b46:	61 f0 86 8e 	M[r4 + 536] = rMAC;
#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
                {
                    /* update minimum len metadata tags for mic output */
                    op_extra_data->mic_metadata_min_tag_len =
                        MAX(op_extra_data->mic_metadata_min_tag_len,
                            op_extra_data->sync_block.block_size);
84200b4a:	62 f0 cc 88 	r0 = M[r4 + 816];
84200b4e:	50 04       	Null = r0 - rMAC;
84200b50:	02 f0 eb e2 	if C jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200b54 <Lc_aec_reference_opmsg_ep_configure_17>:
84200b54:	61 f0 cc 8e 	M[r4 + 816] = rMAC;
84200b58:	b1 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200b5a <Lc_aec_reference_opmsg_ep_configure_18>:
            }
            break;
        case OPMSG_OP_TERMINAL_RATEMATCH_ENACTING:
            /* uint32 TRUE or FALSE.   Operator should perform rate matching if TRUE  */

            if(terminal_id == (AEC_REF_INPUT_TERMINAL1|TERMINAL_SINK_MASK) )
84200b5a:	00 f2 10 f0 	Null = rMAC - 8388608;
84200b5e:	00 24 
84200b60:	2a 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_27;

84200b62 <Lc_aec_reference_opmsg_ep_configure_19>:
            {
                set_override_ep_ratematch_enacting(op_extra_data->spkr_endpoint,value);
84200b62:	62 f0 80 88 	r0 = M[r4 + 512];
84200b66:	3b 00       	r1 = r5 + Null;
84200b68:	ff fd 1f f0 	call (m) 0x4a3e;
84200b6c:	37 e6 
                if(value==(uint32)FALSE)
84200b6e:	38 04       	Null = r5 - Null;
84200b70:	04 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_21;

84200b72 <Lc_aec_reference_opmsg_ep_configure_20>:
                {
                    op_extra_data->spkr_rate_enactment = RATEMATCHING_SUPPORT_NONE;
84200b72:	60 f0 71 8e 	M[r4 + 452] = Null;
84200b76:	05 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_22;

84200b78 <Lc_aec_reference_opmsg_ep_configure_21>:
                }
                else
                {
                    op_extra_data->spkr_rate_enactment = op_extra_data->spkr_rate_ability;
84200b78:	61 f0 6f 88 	rMAC = M[r4 + 444];
84200b7c:	61 f0 71 8e 	M[r4 + 452] = rMAC;

84200b80 <Lc_aec_reference_opmsg_ep_configure_22>:
                }

                if((op_extra_data->spkr_rate_enactment==RATEMATCHING_SUPPORT_HW) && (op_extra_data->spkr_rate_monitor_op))
84200b80:	61 f0 71 88 	rMAC = M[r4 + 452];
84200b84:	88 24       	Null = rMAC - 2;
84200b86:	0b 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_25;

84200b88 <Lc_aec_reference_opmsg_ep_configure_23>:
84200b88:	62 f0 73 88 	r0 = M[r4 + 460];
84200b8c:	08 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_25;

84200b8e <Lc_aec_reference_opmsg_ep_configure_24>:
                {
                    rate_monitor_op_initialise(op_extra_data->spkr_rate_monitor_op,op_extra_data->spkr_rate,TRUE,3*MS_PER_SEC);
84200b8e:	05 f0 b8 53 	r3 = Null + 3000;
84200b92:	44 20       	r2 = Null + 1;
84200b94:	63 f0 6e 88 	r1 = M[r4 + 440];
84200b98:	fa ff 24 e4 	call $_rate_monitor_op_initialise;

84200b9c <Lc_aec_reference_opmsg_ep_configure_25>:
                }

                if(op_extra_data->spkr_sw_rateadj_op)
84200b9c:	62 f0 7e 88 	r0 = M[r4 + 504];
84200ba0:	8d 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200ba2 <Lc_aec_reference_opmsg_ep_configure_26>:
                {
                    cbops_rateadjust_passthrough_mode(op_extra_data->spkr_sw_rateadj_op,(op_extra_data->spkr_rate_enactment==RATEMATCHING_SUPPORT_NONE)?TRUE:FALSE);
84200ba2:	03 00       	r1 = Null + Null;
84200ba4:	60 f0 71 88 	Null = M[r4 + 452];
84200ba8:	20 f0 43 ce 	if EQ r1 = Null + 1;
84200bac:	ff fd b0 f0 	call (m) 0x16c96;
84200bb0:	2b e7 
84200bb2:	84 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200bb4 <Lc_aec_reference_opmsg_ep_configure_27>:

                }
            }
            else if (terminal_id == AEC_REF_OUTPUT_TERMINAL1
                     && !op_extra_data->mic_sync_enable)
84200bb4:	c8 24       	Null = rMAC - 3;
84200bb6:	82 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200bb8 <Lc_aec_reference_opmsg_ep_configure_28>:
84200bb8:	60 f0 d4 88 	Null = M[r4 + 848];
84200bbc:	7f 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200bbe <Lc_aec_reference_opmsg_ep_configure_29>:
            {
                set_override_ep_ratematch_enacting(op_extra_data->mic_endpoint,value);
84200bbe:	62 f0 7f 88 	r0 = M[r4 + 508];
84200bc2:	3b 00       	r1 = r5 + Null;
84200bc4:	ff fd 1f f0 	call (m) 0x4a3e;
84200bc8:	3b e3 
                if(value==(uint32)FALSE)
84200bca:	38 04       	Null = r5 - Null;
84200bcc:	04 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_31;

84200bce <Lc_aec_reference_opmsg_ep_configure_30>:
                {
                    op_extra_data->mic_rate_enactment = RATEMATCHING_SUPPORT_NONE;
84200bce:	60 f0 68 8e 	M[r4 + 416] = Null;
84200bd2:	05 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_32;

84200bd4 <Lc_aec_reference_opmsg_ep_configure_31>:
                }
                else
                {
                    op_extra_data->mic_rate_enactment = op_extra_data->mic_rate_ability;
84200bd4:	61 f0 67 88 	rMAC = M[r4 + 412];
84200bd8:	61 f0 68 8e 	M[r4 + 416] = rMAC;

84200bdc <Lc_aec_reference_opmsg_ep_configure_32>:
                }

                if((op_extra_data->mic_rate_enactment==RATEMATCHING_SUPPORT_HW) && (op_extra_data->mic_rate_monitor_op))
84200bdc:	61 f0 68 88 	rMAC = M[r4 + 416];
84200be0:	88 24       	Null = rMAC - 2;
84200be2:	0b 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_35;

84200be4 <Lc_aec_reference_opmsg_ep_configure_33>:
84200be4:	62 f0 6b 88 	r0 = M[r4 + 428];
84200be8:	08 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_35;

84200bea <Lc_aec_reference_opmsg_ep_configure_34>:
                {
                    rate_monitor_op_initialise(op_extra_data->mic_rate_monitor_op,op_extra_data->mic_rate,TRUE,3*MS_PER_SEC);
84200bea:	05 f0 b8 53 	r3 = Null + 3000;
84200bee:	44 20       	r2 = Null + 1;
84200bf0:	63 f0 66 88 	r1 = M[r4 + 408];
84200bf4:	fa ff 28 e1 	call $_rate_monitor_op_initialise;

84200bf8 <Lc_aec_reference_opmsg_ep_configure_35>:
                }

                if(op_extra_data->mic_sw_rateadj_op)
84200bf8:	62 f0 7d 88 	r0 = M[r4 + 500];
84200bfc:	5f 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200bfe <Lc_aec_reference_opmsg_ep_configure_36>:
                {
                    cbops_rateadjust_passthrough_mode(op_extra_data->mic_sw_rateadj_op,(op_extra_data->mic_rate_enactment==RATEMATCHING_SUPPORT_NONE)?TRUE:FALSE);
84200bfe:	03 00       	r1 = Null + Null;
84200c00:	60 f0 68 88 	Null = M[r4 + 416];
84200c04:	20 f0 43 ce 	if EQ r1 = Null + 1;
84200c08:	ff fd b0 f0 	call (m) 0x16c96;
84200c0c:	2f e4 
84200c0e:	56 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c10 <Lc_aec_reference_opmsg_ep_configure_37>:
            break;
        case OPMSG_OP_TERMINAL_RATEMATCH_ADJUSTMENT:
        {
            int svalue = (int)value;
            /*  See BlueCore audio real endpoint function "adjust_audio_rate" for details */
            if(terminal_id == (AEC_REF_INPUT_TERMINAL1|TERMINAL_SINK_MASK) )
84200c10:	00 f2 10 f0 	Null = rMAC - 8388608;
84200c14:	00 24 
84200c16:	29 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_46;

84200c18 <Lc_aec_reference_opmsg_ep_configure_38>:
            {
#ifdef AEC_REFERENCE_SPKR_TTP
                if(op_extra_data->spkr_timed_playback_mode)
84200c18:	60 f0 b2 88 	Null = M[r4 + 712];
84200c1c:	4f 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c1e <Lc_aec_reference_opmsg_ep_configure_39>:
                     * rate adjustment is managed by speaker ttp */
                    break;
                }
#endif /* AEC_REFERENCE_SPKR_TTP */
                /* Send Rate Adjustment to hardware */
                if(op_extra_data->spkr_rate_enactment==RATEMATCHING_SUPPORT_HW)
84200c1e:	61 f0 71 88 	rMAC = M[r4 + 452];
84200c22:	88 24       	Null = rMAC - 2;
84200c24:	19 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_44;

84200c26 <Lc_aec_reference_opmsg_ep_configure_40>:
                {
                    if(op_extra_data->output_stream[AEC_REF_SPKR_TERMINAL1])
84200c26:	71 a8       	rMAC = M[r4 + 68];
84200c28:	49 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c2a <Lc_aec_reference_opmsg_ep_configure_41>:
                    {
                        if((op_extra_data->spkr_rate_monitor_op) && (rate_monitor_op_is_complete(op_extra_data->spkr_rate_monitor_op)))
84200c2a:	62 f0 73 88 	r0 = M[r4 + 460];
84200c2e:	46 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c30 <Lc_aec_reference_opmsg_ep_configure_42>:
84200c30:	ff fd 57 f3 	call 0x6bc28;
84200c34:	38 ef 
84200c36:	10 04       	Null = r0 - Null;
84200c38:	41 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c3a <Lc_aec_reference_opmsg_ep_configure_43>:
                        {
                            op_extra_data->spkr_rate_adjustment = svalue;
84200c3a:	3b 00       	r1 = r5 + Null;
84200c3c:	63 f0 70 8e 	M[r4 + 448] = r1;
                            value = op_extra_data->spkr_rate_adjustment;
                            set_override_ep_ratematch_adjustment(op_extra_data->spkr_endpoint,value);
84200c40:	62 f0 80 88 	r0 = M[r4 + 512];
84200c44:	ff fd 1f f0 	call (m) 0x4aa0;
84200c48:	3d e2 
                            rate_monitor_op_restart(op_extra_data->spkr_rate_monitor_op);
84200c4a:	62 f0 73 88 	r0 = M[r4 + 460];
84200c4e:	ff fd 57 f3 	call 0x6bc14;
84200c52:	26 ee 
84200c54:	33 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c56 <Lc_aec_reference_opmsg_ep_configure_44>:
                        }
                    }
                }
                else
                {
                    op_extra_data->spkr_rate_adjustment = svalue;
84200c56:	3b 00       	r1 = r5 + Null;
84200c58:	63 f0 70 8e 	M[r4 + 448] = r1;
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
                    if(0 != op_extra_data->spkr_ext_rate_adjust_op)
84200c5c:	62 f0 ae 88 	r0 = M[r4 + 696];
84200c60:	2d 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c62 <Lc_aec_reference_opmsg_ep_configure_45>:
                    {

                        /* set the target rate value, this will be ignored if speaker path is doing TTP. */
                        stream_delegate_rate_adjust_set_target_rate(op_extra_data->spkr_ext_rate_adjust_op,
                                                                    op_extra_data->spkr_rate_adjustment);
84200c62:	10 f0 37 e2 	call (m) $_stream_delegate_rate_adjust_set_target_rate;
84200c66:	2a 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c68 <Lc_aec_reference_opmsg_ep_configure_46>:
            }
            else if (terminal_id == AEC_REF_OUTPUT_TERMINAL1
                     /* if we are syncing mic to speaker input we shouldn't
                      * receive this message, but ignore it if we received.
                      */
                     && !op_extra_data->mic_sync_enable)
84200c68:	c8 24       	Null = rMAC - 3;
84200c6a:	28 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c6c <Lc_aec_reference_opmsg_ep_configure_47>:
84200c6c:	60 f0 d4 88 	Null = M[r4 + 848];
84200c70:	25 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c72 <Lc_aec_reference_opmsg_ep_configure_48>:
            {
                /* Send Rate Adjustment to hardware */
                if(op_extra_data->mic_rate_enactment == RATEMATCHING_SUPPORT_HW)
84200c72:	61 f0 68 88 	rMAC = M[r4 + 416];
84200c76:	88 24       	Null = rMAC - 2;
84200c78:	19 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_configure_53;

84200c7a <Lc_aec_reference_opmsg_ep_configure_49>:
                {
                    if(op_extra_data->input_stream[AEC_REF_MIC_TERMINAL1])
84200c7a:	b1 88       	rMAC = M[r4 + 8];
84200c7c:	1f 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c7e <Lc_aec_reference_opmsg_ep_configure_50>:
                    {
                        if((op_extra_data->mic_rate_monitor_op) && (rate_monitor_op_is_complete(op_extra_data->mic_rate_monitor_op)))
84200c7e:	62 f0 6b 88 	r0 = M[r4 + 428];
84200c82:	1c 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c84 <Lc_aec_reference_opmsg_ep_configure_51>:
84200c84:	ff fd 57 f3 	call 0x6bc28;
84200c88:	24 ed 
84200c8a:	10 04       	Null = r0 - Null;
84200c8c:	17 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200c8e <Lc_aec_reference_opmsg_ep_configure_52>:
                        {
                            op_extra_data->mic_rate_adjustment = svalue;
84200c8e:	3b 00       	r1 = r5 + Null;
84200c90:	63 f0 69 8e 	M[r4 + 420] = r1;
                            value = op_extra_data->mic_rate_adjustment;
                            set_override_ep_ratematch_adjustment(op_extra_data->mic_endpoint,value);
84200c94:	62 f0 7f 88 	r0 = M[r4 + 508];
84200c98:	ff fd 1f f0 	call (m) 0x4aa0;
84200c9c:	29 e0 
                            rate_monitor_op_restart(op_extra_data->mic_rate_monitor_op);
84200c9e:	62 f0 6b 88 	r0 = M[r4 + 428];
84200ca2:	ff fd 57 f3 	call 0x6bc14;
84200ca6:	32 eb 
84200ca8:	09 6e       	jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200caa <Lc_aec_reference_opmsg_ep_configure_53>:
                        }
                    }
                }
                else
                {
                    op_extra_data->mic_rate_adjustment = svalue;
84200caa:	3b 00       	r1 = r5 + Null;
84200cac:	63 f0 69 8e 	M[r4 + 420] = r1;
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
                    if(0 != op_extra_data->mic_ext_rate_adjust_op)
84200cb0:	62 f0 ad 88 	r0 = M[r4 + 692];
84200cb4:	03 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_configure_55;

84200cb6 <Lc_aec_reference_opmsg_ep_configure_54>:
                    {

                        /* set the target rate */
                        stream_delegate_rate_adjust_set_target_rate(op_extra_data->mic_ext_rate_adjust_op,
                                                                    op_extra_data->mic_rate_adjustment);
84200cb6:	10 f0 23 e0 	call (m) $_stream_delegate_rate_adjust_set_target_rate;

84200cba <Lc_aec_reference_opmsg_ep_configure_55>:
            /* break; */
        default:
            return(FALSE);
    }

    return(TRUE);
84200cba:	42 20       	r0 = Null + 1;

84200cbc <Lc_aec_reference_opmsg_ep_configure_56>:
}
84200cbc:	f2 48       	popm <FP, r4, r5, rLink>;
84200cbe:	d8 4c       	rts;

84200cc0 <$_aec_reference_opmsg_ep_clock_id>:

   TODO.  Remove OPMSG_COMMON_GET_CLOCK_ID from table and delete this function
*/

bool aec_reference_opmsg_ep_clock_id(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200cc0:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84200cc2:	16 00       	r4 = r0 + Null;
84200cc4:	23 09       	r9 = r2 + Null;
84200cc6:	2f 00       	r5 = r3 + Null;
    unsigned *resp;
    OP_MSG_REQ *msg = message_data;
    unsigned terminal_id = msg->header.cmd_header.client_id;
84200cc8:	3a f0 00 e8 	r8 = M[r1 + Null];
    INT_OP_ID int_id = op_data->id;
84200ccc:	69 f0 01 88 	r7 = M[r4 + 4];
     * If the Mic and Spkr share the same clock source then all real terminals
     * share the same rate.
     */

    /* Payload is a single word containing the clock ID */
    resp = xpmalloc(sizeof(unsigned));
84200cd0:	c3 20       	r1 = Null + 3;
84200cd2:	02 21       	r0 = Null + 4;
84200cd4:	ff fd 20 f0 	call (m) 0x4e2e;
84200cd8:	3b ea 
84200cda:	10 09       	r6 = r0 + Null;
    if (!resp)
84200cdc:	03 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_clock_id_3;

84200cde <Lc_aec_reference_opmsg_ep_clock_id_2>:
    {
        return FALSE;
84200cde:	02 00       	r0 = Null + Null;
84200ce0:	20 6e       	jump (m) Lc_aec_reference_opmsg_ep_clock_id_10;

84200ce2 <Lc_aec_reference_opmsg_ep_clock_id_3>:
    }
    *resp_data = (OP_OPMSG_RSP_PAYLOAD*)resp;
84200ce2:	78 f0 00 ee 	M[r5 + Null] = r6;
    *resp_length = 1;
84200ce6:	41 20       	rMAC = Null + 1;
84200ce8:	b1 f0 00 ee 	M[r9 + Null] = rMAC;
      clock ID will be reported as zero before this operation is called.

      If MIC and SPKR real endpoints are not connected then we report the same clock source.
    */

    if (terminal_id & TERMINAL_SINK_MASK)
84200cec:	40 f0 a1 f0 	rMAC = r8 AND 0x800000;
84200cf0:	00 00 
84200cf2:	14 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_clock_id_8;

84200cf4 <Lc_aec_reference_opmsg_ep_clock_id_4>:
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200cf4:	31 99       	rMAC = M[r4 + 48];
         * same clock source as the mic then report the same clock source of
         * the op id. If they differ then report op_id and 1 << 7 as the op id
         * is 7 bits long.
         */
        if (!op_extra_data->input_stream[AEC_REF_MIC_TERMINAL1] ||
            !op_extra_data->output_stream[AEC_REF_SPKR_TERMINAL1])
84200cf6:	8a 88       	r0 = M[rMAC + 8];
84200cf8:	11 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_clock_id_8;

84200cfa <Lc_aec_reference_opmsg_ep_clock_id_5>:
84200cfa:	4a a8       	r0 = M[rMAC + 68];
84200cfc:	0f 60       	if EQ jump (m) Lc_aec_reference_opmsg_ep_clock_id_8;

84200cfe <Lc_aec_reference_opmsg_ep_clock_id_6>:
        {
            *resp = int_id;
        }
        else if (override_endpoints_have_same_clock_source(op_extra_data->spkr_endpoint,
                                                           op_extra_data->mic_endpoint))
84200cfe:	13 f0 7f 88 	r1 = M[rMAC + 508];
84200d02:	12 f0 80 88 	r0 = M[rMAC + 512];
84200d06:	ff fd 1e f0 	call (m) 0x4a96;
84200d0a:	31 ec 
84200d0c:	10 04       	Null = r0 - Null;
84200d0e:	06 62       	if NE jump (m) Lc_aec_reference_opmsg_ep_clock_id_8;

84200d10 <Lc_aec_reference_opmsg_ep_clock_id_7>:
        {
            *resp = int_id;
        }
        else
        {
            *resp = int_id | (1 << 7);
84200d10:	40 f9 51 c8 	rMAC = r7 OR 0x80;
84200d14:	81 f0 00 ee 	M[r6 + Null] = rMAC;
84200d18:	03 6e       	jump (m) Lc_aec_reference_opmsg_ep_clock_id_9;

84200d1a <Lc_aec_reference_opmsg_ep_clock_id_8>:
    {
        /* The sources that this is relevant to is Outputs and Reference. These
         * all have the same clock source. Report default clock source as the
         * op id.
         */
        *resp = int_id;
84200d1a:	89 f0 00 ee 	M[r6 + Null] = r7;

84200d1e <Lc_aec_reference_opmsg_ep_clock_id_9>:
    }

    return TRUE;
84200d1e:	42 20       	r0 = Null + 1;

84200d20 <Lc_aec_reference_opmsg_ep_clock_id_10>:
}
84200d20:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200d22:	d8 4c       	rts;

84200d24 <$_aec_reference_set_rates>:

    return cpsGetUcidMsgHandler(&op_extra_data->parms_def,op_extra_data->cap_id,message_data,resp_length,resp_data);
}

bool aec_reference_set_rates(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200d24:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200d26:	17 00       	r5 = r0 + Null;
    AEC_REFERENCE_OP_DATA   *op_extra_data = (AEC_REFERENCE_OP_DATA*)op_data->extra_op_data;
84200d28:	3e 99       	r4 = M[r5 + 48];
    unsigned irate,orate;
    bool rebuild = FALSE;
84200d2a:	02 09       	r8 = Null + Null;

    patch_fn_shared(aec_reference);

    /* Rates needed for creating cbops and for "aec_reference_buffer_details" */
    irate  = OPMSG_FIELD_GET(message_data, OPMSG_AEC_SET_SAMPLE_RATES, INPUT_RATE);
84200d2c:	d9 88       	rMAC = M[r1 + 12];
84200d2e:	19 f7 ff 1f 	r7 = rMAC AND 0xffff;
    orate  = OPMSG_FIELD_GET(message_data, OPMSG_AEC_SET_SAMPLE_RATES, OUTPUT_RATE);
84200d32:	19 89       	rMAC = M[r1 + 16];
84200d34:	18 f7 ff 1f 	r6 = rMAC AND 0xffff;

    L2_DBG_MSG2("AEC REFERENCE: set rates = %d %d", irate, orate);
84200d38:	55 f1 02 f0 	r0 = Null + 357564799;
84200d3c:	7f 41 
84200d3e:	44 08       	r2 = r6 + Null;
84200d40:	4b 08       	r1 = r7 + Null;
84200d42:	ef fd fe ff 	call (m) 0x9c8;
84200d46:	27 e4 

    if(op_extra_data->input_rate!=irate)
84200d48:	61 f0 64 88 	rMAC = M[r4 + 400];
84200d4c:	9f f1 00 c2 	Null = rMAC - r7;
84200d50:	0c 60       	if EQ jump (m) Lc_aec_reference_set_rates_4;

84200d52 <Lc_aec_reference_set_rates_2>:
    {
        op_extra_data->input_rate = irate;
84200d52:	69 f0 64 8e 	M[r4 + 400] = r7;
        if(op_data->state == OP_RUNNING)
84200d56:	39 b0       	rMAC = MBS[r5 + 24];
84200d58:	08 62       	if NE jump (m) Lc_aec_reference_set_rates_4;

84200d5a <Lc_aec_reference_set_rates_3>:
        {
            /* if the operator is running, any change in input
             * rate should trigger a rebuild of speaker graph
             */
            SetSpkrChannelStatus(op_extra_data, 0);
84200d5a:	61 f0 76 88 	rMAC = M[r4 + 472];
84200d5e:	11 fe 0f 00 	rMAC = rMAC AND 0xffffc00f;
84200d62:	61 f0 76 8e 	M[r4 + 472] = rMAC;
            rebuild = TRUE;
84200d66:	0a 71       	r8 = Null + 1;

84200d68 <Lc_aec_reference_set_rates_4>:
        }
    }

#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
    /* configure sample rate for MIC ttp */
    ttp_configure_rate(op_extra_data->mic_time_to_play, orate);
84200d68:	62 f0 cf 88 	r0 = M[r4 + 828];
84200d6c:	43 08       	r1 = r6 + Null;
84200d6e:	ff fd ad f0 	call (m) 0x1684c;
84200d72:	3f e6 
#endif

    if(op_extra_data->output_rate!=orate)
84200d74:	61 f0 65 88 	rMAC = M[r4 + 404];
84200d78:	8f f1 00 c2 	Null = rMAC - r6;
84200d7c:	15 60       	if EQ jump (m) Lc_aec_reference_set_rates_8;

84200d7e <Lc_aec_reference_set_rates_5>:
    {
        op_extra_data->output_rate = orate;
84200d7e:	68 f0 65 8e 	M[r4 + 404] = r6;
        if(op_data->state == OP_RUNNING)
84200d82:	39 b0       	rMAC = MBS[r5 + 24];
84200d84:	11 62       	if NE jump (m) Lc_aec_reference_set_rates_8;

84200d86 <Lc_aec_reference_set_rates_6>:
        {
            /* if the operator is running, any change in output
             * rate should trigger a rebuild of microphone graph
             */
            SetMicChannelStatus(op_extra_data, 0);
84200d86:	61 f0 76 88 	rMAC = M[r4 + 472];
84200d8a:	f8 ff 11 f7 	rMAC = rMAC AND 0xfff0fff0;
84200d8e:	f0 1f 
84200d90:	61 f0 76 8e 	M[r4 + 472] = rMAC;

84200d94 <Lc_aec_reference_set_rates_7>:
        /* At least one of input or output rate has changed while the operator
         * is running. This will require fresh rebuild of the affected cbops graphs.
         * No need to do this when operator isn't running since this will be done
         * at start point.
         */
        if(!validate_channels_and_build(op_data))
84200d94:	3a 00       	r0 = r5 + Null;
84200d96:	06 f0 29 e7 	call (m) $_validate_channels_and_build;
        {
            /* Not the best way to indicate failure, but best we can do */
            return FALSE;
84200d9a:	11 00       	rMAC = r0 + Null;
84200d9c:	02 00       	r0 = Null + Null;
84200d9e:	08 04       	Null = rMAC - Null;
84200da0:	21 f0 42 ce 	if NE r0 = Null + 1;
84200da4:	05 6e       	jump (m) Lc_aec_reference_set_rates_10;

84200da6 <Lc_aec_reference_set_rates_8>:
            SetMicChannelStatus(op_extra_data, 0);
            rebuild = TRUE;
        }
    }

    if(rebuild)
84200da6:	0f fa 00 c2 	Null = r8 - Null;
84200daa:	f5 63       	if NE jump (m) Lc_aec_reference_set_rates_7;

84200dac <Lc_aec_reference_set_rates_9>:
            /* Not the best way to indicate failure, but best we can do */
            return FALSE;
        }
    }

    return TRUE;
84200dac:	42 20       	r0 = Null + 1;

84200dae <Lc_aec_reference_set_rates_10>:
}
84200dae:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200db0:	d8 4c       	rts;

84200db2 <$_aec_reference_opmsg_get_ps_id>:

    return TRUE;
}

bool aec_reference_opmsg_get_ps_id(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200db2:	c8 1c       	pushm <FP(=SP), rLink>;
84200db4:	19 00       	rMAC = r1 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200db6:	12 99       	r0 = M[r0 + 48];
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);

    patch_fn_shared(aec_reference);

    return cpsGetUcidMsgHandler(&op_extra_data->parms_def,op_extra_data->cap_id,message_data,resp_length,resp_data);
84200db8:	29 1c       	pushm <r3>;
84200dba:	23 f0 59 88 	r1 = M[r0 + 356];
84200dbe:	25 00       	r3 = r2 + Null;
84200dc0:	02 f0 78 45 	r0 = r0 + 376;
84200dc4:	0c 00       	r2 = rMAC + Null;
84200dc6:	ef fd fc ff 	call (m) 0x6d2;
84200dca:	2d e8 
84200dcc:	7f 4c       	SP = SP + -4;

84200dce <Lc_aec_reference_opmsg_get_ps_id_2>:
}
84200dce:	c8 48       	popm <FP, rLink>;
84200dd0:	d8 4c       	rts;

84200dd2 <$_aec_reference_opmsg_mute_mic_output>:

    return TRUE;
}

bool aec_reference_opmsg_mute_mic_output(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200dd2:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200dd4:	16 99       	r4 = M[r0 + 48];
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    unsigned mute_enable;

    patch_fn_shared(aec_reference);

    if(NULL == op_extra_data->mic_mute_op)
84200dd6:	61 f0 9d 88 	rMAC = M[r4 + 628];
84200dda:	03 62       	if NE jump (m) Lc_aec_reference_opmsg_mute_mic_output_3;

84200ddc <Lc_aec_reference_opmsg_mute_mic_output_2>:
    {
        /* No mute operator found */
        return FALSE;
84200ddc:	02 00       	r0 = Null + Null;
84200dde:	14 6e       	jump (m) Lc_aec_reference_opmsg_mute_mic_output_4;

84200de0 <Lc_aec_reference_opmsg_mute_mic_output_3>:
    }

    /* read the enable field */
    mute_enable  = OPMSG_FIELD_GET(message_data, OPMSG_AEC_MUTE_MIC_OUTPUT, ENABLE);
84200de0:	d9 88       	rMAC = M[r1 + 12];
84200de2:	8f c6       	r5 = rMAC AND 0xffff;
    L2_DBG_MSG1("ACE REFERENCE muting mic, mute=%d", mute_enable);
84200de4:	55 f1 02 f0 	r0 = Null + 357564765;
84200de8:	5d 41 
84200dea:	3b 00       	r1 = r5 + Null;
84200dec:	ef fd fd ff 	call (m) 0x9b4;
84200df0:	29 ee 

    /* configure mute operator */
    cbops_mute_enable(op_extra_data->mic_mute_op, mute_enable != 0);
84200df2:	03 00       	r1 = Null + Null;
84200df4:	38 04       	Null = r5 - Null;
84200df6:	21 f0 43 ce 	if NE r1 = Null + 1;
84200dfa:	62 f0 9d 88 	r0 = M[r4 + 628];
84200dfe:	ff ff 17 f0 	call (m) 0x4003c0c;
84200e02:	2f e0 

    return TRUE;
84200e04:	42 20       	r0 = Null + 1;

84200e06 <Lc_aec_reference_opmsg_mute_mic_output_4>:
}
84200e06:	f2 48       	popm <FP, r4, r5, rLink>;
84200e08:	d8 4c       	rts;

84200e0a <$_aec_reference_opmsg_set_task_period>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
bool aec_reference_opmsg_set_task_period(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200e0a:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84200e0c:	1e 00       	r4 = r1 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200e0e:	17 99       	r5 = M[r0 + 48];
bool aec_reference_opmsg_set_task_period(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);

    /* We cant change this setting while running */
    if (opmgr_op_is_running(op_data))
84200e10:	0f f0 2f e2 	call (m) $_opmgr_op_is_running;
84200e14:	10 04       	Null = r0 - Null;
84200e16:	03 60       	if EQ jump (m) Lc_aec_reference_opmsg_set_task_period_3;

84200e18 <Lc_aec_reference_opmsg_set_task_period_2>:
    {
        return FALSE;
84200e18:	02 00       	r0 = Null + Null;
84200e1a:	07 6e       	jump (m) Lc_aec_reference_opmsg_set_task_period_4;

84200e1c <Lc_aec_reference_opmsg_set_task_period_3>:
    }

    /* get the task period */
    unsigned task_period = OPMSG_FIELD_GET(message_data, OPMSG_AEC_SET_TASK_PERIOD, TASK_PERIOD);
84200e1c:	f1 88       	rMAC = M[r4 + 12];
84200e1e:	8b c6       	r1 = rMAC AND 0xffff;

    /* get decimation factor */
    unsigned decim_factor = OPMSG_FIELD_GET(message_data, OPMSG_AEC_SET_TASK_PERIOD, DECIM_FACTOR);
84200e20:	31 89       	rMAC = M[r4 + 16];
84200e22:	8c c6       	r2 = rMAC AND 0xffff;

    return aec_reference_set_task_period(op_extra_data, task_period, decim_factor);
84200e24:	3a 00       	r0 = r5 + Null;
84200e26:	03 4e       	call (m) $_aec_reference_set_task_period;

84200e28 <Lc_aec_reference_opmsg_set_task_period_4>:
}
84200e28:	f2 48       	popm <FP, r4, r5, rLink>;
84200e2a:	d8 4c       	rts;

84200e2c <$_aec_reference_set_task_period>:
 * \param decim_factor decimation factor for sidetone mixing task
 *
 * \return whether the task period update successfully
 */
bool aec_reference_set_task_period(AEC_REFERENCE_OP_DATA *op_extra_data, unsigned task_period, unsigned decim_factor)
{
84200e2c:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200e2e:	17 00       	r5 = r0 + Null;
84200e30:	1e 00       	r4 = r1 + Null;
84200e32:	20 09       	r6 = r2 + Null;
    /* check the limits */
    if(task_period > AEC_REFERENCE_MAX_TASK_PERIOD ||
       task_period < AEC_REFERENCE_MIN_TASK_PERIOD)
84200e34:	60 f1 88 27 	Null = r4 - 5000;
84200e38:	08 f0 8d e0 	if HI jump (m) Lc_aec_reference_set_task_period_3;

84200e3c <Lc_aec_reference_set_task_period_2>:
84200e3c:	60 f0 e8 27 	Null = r4 - 1000;
84200e40:	02 f0 89 e0 	if C jump (m) Lc_aec_reference_set_task_period_4;

84200e44 <Lc_aec_reference_set_task_period_3>:
    {
        return FALSE;
84200e44:	02 00       	r0 = Null + Null;
84200e46:	5d 6e       	jump (m) Lc_aec_reference_set_task_period_12;

84200e48 <Lc_aec_reference_set_task_period_4>:
    }

    /* see if task period is an integer factor of a second */
    if(0 != (SECOND % task_period))
84200e48:	00 f0 a2 f7 	r0 = Null + 1000000;
84200e4c:	40 42 
84200e4e:	ff fd b1 f0 	call (m) 0x171d6;
84200e52:	29 ec 
84200e54:	10 04       	Null = r0 - Null;
84200e56:	f7 63       	if NE jump (m) Lc_aec_reference_set_task_period_3;

84200e58 <Lc_aec_reference_set_task_period_5>:
    }

    /* Also we don't expect AEC_REFERENCE task period becoms
     * larger than system kick period
     */
    if(task_period > (unsigned)stream_if_get_system_kick_period())
84200e58:	ff fd 2f f0 	call (m) 0x6dc0;
84200e5c:	29 eb 
84200e5e:	b0 04       	Null = r4 - r0;
84200e60:	f8 ff e5 ef 	if HI jump (m) Lc_aec_reference_set_task_period_3;

84200e64 <Lc_aec_reference_set_task_period_6>:

#ifdef AEC_REFERENCE_CAN_PERFORM_INPLACE_SIDETONE_MIXING
    /* if a decimation factor supplied it should be a factor of
     * task period
     */
    if(decim_factor > 1)
84200e64:	80 f0 01 24 	Null = r6 - 1;
84200e68:	09 f0 95 e0 	if LS jump (m) Lc_aec_reference_set_task_period_8;

84200e6c <Lc_aec_reference_set_task_period_7>:
    {
        if((task_period % decim_factor) != 0)
84200e6c:	32 00       	r0 = r4 + Null;
84200e6e:	43 08       	r1 = r6 + Null;
84200e70:	ff fd b1 f0 	call (m) 0x171d6;
84200e74:	27 eb 
84200e76:	10 04       	Null = r0 - Null;
84200e78:	e6 63       	if NE jump (m) Lc_aec_reference_set_task_period_3;

84200e7a <Lc_20>:
84200e7a:	02 6e       	jump (m) Lc_aec_reference_set_task_period_9;

84200e7c <Lc_aec_reference_set_task_period_8>:
            return FALSE;
        }
    }
    else
    {
        decim_factor = 1;
84200e7c:	08 71       	r6 = Null + 1;

84200e7e <Lc_aec_reference_set_task_period_9>:
    }
    op_extra_data->task_decim_factor = decim_factor;
84200e7e:	78 f0 97 8e 	M[r5 + 604] = r6;
    op_extra_data->task_decim_counter = 0;
84200e82:	70 f0 98 8e 	M[r5 + 608] = Null;
    op_extra_data->kick_period = task_period / decim_factor;
84200e86:	32 00       	r0 = r4 + Null;
84200e88:	43 08       	r1 = r6 + Null;
84200e8a:	ff fd b1 f0 	call (m) 0x171b8;
84200e8e:	2f e9 
84200e90:	72 f0 94 8e 	M[r5 + 592] = r0;
    op_extra_data->kick_period_frac = frac_div(op_extra_data->kick_period, SECOND);
84200e94:	00 f0 a1 f7 	rMAC = Null + 1000000;
84200e98:	40 42 
84200e9a:	7f f2 1f d9 	rMACB = r0 ASHIFT -1 (56bit);
84200e9e:	00 f1 9f cd 	Div = rMACB / rMAC;
84200ea2:	c2 4c       	r0 = DivResult;
84200ea4:	72 f0 96 8e 	M[r5 + 600] = r0;
    op_extra_data->kick_period = task_period;
    decim_factor = 1;
#endif /* AEC_REFERENCE_CAN_PERFORM_INPLACE_SIDETONE_MIXING */

    /* All are fine, set the task period*/
    op_extra_data->task_period = task_period;
84200ea8:	76 f0 63 8e 	M[r5 + 396] = r4;
    op_extra_data->task_frequency = (unsigned)SECOND/task_period;
84200eac:	33 00       	r1 = r4 + Null;
84200eae:	0a 00       	r0 = rMAC + Null;
84200eb0:	ff fd b1 f0 	call (m) 0x171b8;
84200eb4:	29 e8 
84200eb6:	72 f0 92 8e 	M[r5 + 584] = r0;
    op_extra_data->task_period_frac = frac_div(task_period, SECOND);
84200eba:	00 f0 a1 f7 	rMAC = Null + 1000000;
84200ebe:	40 42 
84200ec0:	7f f6 1f d9 	rMACB = r4 ASHIFT -1 (56bit);
84200ec4:	00 f1 9f cd 	Div = rMACB / rMAC;
84200ec8:	c2 4c       	r0 = DivResult;
84200eca:	72 f0 93 8e 	M[r5 + 588] = r0;
     * stage does an upsample by a factor of 2.1.
     * 48000.0 (fs in : 21/10) --> 100800.0 (fs internal : 7/16) --> 44100.0 (fs out)
     *
     * (2*task period) @100800
     */
    op_extra_data->resampler_temp_buffer_size = frac_mult(100800, 2*op_extra_data->task_period_frac) + 4;
84200ece:	c3 f0 c0 51 	r1 = Null + 100800;
84200ed2:	12 54       	r0 = r0 LSHIFT 1;
84200ed4:	2f f3 42 c9 	r0 = r1 * r0 (frac);
84200ed8:	11 21       	rMAC = r0 + 4;
84200eda:	71 f0 91 8e 	M[r5 + 580] = rMAC;
    op_extra_data->resampler_temp_buffer_size = MAX(op_extra_data->resampler_temp_buffer_size,
                                                        AEC_REF_RESAMPLER_TEMP_MIN_BUF_SIZE);
84200ede:	10 f0 cc 24 	Null = rMAC - 204;
84200ee2:	02 f0 8d e0 	if C jump (m) Lc_aec_reference_set_task_period_11;

84200ee6 <Lc_aec_reference_set_task_period_10>:
84200ee6:	01 f0 cc 40 	rMAC = Null + 204;
84200eea:	71 f0 91 8e 	M[r5 + 580] = rMAC;

84200eee <Lc_aec_reference_set_task_period_11>:

    L2_DBG_MSG2("AEC REFERENCE: task period set @%dus, decimation factor=%d", task_period, decim_factor);
84200eee:	55 f1 02 f0 	r0 = Null + 357564589;
84200ef2:	ad 40 
84200ef4:	44 08       	r2 = r6 + Null;
84200ef6:	33 00       	r1 = r4 + Null;
84200ef8:	ef fd fd ff 	call (m) 0x9c8;
84200efc:	31 e6 

    return TRUE;
84200efe:	42 20       	r0 = Null + 1;

84200f00 <Lc_aec_reference_set_task_period_12>:
}
84200f00:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200f02:	d8 4c       	rts;

84200f04 <$_aec_reference_opmsg_enable_mic_sync>:
 *             backend input and output are from same clock
 * Note: the msaage shall not be sent when any MIC/OUTPUT/REF
 *       terminal is connected.
 */
bool aec_reference_opmsg_enable_mic_sync(OPERATOR_DATA *op_data, void *message_data, unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200f04:	c8 1c       	pushm <FP(=SP), rLink>;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200f06:	11 99       	rMAC = M[r0 + 48];
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    patch_fn_shared(aec_reference);

    if((NULL != op_extra_data->input_stream[AEC_REF_MIC_TERMINAL1]) ||
       (NULL != op_extra_data->output_stream[AEC_REF_REFERENCE_TERMINAL]) ||
       (NULL != op_extra_data->input_stream[AEC_REF_OUTPUT_TERMINAL1]))
84200f08:	8a 88       	r0 = M[rMAC + 8];
84200f0a:	05 62       	if NE jump (m) Lc_aec_reference_opmsg_enable_mic_sync_4;

84200f0c <Lc_aec_reference_opmsg_enable_mic_sync_2>:
84200f0c:	0a a8       	r0 = M[rMAC + 64];
84200f0e:	03 62       	if NE jump (m) Lc_aec_reference_opmsg_enable_mic_sync_4;

84200f10 <Lc_aec_reference_opmsg_enable_mic_sync_3>:
84200f10:	ca 88       	r0 = M[rMAC + 12];
84200f12:	03 60       	if EQ jump (m) Lc_aec_reference_opmsg_enable_mic_sync_5;

84200f14 <Lc_aec_reference_opmsg_enable_mic_sync_4>:
    {
        /* This message can be handled only if MIC and REF are disconnected */
        return FALSE;
84200f14:	02 00       	r0 = Null + Null;
84200f16:	0f 6e       	jump (m) Lc_aec_reference_opmsg_enable_mic_sync_6;

84200f18 <Lc_aec_reference_opmsg_enable_mic_sync_5>:
    }

    /* read the enable field */
    op_extra_data->mic_sync_enable = (OPMSG_FIELD_GET(message_data, OPMSG_AEC_SAME_INPUT_OUTPUT_CLOCK_SOURCE, SAME_CLK_SRC)) != 0;
84200f18:	da 88       	r0 = M[r1 + 12];
84200f1a:	03 00       	r1 = Null + Null;
84200f1c:	92 c6       	r0 = r0 AND 0xffff;
84200f1e:	21 f0 43 ce 	if NE r1 = Null + 1;
84200f22:	13 f0 d4 8e 	M[rMAC + 848] = r1;
    L2_DBG_MSG1("ACE REFERENCE input-output use same clock: ", op_extra_data->mic_sync_enable);
84200f26:	55 f1 02 f0 	r0 = Null + 357564545;
84200f2a:	81 40 
84200f2c:	ef fd fd ff 	call (m) 0x9b4;
84200f30:	29 e4 

    return TRUE;
84200f32:	42 20       	r0 = Null + 1;

84200f34 <Lc_aec_reference_opmsg_enable_mic_sync_6>:
}
84200f34:	c8 48       	popm <FP, rLink>;
84200f36:	d8 4c       	rts;

84200f38 <$_aec_reference_opmsg_set_buffer_size>:
 * \return Whether the response_data field has been populated with a valid
 * response
 */
bool aec_reference_opmsg_set_buffer_size(OPERATOR_DATA *op_data, void *message_data,
                                         unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200f38:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84200f3a:	28 f0 0c 88 	r6 = M[r0 + 48];
                                         unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{

    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    /* get the required buffer size */
    unsigned buffer_size = OPMSG_FIELD_GET(message_data, OPMSG_COMMON_SET_TERMINAL_BUFFER_SIZE, BUFFER_SIZE);
84200f3e:	d9 88       	rMAC = M[r1 + 12];
84200f40:	8e c6       	r4 = rMAC AND 0xffff;
    /* get the sink terminals that need configuration */
    unsigned sinks = OPMSG_FIELD_GET(message_data, OPMSG_COMMON_SET_TERMINAL_BUFFER_SIZE,
                                     SINKS);
84200f42:	19 89       	rMAC = M[r1 + 16];
    /* get the source terminals that need configuration */
    unsigned sources = OPMSG_FIELD_GET(message_data, OPMSG_COMMON_SET_TERMINAL_BUFFER_SIZE,
                                       SOURCES);
84200f44:	0f c0       	r5 = rMAC AND 0x1;
84200f46:	59 89       	rMAC = M[r1 + 20];

    /* Output buffer size is allowd to change if none of outputs are connected,
     * Note: We allow buffer size change while the operator is running, only the
     * relevant path must be not running.
     */
    if(sources != 0)
84200f48:	49 c1       	rMAC = rMAC AND 0x8;
84200f4a:	16 60       	if EQ jump (m) Lc_aec_reference_opmsg_set_buffer_size_10;

84200f4c <Lc_aec_reference_opmsg_set_buffer_size_2>:
    {
        unsigned idx;

        /* No output must be connected */
        for(idx = 0; idx<MAX_NUMBER_MICS; idx++)
84200f4c:	02 00       	r0 = Null + Null;
84200f4e:	04 6e       	jump (m) Lc_aec_reference_opmsg_set_buffer_size_4;

84200f50 <Lc_aec_reference_opmsg_set_buffer_size_3>:
    }
}

inline static unsigned OutputTerminalByIndex(unsigned i)
{
    if(i<4)
84200f50:	10 25       	Null = r0 - 4;
84200f52:	02 f0 89 e0 	if C jump (m) Lc_aec_reference_opmsg_set_buffer_size_5;

84200f56 <Lc_aec_reference_opmsg_set_buffer_size_4>:
    {
        return (i + AEC_REF_OUTPUT_TERMINAL1);
84200f56:	d3 20       	r1 = r0 + 3;
84200f58:	02 6e       	jump (m) Lc_aec_reference_opmsg_set_buffer_size_6;

84200f5a <Lc_aec_reference_opmsg_set_buffer_size_5>:
    }
    else
    {
        return ((i-4) + AEC_REF_OUTPUT_TERMINAL5);
84200f5a:	53 22       	r1 = r0 + 9;

84200f5c <Lc_aec_reference_opmsg_set_buffer_size_6>:
        {
            if(NULL != op_extra_data->output_stream[OutputTerminalByIndex(idx)])
84200f5c:	84 f0 40 20 	r2 = r6 + 64;
84200f60:	5b 54       	r1 = r1 LSHIFT 2;
84200f62:	e3 e8       	r1 = M[r2 + r1];
84200f64:	03 60       	if EQ jump (m) Lc_aec_reference_opmsg_set_buffer_size_8;

84200f66 <Lc_aec_reference_opmsg_set_buffer_size_7>:
            {
                return FALSE;
84200f66:	02 00       	r0 = Null + Null;
84200f68:	2f 6e       	jump (m) Lc_aec_reference_opmsg_set_buffer_size_22;

84200f6a <Lc_aec_reference_opmsg_set_buffer_size_8>:
    if(sources != 0)
    {
        unsigned idx;

        /* No output must be connected */
        for(idx = 0; idx<MAX_NUMBER_MICS; idx++)
84200f6a:	52 20       	r0 = r0 + 1;
84200f6c:	10 26       	Null = r0 - 8;
84200f6e:	f1 65       	if NC jump (m) Lc_aec_reference_opmsg_set_buffer_size_3;

84200f70 <Lc_aec_reference_opmsg_set_buffer_size_9>:
            {
                return FALSE;
            }
        }
        /* Also REFERENCE must also be disconnected */
        if(NULL != op_extra_data->output_stream[AEC_REF_REFERENCE_TERMINAL])
84200f70:	82 f0 10 88 	r0 = M[r6 + 64];
84200f74:	f9 63       	if NE jump (m) Lc_aec_reference_opmsg_set_buffer_size_7;

84200f76 <Lc_aec_reference_opmsg_set_buffer_size_10>:

    /* Input buffer size is allowd to change if none of inputs are connected,
     * Note: We allow buffer size change while the operator is running, only the
     * relevant path must be not running.
     */
    if(sinks != 0)
84200f76:	38 04       	Null = r5 - Null;
84200f78:	10 60       	if EQ jump (m) Lc_aec_reference_opmsg_set_buffer_size_17;

84200f7a <Lc_aec_reference_opmsg_set_buffer_size_11>:
    {
        unsigned idx;

        /* No input must be connected */
        for(idx = 0; idx < MAX_NUMBER_SPEAKERS; idx++)
84200f7a:	02 00       	r0 = Null + Null;
84200f7c:	04 6e       	jump (m) Lc_aec_reference_opmsg_set_buffer_size_13;

84200f7e <Lc_aec_reference_opmsg_set_buffer_size_12>:
        {
            if(NULL != op_extra_data->input_stream[SpeakerInputTerminalByIndex(idx)])
84200f7e:	90 24       	Null = r0 - 2;
84200f80:	02 f0 89 e0 	if C jump (m) Lc_aec_reference_opmsg_set_buffer_size_14;

84200f84 <Lc_aec_reference_opmsg_set_buffer_size_13>:
84200f84:	13 00       	r1 = r0 + Null;
84200f86:	02 6e       	jump (m) Lc_aec_reference_opmsg_set_buffer_size_15;

84200f88 <Lc_aec_reference_opmsg_set_buffer_size_14>:
84200f88:	13 21       	r1 = r0 + 4;

84200f8a <Lc_aec_reference_opmsg_set_buffer_size_15>:
84200f8a:	5b 54       	r1 = r1 LSHIFT 2;
84200f8c:	83 f0 03 e8 	r1 = M[r6 + r1];
84200f90:	eb 63       	if NE jump (m) Lc_aec_reference_opmsg_set_buffer_size_7;

84200f92 <Lc_aec_reference_opmsg_set_buffer_size_16>:
    if(sinks != 0)
    {
        unsigned idx;

        /* No input must be connected */
        for(idx = 0; idx < MAX_NUMBER_SPEAKERS; idx++)
84200f92:	52 20       	r0 = r0 + 1;
84200f94:	10 26       	Null = r0 - 8;
84200f96:	f4 65       	if NC jump (m) Lc_aec_reference_opmsg_set_buffer_size_12;

84200f98 <Lc_aec_reference_opmsg_set_buffer_size_17>:
                return FALSE;
            }
        }
    }

    if(sources != 0)
84200f98:	08 04       	Null = rMAC - Null;
84200f9a:	0a 60       	if EQ jump (m) Lc_aec_reference_opmsg_set_buffer_size_19;

84200f9c <Lc_aec_reference_opmsg_set_buffer_size_18>:
    {
        /* set the output buffer size */
        op_extra_data->output_buffer_size = buffer_size;
84200f9c:	86 f0 d5 8e 	M[r6 + 852] = r4;
        L2_DBG_MSG1("AEC_REFERENCE: minimum output buffer size set to %d words ", buffer_size);
84200fa0:	55 f1 02 f0 	r0 = Null + 357564648;
84200fa4:	e8 40 
84200fa6:	33 00       	r1 = r4 + Null;
84200fa8:	ef fd fd ff 	call (m) 0x9b4;
84200fac:	2d e0 

84200fae <Lc_aec_reference_opmsg_set_buffer_size_19>:
    }

    if(sinks != 0)
84200fae:	38 04       	Null = r5 - Null;
84200fb0:	0a 60       	if EQ jump (m) Lc_aec_reference_opmsg_set_buffer_size_21;

84200fb2 <Lc_aec_reference_opmsg_set_buffer_size_20>:
    {
        op_extra_data->input_buffer_size = buffer_size;
84200fb2:	86 f0 d6 8e 	M[r6 + 856] = r4;
        L2_DBG_MSG1("AEC_REFERENCE: minimum input buffer size set to %d words ", buffer_size);
84200fb6:	55 f1 02 f0 	r0 = Null + 357564707;
84200fba:	23 41 
84200fbc:	33 00       	r1 = r4 + Null;
84200fbe:	ef fd fc ff 	call (m) 0x9b4;
84200fc2:	37 ef 

84200fc4 <Lc_aec_reference_opmsg_set_buffer_size_21>:
    }

    return TRUE;
84200fc4:	42 20       	r0 = Null + 1;

84200fc6 <Lc_aec_reference_opmsg_set_buffer_size_22>:
}
84200fc6:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200fc8:	d8 4c       	rts;

84200fca <$_aec_reference_update_sidetone_status>:
    if((op_extra_data->params.OFFSET_CONFIG & AEC_REFERENCE_CONFIG_SIDETONE_DISABLE) == 0)
    {
        /* a sidetone path will be formed whenever
         * we have both speaker and mic paths
         */
        op_extra_data->using_sidetone = SIDETONE_ENABLE_FLAG;
84200fca:	21 f0 33 88 	rMAC = M[r0 + 204];
84200fce:	03 00       	r1 = Null + Null;
84200fd0:	49 c1       	rMAC = rMAC AND 0x8;
84200fd2:	a0 f0 43 ce 	if EQ r1 = Null + 2;
84200fd6:	23 f0 7a 8e 	M[r0 + 488] = r1;
        /* User doesn't want sidetone at all */
        op_extra_data->using_sidetone = 0;
    }

    /* see if we need sidetone */
    if((op_extra_data->num_mic_channels > 0) && (op_extra_data->num_spkr_channels > 0))
84200fda:	20 f0 78 88 	Null = M[r0 + 480];
84200fde:	0a 60       	if EQ jump (m) Lc_aec_reference_update_sidetone_status_4;

84200fe0 <Lc_aec_reference_update_sidetone_status_2>:
84200fe0:	20 f0 77 88 	Null = M[r0 + 476];
84200fe4:	07 60       	if EQ jump (m) Lc_aec_reference_update_sidetone_status_4;

84200fe6 <Lc_aec_reference_update_sidetone_status_3>:
    {
        op_extra_data->using_sidetone |= SIDETONE_MIC_SPKR_FLAG;
84200fe6:	21 f0 7a 88 	rMAC = M[r0 + 488];
84200fea:	09 c8       	rMAC = rMAC OR 0x1;
84200fec:	21 f0 7a 8e 	M[r0 + 488] = rMAC;
84200ff0:	06 6e       	jump (m) Lc_aec_reference_update_sidetone_status_5;

84200ff2 <Lc_aec_reference_update_sidetone_status_4>:
    }
    else
    {
        op_extra_data->using_sidetone &= SIDETONE_ENABLE_FLAG;
84200ff2:	21 f0 7a 88 	rMAC = M[r0 + 488];
84200ff6:	49 c0       	rMAC = rMAC AND 0x2;
84200ff8:	21 f0 7a 8e 	M[r0 + 488] = rMAC;

84200ffc <Lc_aec_reference_update_sidetone_status_5>:
84200ffc:	d8 4c       	rts;

84200ffe <$_aec_reference_spkr_check_external_rate_adjust_op>:
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 *
 */
void aec_reference_spkr_check_external_rate_adjust_op(AEC_REFERENCE_OP_DATA *op_extra_data)
{
84200ffe:	f1 1d       	pushm <FP(=SP), r4, rLink>, SP = SP + 0x10;
84201000:	16 00       	r4 = r0 + Null;
    uint32 val;
    if(get_override_ep_rate_adjust_op(op_extra_data->spkr_endpoint, &val) && val != 0)
84201002:	c3 10       	r1 = FP + 12;
84201004:	62 f0 80 88 	r0 = M[r4 + 512];
84201008:	0e f0 23 e3 	call (m) $_get_override_ep_rate_adjust_op;
8420100c:	10 04       	Null = r0 - Null;
8420100e:	13 60       	if EQ jump (m) Lc_aec_reference_spkr_check_external_rate_adjust_op_4;

84201010 <Lc_aec_reference_spkr_check_external_rate_adjust_op_2>:
84201010:	1a d8       	r0 = M[FP + 12];
84201012:	11 60       	if EQ jump (m) Lc_aec_reference_spkr_check_external_rate_adjust_op_4;

84201014 <Lc_aec_reference_spkr_check_external_rate_adjust_op_3>:
    {
        /* Speaker graph will use an external RATE_ADJUST operator for
         * performing rate adjustment.
         */
        op_extra_data->spkr_ext_rate_adjust_op = val;
84201014:	62 f0 ae 8e 	M[r4 + 696] = r0;

        /* if we have standalone rate adjust, we will use it, even
         * if spkr is able to use HW warping */
        op_extra_data->spkr_rate_ability = RATEMATCHING_SUPPORT_SW;
84201018:	41 20       	rMAC = Null + 1;
8420101a:	61 f0 6f 8e 	M[r4 + 444] = rMAC;

        /* Speaker path will use this, so not in pass-through mode */
        stream_delegate_rate_adjust_set_passthrough_mode(op_extra_data->spkr_ext_rate_adjust_op, FALSE);
8420101e:	03 00       	r1 = Null + Null;
84201020:	0e f0 25 e6 	call (m) $_stream_delegate_rate_adjust_set_passthrough_mode;

        L2_DBG_MSG1("AEC_REFERENCE: Speaker path will use standalone rate adjust: opid=0x%x", val);
84201024:	1b d8       	r1 = M[FP + 12];
84201026:	55 f1 02 f0 	r0 = Null + 357564832;
8420102a:	a0 41 
8420102c:	ef fd fc ff 	call (m) 0x9b4;
84201030:	29 ec 
84201032:	03 6e       	jump (m) Lc_aec_reference_spkr_check_external_rate_adjust_op_5;

84201034 <Lc_aec_reference_spkr_check_external_rate_adjust_op_4>:

        return;
    }

    /* No external operator found or needed */
    op_extra_data->spkr_ext_rate_adjust_op = 0;
84201034:	60 f0 ae 8e 	M[r4 + 696] = Null;

84201038 <Lc_aec_reference_spkr_check_external_rate_adjust_op_5>:

    return;
}
84201038:	f1 49       	SP = SP - 0x10, popm <FP, r4, rLink>;
8420103a:	d8 4c       	rts;

8420103c <$_aec_reference_mic_check_external_rate_adjust_op>:
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 *
 * \return TRUE if there is a standalone rate adjust operator linked to the microphne path
 */
void aec_reference_mic_check_external_rate_adjust_op(AEC_REFERENCE_OP_DATA *op_extra_data)
{
8420103c:	f1 1d       	pushm <FP(=SP), r4, rLink>, SP = SP + 0x10;
8420103e:	16 00       	r4 = r0 + Null;
    uint32 val;
    if(get_override_ep_rate_adjust_op(op_extra_data->mic_endpoint, &val) && val != 0)
84201040:	c3 10       	r1 = FP + 12;
84201042:	62 f0 7f 88 	r0 = M[r4 + 508];
84201046:	0e f0 25 e1 	call (m) $_get_override_ep_rate_adjust_op;
8420104a:	10 04       	Null = r0 - Null;
8420104c:	1e 60       	if EQ jump (m) Lc_aec_reference_mic_check_external_rate_adjust_op_6;

8420104e <Lc_aec_reference_mic_check_external_rate_adjust_op_2>:
8420104e:	1a d8       	r0 = M[FP + 12];
84201050:	1c 60       	if EQ jump (m) Lc_aec_reference_mic_check_external_rate_adjust_op_6;

84201052 <Lc_aec_reference_mic_check_external_rate_adjust_op_3>:
    {
        /* If we have been told to synchronise mic to speaker input then
         * we shouldn't have been told to use standalone rate adjust.
         */
        PL_ASSERT(!op_extra_data->mic_sync_enable);
84201052:	60 f0 d4 88 	Null = M[r4 + 848];
84201056:	09 60       	if EQ jump (m) Lc_aec_reference_mic_check_external_rate_adjust_op_5;

84201058 <Lc_aec_reference_mic_check_external_rate_adjust_op_4>:
84201058:	03 f0 f8 5b 	r1 = Null + 4088;
8420105c:	02 f0 13 60 	r0 = Null + 4115;
84201060:	ff fd 97 f0 	call (m) 0x13f12;
84201064:	33 e5 
84201066:	13 6e       	jump (m) Lc_aec_reference_mic_check_external_rate_adjust_op_7;

84201068 <Lc_aec_reference_mic_check_external_rate_adjust_op_5>:

        /* Microphone graph will use an external RATE_ADJUST operator for
         * performing rate adjustment.
         */
        op_extra_data->mic_ext_rate_adjust_op = val;
84201068:	62 f0 ad 8e 	M[r4 + 692] = r0;

        /* if we have standalone rate adjust, we will use it, even
         * if mic is able to use HW warping */
        op_extra_data->mic_rate_ability = RATEMATCHING_SUPPORT_SW;
8420106c:	41 20       	rMAC = Null + 1;
8420106e:	61 f0 67 8e 	M[r4 + 412] = rMAC;

        /* Microphone path will use this, so not in pass-through mode */
        stream_delegate_rate_adjust_set_passthrough_mode(op_extra_data->mic_ext_rate_adjust_op, FALSE);
84201072:	03 00       	r1 = Null + Null;
84201074:	0e f0 31 e3 	call (m) $_stream_delegate_rate_adjust_set_passthrough_mode;

        L2_DBG_MSG1("AEC_REFERENCE: Microphone path will use standalone rate adjust: opid=0x%x", val);
84201078:	1b d8       	r1 = M[FP + 12];
8420107a:	55 f1 02 f0 	r0 = Null + 357564903;
8420107e:	e7 41 
84201080:	ef fd fc ff 	call (m) 0x9b4;
84201084:	35 e9 
84201086:	03 6e       	jump (m) Lc_aec_reference_mic_check_external_rate_adjust_op_7;

84201088 <Lc_aec_reference_mic_check_external_rate_adjust_op_6>:

        return;
    }

    /* No external operator found or needed */
    op_extra_data->mic_ext_rate_adjust_op = 0;
84201088:	60 f0 ad 8e 	M[r4 + 692] = Null;

8420108c <Lc_aec_reference_mic_check_external_rate_adjust_op_7>:

    return;
}
8420108c:	f1 49       	SP = SP - 0x10, popm <FP, r4, rLink>;
8420108e:	d8 4c       	rts;

84201090 <$_aec_reference_opmsg_set_ttp_latency>:
 * \return Whether the response_data field has been populated with a valid
 * response
 */
bool aec_reference_opmsg_set_ttp_latency(OPERATOR_DATA *op_data, void *message_data,
                                     unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84201090:	f1 1c       	pushm <FP(=SP), r4, rLink>;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84201092:	16 99       	r4 = M[r0 + 48];
                                     unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);

    /* We cant change this setting while running */
    if(op_data->state == OP_RUNNING)
84201094:	11 b0       	rMAC = MBS[r0 + 24];
84201096:	03 62       	if NE jump (m) Lc_aec_reference_opmsg_set_ttp_latency_3;

84201098 <Lc_aec_reference_opmsg_set_ttp_latency_2>:

    {
        return FALSE;
84201098:	02 00       	r0 = Null + Null;
8420109a:	15 6e       	jump (m) Lc_aec_reference_opmsg_set_ttp_latency_4;

8420109c <Lc_aec_reference_opmsg_set_ttp_latency_3>:
    }

    /* get the latency from payload */
    op_extra_data->mic_target_latency = ttp_get_msg_latency(message_data);
8420109c:	1a 00       	r0 = r1 + Null;
8420109e:	ff fd ab f0 	call (m) 0x16706;
842010a2:	29 e3 
842010a4:	13 00       	r1 = r0 + Null;
842010a6:	63 f0 ce 8e 	M[r4 + 824] = r1;

    /* configure latency */
    ttp_configure_latency(op_extra_data->mic_time_to_play, op_extra_data->mic_target_latency);
842010aa:	62 f0 cf 88 	r0 = M[r4 + 828];
842010ae:	ff fd ab f0 	call (m) 0x167da;
842010b2:	2d e9 

    /* receiving this message (with latenct != 0) will enable metadata generation */
    op_extra_data->mic_metadata_enable = op_extra_data->mic_target_latency != 0;
842010b4:	01 00       	rMAC = Null + Null;
842010b6:	60 f0 ce 88 	Null = M[r4 + 824];
842010ba:	21 f0 41 ce 	if NE rMAC = Null + 1;
842010be:	61 f0 cd 8e 	M[r4 + 820] = rMAC;

    return TRUE;
842010c2:	42 20       	r0 = Null + 1;

842010c4 <Lc_aec_reference_opmsg_set_ttp_latency_4>:
}
842010c4:	f1 48       	popm <FP, r4, rLink>;
842010c6:	d8 4c       	rts;

842010c8 <$_aec_reference_opmsg_set_ttp_params>:
 * \return Whether the response_data field has been populated with a valid
 * response
 */
bool aec_reference_opmsg_set_ttp_params(OPERATOR_DATA *op_data, void *message_data,
                                    unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842010c8:	f1 1d       	pushm <FP(=SP), r4, rLink>, SP = SP + 0x10;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
842010ca:	16 99       	r4 = M[r0 + 48];

    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    ttp_params params;

    /* We cant change this setting while running */
    if(op_data->state == OP_RUNNING)
842010cc:	11 b0       	rMAC = MBS[r0 + 24];
842010ce:	03 62       	if NE jump (m) Lc_aec_reference_opmsg_set_ttp_params_3;

842010d0 <Lc_aec_reference_opmsg_set_ttp_params_2>:
    {
        return FALSE;
842010d0:	02 00       	r0 = Null + Null;
842010d2:	0c 6e       	jump (m) Lc_aec_reference_opmsg_set_ttp_params_4;

842010d4 <Lc_aec_reference_opmsg_set_ttp_params_3>:
    }

    /* configure ttp params */
    ttp_get_msg_params(&params, message_data);
842010d4:	c2 10       	r0 = FP + 12;
842010d6:	ff fd ab f0 	call (m) 0x16786;
842010da:	31 e5 
    ttp_configure_params(op_extra_data->mic_time_to_play, &params);
842010dc:	c3 10       	r1 = FP + 12;
842010de:	62 f0 cf 88 	r0 = M[r4 + 828];
842010e2:	ff fd ab f0 	call (m) 0x16822;
842010e6:	21 ea 

    return TRUE;
842010e8:	42 20       	r0 = Null + 1;

842010ea <Lc_aec_reference_opmsg_set_ttp_params_4>:
}
842010ea:	f1 49       	SP = SP - 0x10, popm <FP, r4, rLink>;
842010ec:	d8 4c       	rts;

842010ee <$_aec_reference_opmsg_set_latency_limits>:
 * aec_reference_opmsg_set_latency_limits
 * \brief message handler to set ttp latency limits for mic output channels
 */
bool aec_reference_opmsg_set_latency_limits(OPERATOR_DATA *op_data, void *message_data,
                                        unsigned *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842010ee:	f1 1d       	pushm <FP(=SP), r4, rLink>, SP = SP + 0x10;
842010f0:	19 00       	rMAC = r1 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
842010f2:	16 99       	r4 = M[r0 + 48];
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    TIME_INTERVAL min_latency, max_latency;

    /* get the limits from the message payload and configure the time to play limits */
    ttp_get_msg_latency_limits(message_data, &min_latency, &max_latency);
842010f4:	04 11       	r2 = FP + 16;
842010f6:	c3 10       	r1 = FP + 12;
842010f8:	0a 00       	r0 = rMAC + Null;
842010fa:	ff fd ab f0 	call (m) 0x1673c;
842010fe:	23 e2 
    ttp_configure_latency_limits(op_extra_data->mic_time_to_play, min_latency, max_latency);
84201100:	24 d8       	r2 = M[FP + 16];
84201102:	1b d8       	r1 = M[FP + 12];
84201104:	62 f0 cf 88 	r0 = M[r4 + 828];
84201108:	ff fd ab f0 	call (m) 0x167fa;
8420110c:	33 e7 

    return TRUE;
8420110e:	42 20       	r0 = Null + 1;

84201110 <Lc_aec_reference_opmsg_set_latency_limits_2>:
}
84201110:	f1 49       	SP = SP - 0x10, popm <FP, r4, rLink>;
84201112:	d8 4c       	rts;

84201114 <$_aec_reference_mic_generate_metadata_with_ttp>:
 * \brief generates metadata for microphone output channels
 * \param op_extra_data Pointer to AEC_REFERENCE operator specific data
 * \param samples number of samples in the to-be-copied chunk
 */
void aec_reference_mic_generate_metadata_with_ttp(AEC_REFERENCE_OP_DATA *op_extra_data, unsigned samples)
{
84201114:	f6 1e       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x20;
84201116:	10 09       	r6 = r0 + Null;
84201118:	8b f0 ca 88 	r9 = M[r6 + 808];
8420111c:	1f 00       	r5 = r1 + Null;
    metadata_tag *mtag;
    unsigned b4idx, afteridx;
    tCbuffer *met_buf = op_extra_data->mic_metadata_buffer;

    /* no update needed if no new samples arrived */
    if(samples == 0)
8420111e:	6b 60       	if EQ jump (m) Lc_aec_reference_mic_generate_metadata_with_ttp_12;

84201120 <Lc_aec_reference_mic_generate_metadata_with_ttp_2>:
    {
        return;
    }

    /* if previous tag was incomplete, we need first to complete the tag */
    if(op_extra_data->mic_metadata_tag_left_words > 0)
84201120:	81 f0 cb 88 	rMAC = M[r6 + 812];
84201124:	15 60       	if EQ jump (m) Lc_aec_reference_mic_generate_metadata_with_ttp_6;

84201126 <Lc_aec_reference_mic_generate_metadata_with_ttp_3>:
    {
        /* last written tag was incomplete, we keep adding
         * Null tag until full length of incomplete tag is
         * covered.
         */
        unsigned null_tag_len = op_extra_data->mic_metadata_tag_left_words;
84201126:	0e 00       	r4 = rMAC + Null;
        if(null_tag_len > samples)
84201128:	c8 05       	Null = rMAC - r5;
8420112a:	09 f0 87 e0 	if LS jump (m) Lc_aec_reference_mic_generate_metadata_with_ttp_5;

8420112e <Lc_aec_reference_mic_generate_metadata_with_ttp_4>:
        {
            null_tag_len = samples;
8420112e:	3e 00       	r4 = r5 + Null;

84201130 <Lc_aec_reference_mic_generate_metadata_with_ttp_5>:
        }

        /* append Null tag, with length = null_tag_len */
        b4idx = 0;
        afteridx = null_tag_len*OCTETS_PER_SAMPLE;
84201130:	75 54       	r3 = r4 LSHIFT 2;
        buff_metadata_append(met_buf, NULL, b4idx, afteridx);
84201132:	04 00       	r2 = Null + Null;
84201134:	03 00       	r1 = Null + Null;
84201136:	5a 08       	r0 = r9 + Null;
84201138:	ff fd 84 f0 	call (m) 0x11adc;
8420113c:	25 ed 

        /* update amount left */
        op_extra_data->mic_metadata_tag_left_words -= null_tag_len;
8420113e:	81 f0 cb 88 	rMAC = M[r6 + 812];
84201142:	89 05       	rMAC = rMAC - r4;
84201144:	81 f0 cb 8e 	M[r6 + 812] = rMAC;
        samples -= null_tag_len;
84201148:	bf 05       	r5 = r5 - r4;
        if(samples == 0)
8420114a:	38 04       	Null = r5 - Null;
8420114c:	54 60       	if EQ jump (m) Lc_aec_reference_mic_generate_metadata_with_ttp_12;

8420114e <Lc_aec_reference_mic_generate_metadata_with_ttp_6>:
        }
    }

    /* create a new tag to append */
    b4idx = 0;
    afteridx = samples*OCTETS_PER_SAMPLE;
8420114e:	7a 54       	r0 = r5 LSHIFT 2;
84201150:	42 de       	M[FP + 32] = r0;
    mtag = buff_metadata_new_tag();
84201152:	ff fd 83 f0 	call (m) 0x11862;
84201156:	31 e8 
84201158:	16 00       	r4 = r0 + Null;
    if (mtag != NULL)
8420115a:	46 60       	if EQ jump (m) Lc_aec_reference_mic_generate_metadata_with_ttp_11;

8420115c <Lc_aec_reference_mic_generate_metadata_with_ttp_7>:
    {
        /* calculating time of arrival for first sample of the tag,
         * we do that by looking how many samples are in the mic buffer,
         * this could be short by up to 1 sample as our reading isn't aligned.
         */
        TIME current_time = hal_get_time();
8420115c:	ff fd 83 f1 	call (m) 0x317e8;
84201160:	2d e4 
84201162:	12 09       	r8 = r0 + Null;

        /* amount of data in the mic buffer */
        unsigned amount_in_buffer =
            cbuffer_calc_amount_data_in_words(op_extra_data->input_stream[AEC_REF_MIC_TERMINAL1]);
84201164:	82 f0 02 88 	r0 = M[r6 + 8];
84201168:	ff fd 58 f1 	call (m) 0x2c208;
8420116c:	21 e5 

        /* convert samples to time,
         * Note: some inaccuracies because of rate adjustment, but jitter will be filtered by ttp filter */
        INTERVAL time_passed = (INTERVAL) (((uint48)(amount_in_buffer)*SECOND)/op_extra_data->mic_rate) +
            (INTERVAL) (((uint48)(samples)*SECOND)/op_extra_data->output_rate);
8420116e:	00 f0 42 ff 	rMAC = r0 * 0.00023283064365386962890625 (UU);
84201172:	40 f2 11 cc 
84201176:	84 f0 66 88 	r2 = M[r6 + 408];
8420117a:	05 00       	r3 = Null + Null;
8420117c:	09 50       	rMAC = rMAC LSHIFT -1 (56bit);
8420117e:	00 f1 d3 c8 	r1 = rMAC LSHIFT 0;
84201182:	ca 57       	r0 = rMAC LSHIFT 32;
84201184:	ff fd af f0 	call (m) 0x17130;
84201188:	2d ed 
8420118a:	11 09       	r7 = r0 + Null;
8420118c:	00 f0 42 ff 	rMAC = r5 * 0.00023283064365386962890625 (UU);
84201190:	40 f7 11 cc 
84201194:	84 f0 65 88 	r2 = M[r6 + 404];
84201198:	05 00       	r3 = Null + Null;
8420119a:	09 50       	rMAC = rMAC LSHIFT -1 (56bit);
8420119c:	00 f1 d3 c8 	r1 = rMAC LSHIFT 0;
842011a0:	ca 57       	r0 = rMAC LSHIFT 32;
842011a2:	ff fd af f0 	call (m) 0x17130;
842011a6:	2f ec 
842011a8:	11 00       	rMAC = r0 + Null;
842011aa:	49 0c       	rMAC = r7 + rMAC;

        TIME time_of_arrival = time_sub(current_time, time_passed);
842011ac:	1f fa 03 c2 	r1 = r8 - rMAC;

        /* see if we have minimum amount for tag */
        if(samples >= op_extra_data->mic_metadata_min_tag_len)
842011b0:	82 f0 cc 88 	r0 = M[r6 + 816];
842011b4:	b8 04       	Null = r5 - r0;
842011b6:	04 64       	if NC jump (m) Lc_aec_reference_mic_generate_metadata_with_ttp_9;

842011b8 <Lc_aec_reference_mic_generate_metadata_with_ttp_8>:
        {
            /* we have enough new samples to append a complete tag */
            mtag->length = samples*OCTETS_PER_SAMPLE;
842011b8:	7a 54       	r0 = r5 LSHIFT 2;
842011ba:	f2 8e       	M[r4 + 12] = r0;
842011bc:	08 6e       	jump (m) Lc_aec_reference_mic_generate_metadata_with_ttp_10;

842011be <Lc_aec_reference_mic_generate_metadata_with_ttp_9>:
             * new complete tag, we append a new tag with
             * minimum length, this tag is incomplete and
             * will be completed in next calls when we receive
             * new samples by appending Null tags.
             */
            mtag->length = op_extra_data->mic_metadata_min_tag_len*OCTETS_PER_SAMPLE;
842011be:	52 54       	r0 = r0 LSHIFT 2;
842011c0:	f2 8e       	M[r4 + 12] = r0;
            op_extra_data->mic_metadata_tag_left_words = op_extra_data->mic_metadata_min_tag_len - samples;
842011c2:	81 f0 cc 88 	rMAC = M[r6 + 816];
842011c6:	c9 05       	rMAC = rMAC - r5;
842011c8:	81 f0 cb 8e 	M[r6 + 812] = rMAC;

842011cc <Lc_aec_reference_mic_generate_metadata_with_ttp_10>:
        }

        ttp_status status;
        ttp_update_ttp(op_extra_data->mic_time_to_play, time_of_arrival,
                       mtag->length/OCTETS_PER_SAMPLE, &status);
842011cc:	45 12       	r3 = FP + 36;
842011ce:	f2 88       	r0 = M[r4 + 12];
842011d0:	54 50       	r2 = r0 LSHIFT -2;
842011d2:	82 f0 cf 88 	r0 = M[r6 + 828];
842011d6:	ff fd ab f0 	call (m) 0x16860;
842011da:	2b e4 
        /* Populate the metadata tag from the TTP status */
        ttp_utils_populate_tag(mtag, &status);
842011dc:	43 12       	r1 = FP + 36;
842011de:	32 00       	r0 = r4 + Null;
842011e0:	ef fd fb ff 	call (m) 0x8d0;
842011e4:	31 e7 

842011e6 <Lc_aec_reference_mic_generate_metadata_with_ttp_11>:
    }
    /* append generated metadata to the output buffer */
    buff_metadata_append(met_buf, mtag, b4idx, afteridx);
842011e6:	04 00       	r2 = Null + Null;
842011e8:	33 00       	r1 = r4 + Null;
842011ea:	5a 08       	r0 = r9 + Null;
842011ec:	45 d8       	r3 = M[FP + 32];
842011ee:	ff fd 84 f0 	call (m) 0x11adc;
842011f2:	2f e7 

842011f4 <Lc_aec_reference_mic_generate_metadata_with_ttp_12>:
}
842011f4:	f6 4a       	SP = SP - 0x20, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
842011f6:	d8 4c       	rts;

842011f8 <$_aec_reference_set_mic_gains>:
    return TRUE;
}


void aec_reference_set_mic_gains(OPERATOR_DATA *op_data)
{
842011f8:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
842011fa:	12 09       	r8 = r0 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
842011fc:	a9 f0 0c 88 	r7 = M[r8 + 48];


void aec_reference_set_mic_gains(OPERATOR_DATA *op_data)
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    unsigned i, *lpadcgains = (unsigned*)&op_extra_data->params.OFFSET_ADC_GAIN1;
84201200:	97 f0 d0 20 	r5 = r7 + 208;

    patch_fn_shared(aec_reference);

    for(i=0;i<MAX_NUMBER_MICS;i++)
84201204:	06 00       	r4 = Null + Null;
84201206:	17 6e       	jump (m) Lc_aec_reference_set_mic_gains_6;

84201208 <Lc_aec_reference_set_mic_gains_2>:
    {
        return (i + AEC_REF_MIC_TERMINAL1);
    }
    else
    {
        return ((i-4)+ AEC_REF_MIC_TERMINAL5);
84201208:	31 22       	rMAC = r4 + 8;

8420120a <Lc_aec_reference_set_mic_gains_3>:
        if(op_extra_data->input_stream[MicrophoneTerminalByIndex(i)])
        {
            uint32 config_value = (uint32)(lpadcgains[i]);
            set_override_ep_gain(get_overriden_endpoint(op_data->id,
                                 MicrophoneTerminalByIndex(i) | TERMINAL_SINK_MASK),
                                 config_value);
8420120a:	08 f0 00 f0 	r1 = rMAC OR 0x800000;
8420120e:	00 f1 53 c8 
84201212:	a2 f0 01 88 	r0 = M[r8 + 4];
84201216:	ff fd 1c f0 	call (m) 0x4ab0;
8420121a:	3b e4 
8420121c:	43 08       	r1 = r6 + Null;
8420121e:	ff fd 1b f0 	call (m) 0x4a1c;
84201222:	3f ef 

84201224 <Lc_aec_reference_set_mic_gains_4>:
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);
    unsigned i, *lpadcgains = (unsigned*)&op_extra_data->params.OFFSET_ADC_GAIN1;

    patch_fn_shared(aec_reference);

    for(i=0;i<MAX_NUMBER_MICS;i++)
84201224:	76 20       	r4 = r4 + 1;
84201226:	3f 21       	r5 = r5 + 4;
84201228:	30 26       	Null = r4 - 8;
8420122a:	02 f0 a7 e0 	if C jump (m) Lc_aec_reference_set_mic_gains_11;

8420122e <Lc_aec_reference_set_mic_gains_5>:
}


inline static unsigned MicrophoneTerminalByIndex(unsigned i)
{
    if(i<4)
8420122e:	30 25       	Null = r4 - 4;
84201230:	02 f0 89 e0 	if C jump (m) Lc_aec_reference_set_mic_gains_7;

84201234 <Lc_aec_reference_set_mic_gains_6>:
    {
        return (i + AEC_REF_MIC_TERMINAL1);
84201234:	b2 20       	r0 = r4 + 2;
84201236:	02 6e       	jump (m) Lc_aec_reference_set_mic_gains_8;

84201238 <Lc_aec_reference_set_mic_gains_7>:
    }
    else
    {
        return ((i-4)+ AEC_REF_MIC_TERMINAL5);
84201238:	32 22       	r0 = r4 + 8;

8420123a <Lc_aec_reference_set_mic_gains_8>:
    {
        if(op_extra_data->input_stream[MicrophoneTerminalByIndex(i)])
8420123a:	52 54       	r0 = r0 LSHIFT 2;
8420123c:	91 f0 02 e8 	rMAC = M[r7 + r0];
84201240:	f2 61       	if EQ jump (m) Lc_aec_reference_set_mic_gains_4;

84201242 <Lc_aec_reference_set_mic_gains_9>:
        {
            uint32 config_value = (uint32)(lpadcgains[i]);
84201242:	78 f0 00 e8 	r6 = M[r5 + Null];
}


inline static unsigned MicrophoneTerminalByIndex(unsigned i)
{
    if(i<4)
84201246:	30 25       	Null = r4 - 4;
84201248:	f2 ff c1 ef 	if C jump (m) Lc_aec_reference_set_mic_gains_2;

8420124c <Lc_aec_reference_set_mic_gains_10>:
    {
        return (i + AEC_REF_MIC_TERMINAL1);
8420124c:	b1 20       	rMAC = r4 + 2;
8420124e:	de 6f       	jump (m) Lc_aec_reference_set_mic_gains_3;

84201250 <Lc_aec_reference_set_mic_gains_11>:
            set_override_ep_gain(get_overriden_endpoint(op_data->id,
                                 MicrophoneTerminalByIndex(i) | TERMINAL_SINK_MASK),
                                 config_value);
        }
    }
}
84201250:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84201252:	d8 4c       	rts;

84201254 <$_aec_reference_cleanup>:
 * Note: This function is the same as aec_reference_cleanup_graphs
 *       except that it will reset the entire channel status so any new attempt
 *       to build the graphs will rebuild everything from scratch.
 */
void aec_reference_cleanup(OPERATOR_DATA *op_data)
{
84201254:	f1 1c       	pushm <FP(=SP), r4, rLink>;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84201256:	16 99       	r4 = M[r0 + 48];
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);

    patch_fn_shared(aec_reference);

    /* cleanup all the graphs */
    aec_reference_cleanup_graphs(op_extra_data);
84201258:	32 00       	r0 = r4 + Null;
8420125a:	06 f0 3d ea 	call (m) $_aec_reference_cleanup_graphs;

    /* reset channel status, so any new trying
     * of building graphs will rebuild every thing
     * from scratch
     */
    op_extra_data->channel_status = 0;
8420125e:	60 f0 76 8e 	M[r4 + 472] = Null;

84201262 <Lc_aec_reference_cleanup_2>:
}
84201262:	f1 48       	popm <FP, r4, rLink>;
84201264:	d8 4c       	rts;

84201266 <$_build_mic_graph>:
 *        whenever there is a change in microphone channel status.
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
bool build_mic_graph(AEC_REFERENCE_OP_DATA *op_extra_data)
{
84201266:	f6 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x10;
84201268:	11 09       	r7 = r0 + Null;
    cbops_graph *mic_graph;
    cbops_op *op_ptr;
    unsigned i, num_mics = op_extra_data->num_mic_channels,j,num_io;
8420126a:	9a f0 78 88 	r8 = M[r7 + 480];
    unsigned* idxs;
    unsigned  out_idx,intern_idx;
    unsigned  st_idx=0,st_rs_idx=0;
8420126e:	40 de       	M[FP + 32] = Null;
84201270:	48 de       	M[FP + 36] = Null;
                             SIDETONE

    **********************************************************************/

    /* Is there a MIC path */
    if(!(op_extra_data->channel_status&CHAN_STATE_MIC_MASK))
84201272:	91 f0 76 88 	rMAC = M[r7 + 472];
84201276:	07 f0 11 f8 	rMAC = rMAC AND 0xf000f;
8420127a:	0f 00 
8420127c:	b5 60       	if EQ jump (m) Lc_build_mic_graph_18;

8420127e <Lc_build_mic_graph_2>:
    {
        return(TRUE);
    }

    /* create shared sidetone buffer */
    if(op_extra_data->sidetone_method == AEC_SIDETONE_IN_SW_BY_MIC_SPKR_GRAPH)
8420127e:	91 f0 70 90 	rMAC = MBS[r7 + 624];
84201282:	88 24       	Null = rMAC - 2;
84201284:	bd 62       	if NE jump (m) Lc_build_mic_graph_20;

84201286 <Lc_build_mic_graph_3>:
    {
        /* side tone buffer size, 2ms more than task period */
        unsigned sidetone_buf_size = frac_mult(op_extra_data->spkr_rate,
                                               op_extra_data->task_period_frac + FRACTIONAL(0.002));
84201286:	92 f0 6e 88 	r0 = M[r7 + 440];
8420128a:	91 f0 93 88 	rMAC = M[r7 + 588];
8420128e:	06 f1 13 f0 	r1 = rMAC + 4294967;
84201292:	37 31 
84201294:	00 f3 72 c9 	r0 = r0 * r1 (frac);
        /* we don't expect SidetoneOA buffer already existing at this point */
        PL_ASSERT(op_extra_data->sidetone_buf == NULL);
84201298:	91 f0 31 88 	rMAC = M[r7 + 196];
8420129c:	a8 60       	if EQ jump (m) Lc_build_mic_graph_19;

8420129e <Lc_build_mic_graph_4>:
8420129e:	03 f0 94 42 	r1 = Null + 660;
842012a2:	02 f0 13 60 	r0 = Null + 4115;
842012a6:	ff fd 96 f0 	call (m) 0x13f12;
842012aa:	2d e3 
842012ac:	0f f0 a7 e7 	jump (m) Lc_build_mic_graph_66;

842012b0 <Lc_build_mic_graph_5>:
        {
            goto aFailed;
        }
        cbops_append_operator_to_graph(mic_graph,op_ptr);
    }
    else if (st_idx != 0)
842012b0:	41 d8       	rMAC = M[FP + 32];
842012b2:	74 60       	if EQ jump (m) Lc_build_mic_graph_15;

842012b4 <Lc_build_mic_graph_6>:
    {
        /* Need to copy internal buffer to output before sidetone */
        op_ptr = create_shift_op(num_mics,&idxs[intern_idx], &idxs[out_idx],0);
842012b4:	01 fa d2 c8 	r0 = r8 LSHIFT 2;
842012b8:	54 d8       	r2 = M[FP + 40];
842012ba:	05 00       	r3 = Null + Null;
842012bc:	23 00       	r1 = r2 + Null;
842012be:	14 01       	r2 = r0 + r2;
842012c0:	5a d8       	r0 = M[FP + 44];
842012c2:	52 54       	r0 = r0 LSHIFT 2;
842012c4:	d3 00       	r1 = r0 + r1;
842012c6:	52 08       	r0 = r8 + Null;
842012c8:	ff fd 25 f1 	call (m) 0x25e08;
842012cc:	21 ea 

842012ce <Lc_build_mic_graph_7>:
        /*  Add Resampler Operators per channel (mic_rate --> output_rate) */
        op_ptr = create_iir_resamplerv2_op(num_mics, &idxs[intern_idx], &idxs[out_idx],
                                           op_extra_data->mic_rate,op_extra_data->output_rate,
                                           op_extra_data->resampler_temp_buffer_size,
                                           op_extra_data->resampler_temp_buffer, shift_amount, 0, 0);
        if(!op_ptr)
842012ce:	10 04       	Null = r0 - Null;
842012d0:	bc 60       	if EQ jump (m) Lc_build_mic_graph_25;

842012d2 <Lc_build_mic_graph_8>:
        {
            goto aFailed;
        }
        cbops_append_operator_to_graph(mic_graph,op_ptr);
842012d2:	13 00       	r1 = r0 + Null;
842012d4:	5a 08       	r0 = r9 + Null;
842012d6:	ff fd ad f0 	call (m) 0x16e96;
842012da:	21 ee 
        }
        cbops_append_operator_to_graph(mic_graph,op_ptr);
    }

    /* Handle sidetone */
    if(st_idx != 0)
842012dc:	41 d8       	rMAC = M[FP + 32];
842012de:	5e 60       	if EQ jump (m) Lc_build_mic_graph_15;

842012e0 <Lc_build_mic_graph_9>:
    {
        /* Minimum space needed in buffer */
        unsigned threshold = frac_mult(op_extra_data->spkr_rate,op_extra_data->task_period_frac) + 1;
842012e0:	92 f0 6e 88 	r0 = M[r7 + 440];
842012e4:	93 f0 93 88 	r1 = M[r7 + 588];
842012e8:	00 f3 72 c9 	r0 = r0 * r1 (frac);
842012ec:	56 20       	r4 = r0 + 1;

        cbops_set_output_io_buffer(mic_graph,st_idx,st_idx,op_extra_data->sidetone_buf);
842012ee:	95 f0 31 88 	r3 = M[r7 + 196];
842012f2:	5a 08       	r0 = r9 + Null;
842012f4:	44 d8       	r2 = M[FP + 32];
842012f6:	23 00       	r1 = r2 + Null;
842012f8:	ff fd ad f0 	call (m) 0x16e34;
842012fc:	3d e9 
            Note:  Sidetone is before resampler.
            Better solution is to place it at lowest sample rate */

        op_ptr = create_sidetone_filter_op(intern_idx, st_rs_idx, 3,
                                           (cbops_sidetone_params*)&op_extra_data->params.OFFSET_ST_CLIP_POINT,
                                           (void*)&op_extra_data->params.OFFSET_ST_PEQ_CONFIG);
842012fe:	01 f0 0c ff 	push r7 + 268;
84201302:	19 cf 
84201304:	95 f0 f0 20 	r3 = r7 + 240;
84201308:	c4 20       	r2 = Null + 3;
8420130a:	4b d8       	r1 = M[FP + 36];
8420130c:	5a d8       	r0 = M[FP + 44];
8420130e:	0c f0 39 e5 	call (m) $_create_sidetone_filter_op;
84201312:	7f 4c       	SP = SP + -4;

        op_extra_data->mic_sidetone_op = op_ptr;
        if(!op_ptr)
84201314:	92 f0 6c 8e 	M[r7 + 432] = r0;
84201318:	98 60       	if EQ jump (m) Lc_build_mic_graph_25;

8420131a <Lc_build_mic_graph_10>:
        {
            goto aFailed;
        }
        cbops_append_operator_to_graph(mic_graph,op_ptr);
8420131a:	13 00       	r1 = r0 + Null;
8420131c:	5a 08       	r0 = r9 + Null;
8420131e:	ff fd ad f0 	call (m) 0x16e96;
84201322:	39 eb 

        if(st_rs_idx!=st_idx)
84201324:	4a d8       	r0 = M[FP + 36];
84201326:	41 d8       	rMAC = M[FP + 32];
84201328:	50 04       	Null = r0 - rMAC;
8420132a:	25 60       	if EQ jump (m) Lc_build_mic_graph_13;

8420132c <Lc_build_mic_graph_11>:
                                               &idxs[st_rs_idx],
                                               &idxs[st_idx],
                                               op_extra_data->mic_rate,
                                               op_extra_data->spkr_rate,
                                               op_extra_data->resampler_temp_buffer_size,
                                               op_extra_data->resampler_temp_buffer, 0, 0, 0);
8420132c:	00 f0 30 cf 	push Null;
84201330:	00 f0 30 cf 	push Null;
84201334:	00 f0 30 cf 	push Null;
84201338:	91 f0 32 88 	rMAC = M[r7 + 200];
8420133c:	09 1c       	pushm <rMAC>;
8420133e:	91 f0 91 88 	rMAC = M[r7 + 580];
84201342:	09 1c       	pushm <rMAC>;
84201344:	91 f0 6e 88 	rMAC = M[r7 + 440];
84201348:	09 1c       	pushm <rMAC>;
8420134a:	95 f0 66 88 	r3 = M[r7 + 408];
8420134e:	42 d8       	r0 = M[FP + 32];
84201350:	54 d8       	r2 = M[FP + 40];
84201352:	52 54       	r0 = r0 LSHIFT 2;
84201354:	23 00       	r1 = r2 + Null;
84201356:	14 01       	r2 = r0 + r2;
84201358:	4a d8       	r0 = M[FP + 36];
8420135a:	52 54       	r0 = r0 LSHIFT 2;
8420135c:	d3 00       	r1 = r0 + r1;
8420135e:	42 20       	r0 = Null + 1;
84201360:	0c f0 35 e5 	call (m) $_create_iir_resamplerv2_op;
84201364:	7a 4c       	SP = SP + -24;
            if(!op_ptr)
84201366:	10 04       	Null = r0 - Null;
84201368:	70 60       	if EQ jump (m) Lc_build_mic_graph_25;

8420136a <Lc_build_mic_graph_12>:
            {
                goto aFailed;
            }
            cbops_append_operator_to_graph(mic_graph,op_ptr);
8420136a:	13 00       	r1 = r0 + Null;
8420136c:	5a 08       	r0 = r9 + Null;
8420136e:	ff fd ad f0 	call (m) 0x16e96;
84201372:	29 e9 

84201374 <Lc_build_mic_graph_13>:
        }

        /* Add in disgard on sidetone */

        op_ptr = create_sink_overflow_disgard_op(1,&idxs[st_idx],threshold);
84201374:	42 d8       	r0 = M[FP + 32];
84201376:	53 d8       	r1 = M[FP + 40];
84201378:	52 54       	r0 = r0 LSHIFT 2;
8420137a:	d3 00       	r1 = r0 + r1;
8420137c:	42 20       	r0 = Null + 1;
8420137e:	34 00       	r2 = r4 + Null;
84201380:	ff fd 55 f1 	call (m) 0x2bdc4;
84201384:	25 e2 
#if defined(IO_DEBUG)
        st_disgard_op = op_ptr;
84201386:	e0 f0 02 f0 	M[Null + $_st_disgard_op] = r0;
8420138a:	5a 8e 
#endif
        if(!op_ptr)
8420138c:	10 04       	Null = r0 - Null;
8420138e:	5d 60       	if EQ jump (m) Lc_build_mic_graph_25;

84201390 <Lc_build_mic_graph_14>:
        {
            goto aFailed;
        }
        cbops_append_operator_to_graph(mic_graph,op_ptr);
84201390:	13 00       	r1 = r0 + Null;
84201392:	5a 08       	r0 = r9 + Null;
84201394:	ff fd ad f0 	call (m) 0x16e96;
84201398:	23 e8 

8420139a <Lc_build_mic_graph_15>:
    }

    /* add mute operator, it can be controlled by
     * message to the operator
     */
    op_ptr = create_mute_op(num_mics, &idxs[out_idx]);
8420139a:	01 fa d2 c8 	r0 = r8 LSHIFT 2;
8420139e:	53 d8       	r1 = M[FP + 40];
842013a0:	d3 00       	r1 = r0 + r1;
842013a2:	52 08       	r0 = r8 + Null;
842013a4:	0e f0 35 ec 	call (m) $_create_mute_op;
842013a8:	16 00       	r4 = r0 + Null;
    if(!op_ptr)
842013aa:	4f 60       	if EQ jump (m) Lc_build_mic_graph_25;

842013ac <Lc_build_mic_graph_16>:
    {
        goto aFailed;
    }
    cbops_append_operator_to_graph(mic_graph,op_ptr);
842013ac:	33 00       	r1 = r4 + Null;
842013ae:	5a 08       	r0 = r9 + Null;
842013b0:	ff fd ad f0 	call (m) 0x16e96;
842013b4:	27 e7 
    op_extra_data->mic_mute_op = op_ptr;
842013b6:	96 f0 9d 8e 	M[r7 + 628] = r4;

    /* Insert latency operator */
    op_ptr = create_mic_latency_op(out_idx,&op_extra_data->sync_block);
842013ba:	93 f0 14 22 	r1 = r7 + 532;
842013be:	52 08       	r0 = r8 + Null;
842013c0:	ff fd 37 f1 	call (m) 0x2822e;
842013c4:	2f e3 
    if(!op_ptr)
842013c6:	10 04       	Null = r0 - Null;
842013c8:	40 60       	if EQ jump (m) Lc_build_mic_graph_25;

842013ca <Lc_build_mic_graph_17>:
    {
        goto aFailed;
    }
    cbops_append_operator_to_graph(mic_graph,op_ptr);
842013ca:	13 00       	r1 = r0 + Null;
842013cc:	5a 08       	r0 = r9 + Null;
842013ce:	ff fd ad f0 	call (m) 0x16e96;
842013d2:	29 e6 

    pfree(idxs);
842013d4:	52 d8       	r0 = M[FP + 40];
842013d6:	ff fd 1d f0 	call (m) 0x4f62;
842013da:	2d ec 

    /* Each mic input has a corresponding output,
     * so it's safe to purge all channels now
     */
    aec_ref_purge_mics(mic_graph,num_mics);
842013dc:	53 08       	r1 = r8 + Null;
842013de:	5a 08       	r0 = r9 + Null;
842013e0:	ff fd 76 f1 	call (m) 0x300d6;
842013e4:	37 e7 

842013e6 <Lc_build_mic_graph_18>:
    **********************************************************************/

    /* Is there a MIC path */
    if(!(op_extra_data->channel_status&CHAN_STATE_MIC_MASK))
    {
        return(TRUE);
842013e6:	42 20       	r0 = Null + 1;
842013e8:	0f f0 eb e4 	jump (m) Lc_build_mic_graph_66;

842013ec <Lc_build_mic_graph_19>:
                                               op_extra_data->task_period_frac + FRACTIONAL(0.002));
        /* we don't expect SidetoneOA buffer already existing at this point */
        PL_ASSERT(op_extra_data->sidetone_buf == NULL);

        /* Allocate Buffer between cbops Graphs */
        op_extra_data->sidetone_buf = cbuffer_create_with_malloc_fast(sidetone_buf_size, BUF_DESC_SW_BUFFER);
842013ec:	03 00       	r1 = Null + Null;
842013ee:	ff fd 89 f0 	call (m) 0x1279c;
842013f2:	2f ed 
842013f4:	92 f0 31 8e 	M[r7 + 196] = r0;

        if(!op_extra_data->sidetone_buf)
842013f8:	91 f0 31 88 	rMAC = M[r7 + 196];
842013fc:	2a 60       	if EQ jump (m) Lc_build_mic_graph_26;

842013fe <Lc_build_mic_graph_20>:
       MIC Internal
       SIDETONE OUT
    */

    out_idx    = num_mics;
    intern_idx = out_idx;
842013fe:	ea f0 0b 8e 	M[FP + 44] = r8;
    num_io     = 2*num_mics;
84201402:	00 fa d6 d8 	r4 = r8 LSHIFT 1;

    if(op_extra_data->sidetone_method == AEC_SIDETONE_IN_SW_BY_MIC_SPKR_GRAPH)
84201406:	91 f0 70 90 	rMAC = MBS[r7 + 624];
8420140a:	88 24       	Null = rMAC - 2;
8420140c:	25 62       	if NE jump (m) Lc_build_mic_graph_27;

8420140e <Lc_build_mic_graph_21>:
    {
        /* Need internal buffer between input and output */
        intern_idx = num_io;
8420140e:	5e de       	M[FP + 44] = r4;
        num_io    += num_mics;
84201410:	56 0c       	r4 = r8 + r4;

        /* sidetone output */
        st_idx        = num_io;
84201412:	46 de       	M[FP + 32] = r4;
        num_io++;

        st_rs_idx = st_idx;
84201414:	4e de       	M[FP + 36] = r4;
        intern_idx = num_io;
        num_io    += num_mics;

        /* sidetone output */
        st_idx        = num_io;
        num_io++;
84201416:	76 20       	r4 = r4 + 1;

        st_rs_idx = st_idx;
        if(op_extra_data->mic_rate!=op_extra_data->spkr_rate)
84201418:	91 f0 66 88 	rMAC = M[r7 + 408];
8420141c:	92 f0 6e 88 	r0 = M[r7 + 440];
84201420:	88 04       	Null = rMAC - r0;
84201422:	2e 60       	if EQ jump (m) Lc_build_mic_graph_32;

84201424 <Lc_build_mic_graph_22>:
        {
            /* Sidetone is inplace */
            st_rs_idx = intern_idx;
84201424:	59 d8       	rMAC = M[FP + 44];
84201426:	49 de       	M[FP + 36] = rMAC;
84201428:	2b 6e       	jump (m) Lc_build_mic_graph_32;

8420142a <Lc_build_mic_graph_23>:
            goto aFailed;
        }
        cbops_append_operator_to_graph(mic_graph,op_ptr);

    }
    else if(intern_idx != 0)
8420142a:	59 d8       	rMAC = M[FP + 44];
8420142c:	ed 60       	if EQ jump (m) Lc_build_mic_graph_61;

8420142e <Lc_build_mic_graph_24>:
    {
        /* Otherwise, just copy data to next section */
        op_ptr = create_shift_op(num_mics, idxs, &idxs[intern_idx], op_extra_data->mic_shift);
8420142e:	95 f0 6d 88 	r3 = M[r7 + 436];
84201432:	5a d8       	r0 = M[FP + 44];
84201434:	54 d8       	r2 = M[FP + 40];
84201436:	52 54       	r0 = r0 LSHIFT 2;
84201438:	23 00       	r1 = r2 + Null;
8420143a:	14 01       	r2 = r0 + r2;
8420143c:	52 08       	r0 = r8 + Null;
8420143e:	ff fd 24 f1 	call (m) 0x25e08;
84201442:	2b ee 
84201444:	16 00       	r4 = r0 + Null;
        if(!op_ptr)
84201446:	cb 62       	if NE jump (m) Lc_build_mic_graph_59;

84201448 <Lc_build_mic_graph_25>:

    return(TRUE);
  aFailed:
    DEBUG_GRAPHS("AEC REFERENCE: Building mic graph, Failed!");

    pfree(idxs);
84201448:	52 d8       	r0 = M[FP + 40];
8420144a:	ff fd 1d f0 	call (m) 0x4f62;
8420144e:	39 e8 

84201450 <Lc_build_mic_graph_26>:
        if(!op_extra_data->sidetone_buf)
        {
            /* Not going ahead with creating mic graph if we
             * cannot create shared buffer for sidetone path.
             */
            return FALSE;
84201450:	02 00       	r0 = Null + Null;
84201452:	0f f0 81 e4 	jump (m) Lc_build_mic_graph_66;

84201456 <Lc_build_mic_graph_27>:
            /* Sidetone is inplace */
            st_rs_idx = intern_idx;
        }
    }
    else if( (op_extra_data->mic_rate_ability==RATEMATCHING_SUPPORT_SW) &&
             (op_extra_data->mic_rate!=op_extra_data->output_rate))
84201456:	91 f0 67 88 	rMAC = M[r7 + 412];
8420145a:	48 24       	Null = rMAC - 1;
8420145c:	0a 62       	if NE jump (m) Lc_build_mic_graph_30;

8420145e <Lc_build_mic_graph_28>:
8420145e:	91 f0 66 88 	rMAC = M[r7 + 408];
84201462:	92 f0 65 88 	r0 = M[r7 + 404];
84201466:	88 04       	Null = rMAC - r0;
84201468:	0b 60       	if EQ jump (m) Lc_build_mic_graph_32;

8420146a <Lc_build_mic_graph_29>:
    {
        /* Need internal buffer between input and output */
        intern_idx = num_io;
8420146a:	5e de       	M[FP + 44] = r4;
        num_io    += num_mics;
8420146c:	56 0c       	r4 = r8 + r4;
8420146e:	08 6e       	jump (m) Lc_build_mic_graph_32;

84201470 <Lc_build_mic_graph_30>:
    }
    else if (op_extra_data->mic_rate!=op_extra_data->output_rate)
84201470:	91 f0 66 88 	rMAC = M[r7 + 408];
84201474:	92 f0 65 88 	r0 = M[r7 + 404];
84201478:	88 04       	Null = rMAC - r0;
8420147a:	02 60       	if EQ jump (m) Lc_build_mic_graph_32;

8420147c <Lc_build_mic_graph_31>:
    {
        /* No ratematching or sidetone.  Just resampling  */
        intern_idx = 0;
8420147c:	58 de       	M[FP + 44] = Null;

8420147e <Lc_build_mic_graph_32>:
    }

    idxs = create_default_indexes(num_io);
8420147e:	32 00       	r0 = r4 + Null;
84201480:	ff fd ad f0 	call (m) 0x16f08;
84201484:	29 e4 
84201486:	52 de       	M[FP + 40] = r0;
    if(idxs == NULL)
84201488:	11 00       	rMAC = r0 + Null;
8420148a:	e3 61       	if EQ jump (m) Lc_build_mic_graph_26;

8420148c <Lc_build_mic_graph_33>:
    {
        return(FALSE);
    }

    /* Allocate mic graph */
    mic_graph = cbops_alloc_graph(num_io);
8420148c:	32 00       	r0 = r4 + Null;
8420148e:	ff fd ac f0 	call (m) 0x16d76;
84201492:	29 e7 
84201494:	13 09       	r9 = r0 + Null;
    if(!mic_graph)
84201496:	d9 61       	if EQ jump (m) Lc_build_mic_graph_25;

84201498 <Lc_build_mic_graph_34>:
    {
        goto aFailed;
    }
    op_extra_data->mic_graph = mic_graph;
84201498:	9b f0 6a 8e 	M[r7 + 424] = r9;

    /* Setup IO Buffers*/
    for(j=0,i=0;(j<MAX_NUMBER_MICS);j++)
8420149c:	07 00       	r5 = Null + Null;
8420149e:	06 00       	r4 = Null + Null;
842014a0:	04 6e       	jump (m) Lc_build_mic_graph_36;

842014a2 <Lc_build_mic_graph_35>:
}


inline static unsigned MicrophoneTerminalByIndex(unsigned i)
{
    if(i<4)
842014a2:	30 25       	Null = r4 - 4;
842014a4:	02 f0 91 e0 	if C jump (m) Lc_build_mic_graph_37;

842014a8 <Lc_build_mic_graph_36>:
    {
        return (i + AEC_REF_MIC_TERMINAL1);
842014a8:	b2 20       	r0 = r4 + 2;
    {
        tCbuffer    *buffer_ptr_src,*buffer_ptr_snk;
        /* MICs may not be consecutive */
        buffer_ptr_src = op_extra_data->input_stream[MicrophoneTerminalByIndex(j)];
842014aa:	52 54       	r0 = r0 LSHIFT 2;
842014ac:	95 f0 02 e8 	r3 = M[r7 + r0];

inline static unsigned OutputTerminalByIndex(unsigned i)
{
    if(i<4)
    {
        return (i + AEC_REF_OUTPUT_TERMINAL1);
842014b0:	f2 20       	r0 = r4 + 3;
842014b2:	06 6e       	jump (m) Lc_build_mic_graph_38;

842014b4 <Lc_build_mic_graph_37>:
    {
        return (i + AEC_REF_MIC_TERMINAL1);
    }
    else
    {
        return ((i-4)+ AEC_REF_MIC_TERMINAL5);
842014b4:	32 22       	r0 = r4 + 8;
842014b6:	52 54       	r0 = r0 LSHIFT 2;
842014b8:	95 f0 02 e8 	r3 = M[r7 + r0];
    {
        return (i + AEC_REF_OUTPUT_TERMINAL1);
    }
    else
    {
        return ((i-4) + AEC_REF_OUTPUT_TERMINAL5);
842014bc:	72 22       	r0 = r4 + 9;

842014be <Lc_build_mic_graph_38>:
        buffer_ptr_snk = op_extra_data->output_stream[OutputTerminalByIndex(j)];
842014be:	91 f0 40 20 	rMAC = r7 + 64;
842014c2:	52 54       	r0 = r0 LSHIFT 2;
842014c4:	18 f0 02 e8 	r6 = M[rMAC + r0];
        if(buffer_ptr_src && buffer_ptr_snk && (i < num_mics))
842014c8:	28 04       	Null = r3 - Null;
842014ca:	17 60       	if EQ jump (m) Lc_build_mic_graph_42;

842014cc <Lc_build_mic_graph_39>:
842014cc:	0f f8 00 c2 	Null = r6 - Null;
842014d0:	14 60       	if EQ jump (m) Lc_build_mic_graph_42;

842014d2 <Lc_build_mic_graph_40>:
842014d2:	af f7 00 c2 	Null = r5 - r8;
842014d6:	02 f0 a3 e0 	if C jump (m) Lc_build_mic_graph_42;

842014da <Lc_build_mic_graph_41>:
        {
            /* Inputs */
            cbops_set_input_io_buffer(mic_graph,i,0,buffer_ptr_src);
842014da:	04 00       	r2 = Null + Null;
842014dc:	3b 00       	r1 = r5 + Null;
842014de:	5a 08       	r0 = r9 + Null;
842014e0:	ff fd ac f0 	call (m) 0x16e02;
842014e4:	23 e9 
            /* Outputs */
            cbops_set_output_io_buffer(mic_graph,out_idx+i,out_idx,buffer_ptr_snk);
842014e6:	7f fa 03 c0 	r1 = r8 + r5;
842014ea:	45 08       	r3 = r6 + Null;
842014ec:	54 08       	r2 = r8 + Null;
842014ee:	5a 08       	r0 = r9 + Null;
842014f0:	ff fd ac f0 	call (m) 0x16e34;
842014f4:	25 ea 
            i++;
842014f6:	7f 20       	r5 = r5 + 1;

842014f8 <Lc_build_mic_graph_42>:
        goto aFailed;
    }
    op_extra_data->mic_graph = mic_graph;

    /* Setup IO Buffers*/
    for(j=0,i=0;(j<MAX_NUMBER_MICS);j++)
842014f8:	76 20       	r4 = r4 + 1;
842014fa:	30 26       	Null = r4 - 8;
842014fc:	d3 65       	if NC jump (m) Lc_build_mic_graph_35;

842014fe <Lc_build_mic_graph_43>:
            cbops_set_output_io_buffer(mic_graph,out_idx+i,out_idx,buffer_ptr_snk);
            i++;
        }
    }

    if(intern_idx > out_idx)
842014fe:	59 d8       	rMAC = M[FP + 44];
84201500:	af f1 00 c2 	Null = rMAC - r8;
84201504:	09 f0 a9 e0 	if LS jump (m) Lc_build_mic_graph_47;

84201508 <Lc_build_mic_graph_44>:
    {
        for(i=0;i<num_mics;i++)
84201508:	06 00       	r4 = Null + Null;
8420150a:	97 f0 84 20 	r5 = r7 + 132;

8420150e <Lc_build_mic_graph_45>:
8420150e:	af f6 00 c2 	Null = r4 - r8;
84201512:	02 f0 9b e0 	if C jump (m) Lc_build_mic_graph_47;

84201516 <Lc_build_mic_graph_46>:
        {
            cbops_set_internal_io_buffer(mic_graph,intern_idx+i,intern_idx,op_extra_data->scratch_bufs[i]);
84201516:	3d e8       	r3 = M[r5 + Null];
84201518:	59 d8       	rMAC = M[FP + 44];
8420151a:	0c 00       	r2 = rMAC + Null;
8420151c:	73 00       	r1 = r4 + rMAC;
8420151e:	5a 08       	r0 = r9 + Null;
84201520:	ff fd ac f0 	call (m) 0x16e66;
84201524:	27 ea 
        }
    }

    if(intern_idx > out_idx)
    {
        for(i=0;i<num_mics;i++)
84201526:	76 20       	r4 = r4 + 1;
84201528:	3f 21       	r5 = r5 + 4;
8420152a:	f2 6f       	jump (m) Lc_build_mic_graph_45;

8420152c <Lc_build_mic_graph_47>:
        {
            cbops_set_internal_io_buffer(mic_graph,intern_idx+i,intern_idx,op_extra_data->scratch_bufs[i]);
        }
    }

    op_extra_data->mic_rate_adjustment = 0;
8420152c:	90 f0 69 8e 	M[r7 + 420] = Null;

    /* create rate monitor op if required */
    op_ptr = NULL;
    if(op_extra_data->mic_rate_ability == RATEMATCHING_SUPPORT_HW)
84201530:	91 f0 67 88 	rMAC = M[r7 + 412];
84201534:	88 24       	Null = rMAC - 2;
84201536:	13 62       	if NE jump (m) Lc_build_mic_graph_51;

84201538 <Lc_build_mic_graph_48>:
    {
        /* With HW rate adjustmen we always need rate monitor,
         * except when we are syncing MIC to REF.
         */
        if(!op_extra_data->mic_sync_enable)
84201538:	90 f0 d4 88 	Null = M[r7 + 848];
8420153c:	2c 62       	if NE jump (m) Lc_build_mic_graph_55;

8420153e <Lc_build_mic_graph_49>:
        {
            op_ptr = create_rate_monitor_operator(op_extra_data->task_frequency, 0);
8420153e:	92 f0 92 88 	r0 = M[r7 + 584];
84201542:	03 00       	r1 = Null + Null;
84201544:	0b f0 25 e2 	call (m) $_create_rate_monitor_operator;
84201548:	16 00       	r4 = r0 + Null;
            if(!op_ptr)
8420154a:	7f 61       	if EQ jump (m) Lc_build_mic_graph_25;

8420154c <Lc_build_mic_graph_50>:
            {
                goto aFailed;
            }
            rate_monitor_op_initialise(op_ptr,op_extra_data->mic_rate,TRUE,3*MS_PER_SEC);
8420154c:	05 f0 b8 53 	r3 = Null + 3000;
84201550:	44 20       	r2 = Null + 1;
84201552:	93 f0 66 88 	r1 = M[r7 + 408];
84201556:	f5 ff 26 e6 	call $_rate_monitor_op_initialise;
8420155a:	16 6e       	jump (m) Lc_build_mic_graph_54;

8420155c <Lc_build_mic_graph_51>:
        }
    }
    else if(!is_override_ep_locally_clocked(op_extra_data->mic_endpoint))
8420155c:	92 f0 7f 88 	r0 = M[r7 + 508];
84201560:	ff fd 1a f0 	call (m) 0x4a8c;
84201564:	2d e9 
84201566:	10 04       	Null = r0 - Null;
84201568:	16 62       	if NE jump (m) Lc_build_mic_graph_55;

8420156a <Lc_build_mic_graph_52>:
    {
        /* With SW rate adjustment we need rate monitor if mic isn't locally clocked */
        op_ptr = create_rate_monitor_operator(op_extra_data->task_frequency, 0);
8420156a:	92 f0 92 88 	r0 = M[r7 + 584];
8420156e:	03 00       	r1 = Null + Null;
84201570:	0b f0 39 e0 	call (m) $_create_rate_monitor_operator;
84201574:	16 00       	r4 = r0 + Null;
        if(!op_ptr)
84201576:	69 61       	if EQ jump (m) Lc_build_mic_graph_25;

84201578 <Lc_build_mic_graph_53>:
        {
            goto aFailed;
        }
        rate_monitor_op_initialise(op_ptr,op_extra_data->mic_rate, FALSE,
                                    100*MILLISECOND/MILLISECOND);
84201578:	05 f0 64 40 	r3 = Null + 100;
8420157c:	93 f0 66 88 	r1 = M[r7 + 408];
84201580:	04 00       	r2 = Null + Null;
84201582:	f5 ff 3a e4 	call $_rate_monitor_op_initialise;

84201586 <Lc_build_mic_graph_54>:
    }
    if(NULL != op_ptr)
    {
        /* insert rate monitor op into the graph */
        op_extra_data->mic_rate_monitor_op = op_ptr;
84201586:	96 f0 6b 8e 	M[r7 + 428] = r4;
        cbops_append_operator_to_graph(mic_graph,op_ptr);
8420158a:	33 00       	r1 = r4 + Null;
8420158c:	5a 08       	r0 = r9 + Null;
8420158e:	ff fd ac f0 	call (m) 0x16e96;
84201592:	29 e8 

84201594 <Lc_build_mic_graph_55>:
    /* Handle input */
    if(op_extra_data->mic_rate_ability == RATEMATCHING_SUPPORT_SW
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
       && (0 == op_extra_data->mic_ext_rate_adjust_op)
#endif
       )
84201594:	91 f0 67 88 	rMAC = M[r7 + 412];
84201598:	48 24       	Null = rMAC - 1;
8420159a:	48 63       	if NE jump (m) Lc_build_mic_graph_23;

8420159c <Lc_build_mic_graph_56>:
8420159c:	90 f0 ad 88 	Null = M[r7 + 692];
842015a0:	45 63       	if NE jump (m) Lc_build_mic_graph_23;

842015a2 <Lc_build_mic_graph_57>:
    {
        /* Apply Software Rate Adjustment */
        op_ptr = create_sw_rate_adj_op(num_mics, idxs, &idxs[intern_idx],
                                       CBOPS_RATEADJUST_COEFFS,
                                       &op_extra_data->mic_rate_adjustment, op_extra_data->mic_shift);
842015a2:	91 f0 6d 88 	rMAC = M[r7 + 436];
842015a6:	09 1c       	pushm <rMAC>;
842015a8:	01 f0 a4 ff 	push r7 + 420;
842015ac:	19 cf 
842015ae:	85 2a       	r3 = Null + 26;
842015b0:	5a d8       	r0 = M[FP + 44];
842015b2:	54 d8       	r2 = M[FP + 40];
842015b4:	52 54       	r0 = r0 LSHIFT 2;
842015b6:	23 00       	r1 = r2 + Null;
842015b8:	14 01       	r2 = r0 + r2;
842015ba:	52 08       	r0 = r8 + Null;
842015bc:	ff fd ab f0 	call (m) 0x16bea;
842015c0:	2f e1 
842015c2:	7e 4c       	SP = SP + -8;
842015c4:	16 00       	r4 = r0 + Null;
        if(!op_ptr)
842015c6:	41 61       	if EQ jump (m) Lc_build_mic_graph_25;

842015c8 <Lc_build_mic_graph_58>:
        {
            goto aFailed;
        }

        op_extra_data->mic_sw_rateadj_op=op_ptr;
842015c8:	96 f0 7d 8e 	M[r7 + 500] = r4;
        cbops_rateadjust_passthrough_mode(op_ptr,(op_extra_data->mic_rate_enactment==RATEMATCHING_SUPPORT_NONE)?TRUE:FALSE);
842015cc:	03 00       	r1 = Null + Null;
842015ce:	90 f0 68 88 	Null = M[r7 + 416];
842015d2:	20 f0 43 ce 	if EQ r1 = Null + 1;
842015d6:	ff fd ab f0 	call (m) 0x16c96;
842015da:	21 e6 

842015dc <Lc_build_mic_graph_59>:

        cbops_append_operator_to_graph(mic_graph,op_ptr);
842015dc:	33 00       	r1 = r4 + Null;
842015de:	5a 08       	r0 = r9 + Null;
842015e0:	ff fd ac f0 	call (m) 0x16e96;
842015e4:	37 e5 

        /* Early DC remove on mic path. Before Sidetone split so the signal split
           to the speaker doesn't have DC */
        op_ptr = create_dc_remove_op(num_mics, &idxs[intern_idx], &idxs[intern_idx]);
842015e6:	5a d8       	r0 = M[FP + 44];
842015e8:	53 d8       	r1 = M[FP + 40];
842015ea:	52 54       	r0 = r0 LSHIFT 2;
842015ec:	d3 00       	r1 = r0 + r1;
842015ee:	1c 00       	r2 = r1 + Null;
842015f0:	52 08       	r0 = r8 + Null;
842015f2:	ff fd 24 f1 	call (m) 0x25e40;
842015f6:	2f e2 
        if(!op_ptr)
842015f8:	10 04       	Null = r0 - Null;
842015fa:	27 61       	if EQ jump (m) Lc_build_mic_graph_25;

842015fc <Lc_build_mic_graph_60>:
        {
            goto aFailed;
        }
        cbops_append_operator_to_graph(mic_graph,op_ptr);
842015fc:	13 00       	r1 = r0 + Null;
842015fe:	5a 08       	r0 = r9 + Null;
84201600:	ff fd ac f0 	call (m) 0x16e96;
84201604:	37 e4 

84201606 <Lc_build_mic_graph_61>:
        }
        cbops_append_operator_to_graph(mic_graph,op_ptr);
    }

    /* Handle output */
    if(op_extra_data->mic_rate!=op_extra_data->output_rate)
84201606:	95 f0 66 88 	r3 = M[r7 + 408];
8420160a:	92 f0 65 88 	r0 = M[r7 + 404];
8420160e:	a8 04       	Null = r3 - r0;
84201610:	f0 ff a1 e9 	if EQ jump (m) Lc_build_mic_graph_5;

84201614 <Lc_build_mic_graph_62>:
    {
        /* If only operator then shift input to output */
        unsigned shift_amount = (intern_idx != 0) ? 0 :  op_extra_data->mic_shift;
84201614:	59 d8       	rMAC = M[FP + 44];
84201616:	03 60       	if EQ jump (m) Lc_build_mic_graph_64;

84201618 <Lc_build_mic_graph_63>:
84201618:	01 00       	rMAC = Null + Null;
8420161a:	03 6e       	jump (m) Lc_build_mic_graph_65;

8420161c <Lc_build_mic_graph_64>:
8420161c:	91 f0 6d 88 	rMAC = M[r7 + 436];

84201620 <Lc_build_mic_graph_65>:

        /*  Add Resampler Operators per channel (mic_rate --> output_rate) */
        op_ptr = create_iir_resamplerv2_op(num_mics, &idxs[intern_idx], &idxs[out_idx],
                                           op_extra_data->mic_rate,op_extra_data->output_rate,
                                           op_extra_data->resampler_temp_buffer_size,
                                           op_extra_data->resampler_temp_buffer, shift_amount, 0, 0);
84201620:	00 f0 30 cf 	push Null;
84201624:	00 f0 30 cf 	push Null;
84201628:	09 1c       	pushm <rMAC>;
8420162a:	91 f0 32 88 	rMAC = M[r7 + 200];
8420162e:	09 1c       	pushm <rMAC>;
84201630:	91 f0 91 88 	rMAC = M[r7 + 580];
84201634:	0a 1c       	pushm <rMAC, r0>;
84201636:	01 fa d2 c8 	r0 = r8 LSHIFT 2;
8420163a:	54 d8       	r2 = M[FP + 40];
8420163c:	23 00       	r1 = r2 + Null;
8420163e:	14 01       	r2 = r0 + r2;
84201640:	5a d8       	r0 = M[FP + 44];
84201642:	52 54       	r0 = r0 LSHIFT 2;
84201644:	d3 00       	r1 = r0 + r1;
84201646:	52 08       	r0 = r8 + Null;
84201648:	0a f0 2d ee 	call (m) $_create_iir_resamplerv2_op;
8420164c:	7a 4c       	SP = SP + -24;
8420164e:	ff ff 81 e9 	jump (m) Lc_build_mic_graph_7;

84201652 <Lc_build_mic_graph_66>:
  aFailed:
    DEBUG_GRAPHS("AEC REFERENCE: Building mic graph, Failed!");

    pfree(idxs);
    return(FALSE);
}
84201652:	f6 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84201654:	d8 4c       	rts;

84201656 <$_build_spkr_graph>:
 *       depending on the connections and microphone state, however they
 *       aren't included by this function, instead they are added to the
 *       speaker graph later.
 */
bool build_spkr_graph(AEC_REFERENCE_OP_DATA *op_extra_data)
{
84201656:	f6 1e       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x20;
84201658:	13 09       	r9 = r0 + Null;
    cbops_op    *overrid_op_ptr;
    unsigned    num_io;
    tCbuffer    *buffer_ptr;
    unsigned    *idxs;
    unsigned    out_indx,intern_ins_idx,intern_rs_idx,intern_rm_idx;
    unsigned    spkr_channel_status = GetSpkrChannelStatus(op_extra_data);
8420165a:	b2 f0 76 88 	r0 = M[r9 + 472];
8420165e:	21 f1 f0 1f 	rMAC = r0 AND 0x3ff0;
         "Sidetone Mix" is added/removed to/from the graph by aec_reference_spkr_include_sidetone function.
         "Reference sub-path" is added/removed to/from the graph by aec_reference_spkr_include_ref_path function.

    **********************************************************************/
    /* Is there a Speaker path */
    if(!(op_extra_data->channel_status&CHAN_STATE_SPKR_MASK))
84201662:	22 f0 f0 0f 	r0 = r0 AND 0xff0;
84201666:	42 60       	if EQ jump (m) Lc_build_spkr_graph_10;

84201668 <Lc_build_spkr_graph_2>:
    {
        return(TRUE);
    }

    /* Determine IO configuration */
    num_spkrs  = op_extra_data->num_spkr_channels;
84201668:	b9 f0 77 88 	r7 = M[r9 + 476];
8420166c:	e9 f0 08 8e 	M[FP + 32] = r7;
    num_inputs = op_extra_data->num_spkr_channels;
    if(!(spkr_channel_status&AEC_REFERENCE_CONSTANT_CONN_TYPE_PARA))
84201670:	ca c5       	r0 = rMAC AND 0x1000;
84201672:	40 62       	if NE jump (m) Lc_build_spkr_graph_12;

84201674 <Lc_build_spkr_graph_3>:
    {
        if(spkr_channel_status&AEC_REFERENCE_CONSTANT_CONN_TYPE_MIX)
84201674:	11 f1 00 00 	rMAC = rMAC AND 0x2000;
84201678:	3c 60       	if EQ jump (m) Lc_build_spkr_graph_11;

8420167a <Lc_build_spkr_graph_4>:
        {
            /* Multiple inputs, mono output */
            num_spkrs=1;
8420167a:	41 20       	rMAC = Null + 1;
8420167c:	41 de       	M[FP + 32] = rMAC;
8420167e:	3a 6e       	jump (m) Lc_build_spkr_graph_12;

84201680 <Lc_build_spkr_graph_5>:
        {
            goto aFailed;
        }
        rate_monitor_op_initialise(op_ptr,op_extra_data->spkr_rate, TRUE, 3*MS_PER_SEC);
    }
    else if(!is_override_ep_locally_clocked(op_extra_data->spkr_endpoint))
84201680:	b2 f0 80 88 	r0 = M[r9 + 512];
84201684:	ff fd 1a f0 	call (m) 0x4a8c;
84201688:	29 e0 
8420168a:	10 04       	Null = r0 - Null;
8420168c:	22 62       	if NE jump (m) Lc_build_spkr_graph_9;

8420168e <Lc_build_spkr_graph_6>:
    {
        /* With SW rate adjustment we need rate monitor if speaker isn't locally clocked */
        op_ptr = create_rate_monitor_operator(op_extra_data->task_frequency, 0);
8420168e:	b2 f0 92 88 	r0 = M[r9 + 584];
84201692:	03 00       	r1 = Null + Null;
84201694:	0a f0 35 e7 	call (m) $_create_rate_monitor_operator;
84201698:	16 00       	r4 = r0 + Null;
        if(!op_ptr)
8420169a:	89 60       	if EQ jump (m) Lc_build_spkr_graph_27;

8420169c <Lc_build_spkr_graph_7>:
        {
            goto aFailed;
        }
        rate_monitor_op_initialise(op_ptr,op_extra_data->spkr_rate, FALSE,
                                    100*MILLISECOND/MILLISECOND);
8420169c:	05 f0 64 40 	r3 = Null + 100;
842016a0:	b3 f0 6e 88 	r1 = M[r9 + 440];
842016a4:	04 00       	r2 = Null + Null;
842016a6:	f4 ff 36 eb 	call $_rate_monitor_op_initialise;

842016aa <Lc_build_spkr_graph_8>:
    if(NULL != op_ptr)
    {
#ifdef AEC_REF_CALC_SPKR_RATE_MONITOR_AMOUNT
    /*  directly pass new amount read by speaker to the operator */
    op_extra_data->spkr_last_offset =
        cbuffer_get_read_mmu_offset(op_extra_data->output_stream[AEC_REF_SPKR_TERMINAL1]);
842016aa:	b2 f0 11 88 	r0 = M[r9 + 68];
842016ae:	ff fd 89 f0 	call (m) 0x12a28;
842016b2:	3b eb 
842016b4:	b2 f0 d1 8e 	M[r9 + 836] = r0;
    set_rate_monitor_new_amount_ptr(op_ptr, &op_extra_data->spkr_new_amount);
842016b8:	b3 f0 48 23 	r1 = r9 + 840;
842016bc:	32 00       	r0 = r4 + Null;
842016be:	f4 ff 22 ea 	call $_set_rate_monitor_new_amount_ptr;
#endif
        /* insert rate monitor op into the graph */
        op_extra_data->spkr_rate_monitor_op = op_ptr;
842016c2:	b6 f0 73 8e 	M[r9 + 460] = r4;
        cbops_append_operator_to_graph(spkr_graph, op_ptr);
842016c6:	33 00       	r1 = r4 + Null;
842016c8:	52 08       	r0 = r8 + Null;
842016ca:	ff fd ab f0 	call (m) 0x16e96;
842016ce:	2d ee 

842016d0 <Lc_build_spkr_graph_9>:
    }

#ifdef AEC_REF_CALC_SPKR_RATE_MONITOR_AMOUNT
    /* Reset flag showing speaker started to consume data */
    op_extra_data->spkr_flow_started = FALSE;
842016d0:	b0 f0 d3 8e 	M[r9 + 844] = Null;

#ifdef ENABLE_SW_DAC_DC_OFFSET_COMPENSATION
#ifndef RUNNING_ON_KALSIM    
    /* compensate for HW dc offset addition */
    op_extra_data->spkr_dc_offset_op =
        setup_cbops_dc_offset_compensation(spkr_graph, op_extra_data->task_frequency);
842016d4:	b3 f0 92 88 	r1 = M[r9 + 584];
842016d8:	52 08       	r0 = r8 + Null;
842016da:	0d f0 27 e4 	call (m) $_setup_cbops_dc_offset_compensation;
842016de:	b2 f0 9e 8e 	M[r9 + 632] = r0;
#endif    
#endif
    pfree(idxs);
842016e2:	4a d8       	r0 = M[FP + 36];
842016e4:	ff fd 1c f0 	call (m) 0x4f62;
842016e8:	3f e3 

842016ea <Lc_build_spkr_graph_10>:

    **********************************************************************/
    /* Is there a Speaker path */
    if(!(op_extra_data->channel_status&CHAN_STATE_SPKR_MASK))
    {
        return(TRUE);
842016ea:	42 20       	r0 = Null + 1;
842016ec:	0f f0 8f e7 	jump (m) Lc_build_spkr_graph_77;

842016f0 <Lc_build_spkr_graph_11>:
            num_spkrs=1;
        }
        else
        {
            /* Mono input, multiple outputs */
            num_inputs=1;
842016f0:	09 71       	r7 = Null + 1;

842016f2 <Lc_build_spkr_graph_12>:
        }
    }

    /* outputs follow inputs */
    /* Internal buffers for output of insert follow outputs */
    out_indx       = num_inputs;
842016f2:	e9 f0 0a 8e 	M[FP + 40] = r7;

    /* Count the buffers needed */
    num_io         = num_inputs+num_spkrs;
842016f6:	41 d8       	rMAC = M[FP + 32];
842016f8:	49 0c       	rMAC = r7 + rMAC;

    /* Assume no resampler or rate matching */
    intern_rs_idx = 0;
842016fa:	58 de       	M[FP + 44] = Null;
    intern_rm_idx = 0;
842016fc:	60 de       	M[FP + 48] = Null;
    intern_ins_idx = 0;
842016fe:	68 de       	M[FP + 52] = Null;

    /* reserve one index for sidetone input buffer */
    op_extra_data->spkr_st_in_idx = num_io;
84201700:	b1 f0 a5 8e 	M[r9 + 660] = rMAC;
    num_io++;
84201704:	49 20       	rMAC = rMAC + 1;
84201706:	71 de       	M[FP + 56] = rMAC;

    /* Check if resampler is required */
    if(op_extra_data->input_rate!=op_extra_data->spkr_rate)
84201708:	b1 f0 64 88 	rMAC = M[r9 + 400];
8420170c:	b2 f0 6e 88 	r0 = M[r9 + 440];
84201710:	88 04       	Null = rMAC - r0;
84201712:	35 60       	if EQ jump (m) Lc_build_spkr_graph_22;

84201714 <Lc_build_spkr_graph_13>:
    {
        intern_rs_idx = out_indx;
84201714:	e9 f0 0b 8e 	M[FP + 44] = r7;

        if(op_extra_data->spkr_rate_ability==RATEMATCHING_SUPPORT_SW)
84201718:	b1 f0 6f 88 	rMAC = M[r9 + 444];
8420171c:	48 24       	Null = rMAC - 1;
8420171e:	19 62       	if NE jump (m) Lc_build_spkr_graph_19;

84201720 <Lc_build_spkr_graph_14>:
        {
            /* Need buffers following resampler */
            intern_rs_idx    = num_io;
84201720:	71 d8       	rMAC = M[FP + 56];
84201722:	59 de       	M[FP + 44] = rMAC;
            if(num_spkrs>num_inputs)
84201724:	41 d8       	rMAC = M[FP + 32];
84201726:	9f f1 00 c2 	Null = rMAC - r7;
8420172a:	09 f0 cb e0 	if LS jump (m) Lc_build_spkr_graph_21;

8420172e <Lc_build_spkr_graph_15>:
            {
                /* Resampler is Mono.  Feeds shift */
                num_io++;
8420172e:	71 d8       	rMAC = M[FP + 56];
84201730:	49 20       	rMAC = rMAC + 1;
84201732:	71 de       	M[FP + 56] = rMAC;

84201734 <Lc_build_spkr_graph_16>:
    if(op_extra_data->spkr_rate_ability == RATEMATCHING_SUPPORT_SW
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
       /* not required if having access to external rate adjust op */
       && (0 == op_extra_data->spkr_ext_rate_adjust_op)
#endif
       )
84201734:	b0 f0 ae 88 	Null = M[r9 + 696];
84201738:	0c 62       	if NE jump (m) Lc_build_spkr_graph_19;

8420173a <Lc_build_spkr_graph_17>:
    {
        intern_rm_idx = out_indx;
8420173a:	e9 f0 0c 8e 	M[FP + 48] = r7;
        /* Split needs buffer following rate matching (Mono)*/
        if(num_spkrs>num_inputs)
8420173e:	41 d8       	rMAC = M[FP + 32];
84201740:	9f f1 00 c2 	Null = rMAC - r7;
84201744:	09 f0 8d e0 	if LS jump (m) Lc_build_spkr_graph_19;

84201748 <Lc_build_spkr_graph_18>:
        {
            intern_rm_idx = num_io;
84201748:	71 d8       	rMAC = M[FP + 56];
8420174a:	61 de       	M[FP + 48] = rMAC;
            num_io++;
8420174c:	49 20       	rMAC = rMAC + 1;
8420174e:	71 de       	M[FP + 56] = rMAC;

84201750 <Lc_build_spkr_graph_19>:
    /* reserve 2 indexes for reference sub-path,
     * one is for reference output buffer, the
     * other one for scratch buffer for possible
     * resampler in the sub-path.
     */
    op_extra_data->spkr_ref_idx  = num_io;
84201750:	71 d8       	rMAC = M[FP + 56];
84201752:	b1 f0 a4 8e 	M[r9 + 656] = rMAC;
    num_io +=2;
84201756:	89 20       	rMAC = rMAC + 2;
84201758:	71 de       	M[FP + 56] = rMAC;

    /* Allocate buffer index array for easy setup */
    if(num_inputs<num_spkrs)
8420175a:	41 d8       	rMAC = M[FP + 32];
8420175c:	1f f9 00 c2 	Null = r7 - rMAC;
84201760:	02 f0 a7 e0 	if C jump (m) Lc_build_spkr_graph_23;

84201764 <Lc_build_spkr_graph_20>:
    {
        idxs = create_default_indexes(num_io+num_spkrs);
84201764:	72 d8       	r0 = M[FP + 56];
84201766:	41 d8       	rMAC = M[FP + 32];
84201768:	8a 00       	r0 = rMAC + r0;
8420176a:	ff fd ab f0 	call (m) 0x16f08;
8420176e:	3f ec 
84201770:	4a de       	M[FP + 36] = r0;
84201772:	0f 6e       	jump (m) Lc_build_spkr_graph_24;

84201774 <Lc_build_spkr_graph_21>:
                num_io++;
            }
            else
            {
                /* Resampler is multi channel */
                num_io += num_inputs;
84201774:	71 d8       	rMAC = M[FP + 56];
84201776:	49 0c       	rMAC = r7 + rMAC;
84201778:	71 de       	M[FP + 56] = rMAC;
8420177a:	dd 6f       	jump (m) Lc_build_spkr_graph_16;

8420177c <Lc_build_spkr_graph_22>:
    if(op_extra_data->spkr_rate_ability == RATEMATCHING_SUPPORT_SW
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
       /* not required if having access to external rate adjust op */
       && (0 == op_extra_data->spkr_ext_rate_adjust_op)
#endif
       )
8420177c:	b1 f0 6f 88 	rMAC = M[r9 + 444];
84201780:	48 24       	Null = rMAC - 1;
84201782:	d9 61       	if EQ jump (m) Lc_build_spkr_graph_16;

84201784 <Lc_21>:
84201784:	e6 6f       	jump (m) Lc_build_spkr_graph_19;

84201786 <Lc_build_spkr_graph_23>:
    {
        idxs = create_default_indexes(num_io+num_spkrs);
    }
    else
    {
        idxs = create_default_indexes(num_io);
84201786:	72 d8       	r0 = M[FP + 56];
84201788:	ff fd ab f0 	call (m) 0x16f08;
8420178c:	21 ec 
8420178e:	4a de       	M[FP + 36] = r0;

84201790 <Lc_build_spkr_graph_24>:
    }
    if(idxs == NULL)
84201790:	49 d8       	rMAC = M[FP + 36];
84201792:	11 60       	if EQ jump (m) Lc_build_spkr_graph_28;

84201794 <Lc_build_spkr_graph_25>:
    {
        return(FALSE);
    }

    /* Allocate num_io buffers in spkr graph */
    spkr_graph = cbops_alloc_graph(num_io);
84201794:	72 d8       	r0 = M[FP + 56];
84201796:	ff fd aa f0 	call (m) 0x16d76;
8420179a:	21 ef 
8420179c:	12 09       	r8 = r0 + Null;
    if(!spkr_graph)
8420179e:	07 60       	if EQ jump (m) Lc_build_spkr_graph_27;

842017a0 <Lc_build_spkr_graph_26>:
    {
        goto aFailed;
    }
    op_extra_data->spkr_graph = spkr_graph;
842017a0:	ba f0 72 8e 	M[r9 + 456] = r8;
       Internal (after ref resample)    : scratch[num_inputs]
       REF OUT
    */

    /* Input, Output, and insert_op buffers */
    for(j=0,i=0,k=0;j<MAX_NUMBER_SPEAKERS;j++)
842017a4:	07 00       	r5 = Null + Null;
842017a6:	00 09       	r6 = Null + Null;
842017a8:	06 00       	r4 = Null + Null;
842017aa:	0b 6e       	jump (m) Lc_build_spkr_graph_30;

842017ac <Lc_build_spkr_graph_27>:

    DEBUG_GRAPHS("AEC REFERENCE: Building speaker graph, Done!" );
    return TRUE;
  aFailed:
    DEBUG_GRAPHS("AEC REFERENCE: Building speaker graph, Failed!" );
    pfree(idxs);
842017ac:	4a d8       	r0 = M[FP + 36];
842017ae:	ff fd 1b f0 	call (m) 0x4f62;
842017b2:	35 ed 

842017b4 <Lc_build_spkr_graph_28>:
    {
        idxs = create_default_indexes(num_io);
    }
    if(idxs == NULL)
    {
        return(FALSE);
842017b4:	02 00       	r0 = Null + Null;
842017b6:	0f f0 c5 e5 	jump (m) Lc_build_spkr_graph_77;

842017ba <Lc_build_spkr_graph_29>:

    /* Input, Output, and insert_op buffers */
    for(j=0,i=0,k=0;j<MAX_NUMBER_SPEAKERS;j++)
    {
        /* Inputs may not be contiguous */
        buffer_ptr =  op_extra_data->input_stream[SpeakerInputTerminalByIndex(j)];
842017ba:	b0 24       	Null = r4 - 2;
842017bc:	02 f0 89 e0 	if C jump (m) Lc_build_spkr_graph_31;

842017c0 <Lc_build_spkr_graph_30>:
842017c0:	32 00       	r0 = r4 + Null;
842017c2:	02 6e       	jump (m) Lc_build_spkr_graph_32;

842017c4 <Lc_build_spkr_graph_31>:
842017c4:	32 21       	r0 = r4 + 4;

842017c6 <Lc_build_spkr_graph_32>:
842017c6:	52 54       	r0 = r0 LSHIFT 2;
        if(buffer_ptr)
842017c8:	b5 f0 02 e8 	r3 = M[r9 + r0];
842017cc:	08 60       	if EQ jump (m) Lc_build_spkr_graph_34;

842017ce <Lc_build_spkr_graph_33>:
        {
            /* Inputs */
            cbops_set_input_io_buffer(spkr_graph,i,0,buffer_ptr);
842017ce:	04 00       	r2 = Null + Null;
842017d0:	3b 00       	r1 = r5 + Null;
842017d2:	52 08       	r0 = r8 + Null;
842017d4:	ff fd ab f0 	call (m) 0x16e02;
842017d8:	2f e1 
            i++;
842017da:	7f 20       	r5 = r5 + 1;

842017dc <Lc_build_spkr_graph_34>:
        }
        /* Outputs may not be contiguous */
        buffer_ptr =  op_extra_data->output_stream[SpeakerTerminalByIndex(j)];
842017dc:	b0 24       	Null = r4 - 2;
842017de:	02 f0 89 e0 	if C jump (m) Lc_build_spkr_graph_36;

842017e2 <Lc_build_spkr_graph_35>:
842017e2:	72 20       	r0 = r4 + 1;
842017e4:	02 6e       	jump (m) Lc_build_spkr_graph_37;

842017e6 <Lc_build_spkr_graph_36>:
842017e6:	72 21       	r0 = r4 + 5;

842017e8 <Lc_build_spkr_graph_37>:
842017e8:	b1 f0 40 20 	rMAC = r9 + 64;
842017ec:	52 54       	r0 = r0 LSHIFT 2;
        if(buffer_ptr)
842017ee:	8d e8       	r3 = M[rMAC + r0];
842017f0:	09 60       	if EQ jump (m) Lc_build_spkr_graph_39;

842017f2 <Lc_build_spkr_graph_38>:
        {
            cbops_set_output_io_buffer(spkr_graph,out_indx + k,out_indx,buffer_ptr);
842017f2:	8f f9 03 c0 	r1 = r7 + r6;
842017f6:	4c 08       	r2 = r7 + Null;
842017f8:	52 08       	r0 = r8 + Null;
842017fa:	ff fd ab f0 	call (m) 0x16e34;
842017fe:	3b e1 
            k++;
84201800:	08 75       	r6 = r6 + 1;

84201802 <Lc_build_spkr_graph_39>:
       Internal (after ref resample)    : scratch[num_inputs]
       REF OUT
    */

    /* Input, Output, and insert_op buffers */
    for(j=0,i=0,k=0;j<MAX_NUMBER_SPEAKERS;j++)
84201802:	76 20       	r4 = r4 + 1;
84201804:	30 26       	Null = r4 - 8;
84201806:	da 65       	if NC jump (m) Lc_build_spkr_graph_29;

84201808 <Lc_build_spkr_graph_40>:
            k++;
        }
    }

    /* DC remove before reference tap */
    op_ptr = create_dc_remove_op(num_inputs, idxs, idxs);
84201808:	4a 08       	r0 = r7 + Null;
8420180a:	4c d8       	r2 = M[FP + 36];
8420180c:	23 00       	r1 = r2 + Null;
8420180e:	ff fd 23 f1 	call (m) 0x25e40;
84201812:	33 e1 
84201814:	17 00       	r5 = r0 + Null;
    if(!op_ptr)
84201816:	cb 61       	if EQ jump (m) Lc_build_spkr_graph_27;

84201818 <Lc_build_spkr_graph_41>:
    {
        goto aFailed;
    }
    cbops_append_operator_to_graph(spkr_graph,op_ptr);
84201818:	3b 00       	r1 = r5 + Null;
8420181a:	52 08       	r0 = r8 + Null;
8420181c:	ff fd ab f0 	call (m) 0x16e96;
84201820:	3b e3 

    /* Thresholds for Insertion, keep a copy in main structure */
    op_extra_data->spkr_in_threshold  = frac_mult(op_extra_data->input_rate,op_extra_data->task_period_frac) + 1;
84201822:	b2 f0 64 88 	r0 = M[r9 + 400];
84201826:	b3 f0 93 88 	r1 = M[r9 + 588];
8420182a:	00 f3 72 c9 	r0 = r0 * r1 (frac);
8420182e:	51 20       	rMAC = r0 + 1;
84201830:	b1 f0 af 8e 	M[r9 + 700] = rMAC;
    op_extra_data->spkr_out_threshold = frac_mult(op_extra_data->spkr_rate,op_extra_data->task_period_frac) + 1;
84201834:	b2 f0 6e 88 	r0 = M[r9 + 440];
84201838:	b3 f0 93 88 	r1 = M[r9 + 588];
8420183c:	00 f3 72 c9 	r0 = r0 * r1 (frac);
84201840:	51 20       	rMAC = r0 + 1;
84201842:	b1 f0 b0 8e 	M[r9 + 704] = rMAC;
     * task period there will be ~(spkr_out_threshold + max_jitter) in the output buffer,
     * this is to cover a full task period plus possible scheduling uncertainties.
     * 1ms max_jitter might be enough, 0.5ms added in case sidetone mixing will run
     * in decimated task period.
     */
    unsigned max_jitter = frac_mult(op_extra_data->spkr_rate, FRACTIONAL(0.0015));
84201846:	b2 f0 6e 88 	r0 = M[r9 + 440];
8420184a:	03 f0 93 f0 	r1 = Null + 3221225;
8420184e:	e9 4a 
84201850:	00 f3 72 c9 	r0 = r0 * r1 (frac);

    overrid_op_ptr = create_aec_ref_spkr_op(num_inputs, idxs,
                                            op_extra_data->spkr_in_threshold,
                                            num_spkrs,&idxs[out_indx],
                                            op_extra_data->spkr_out_threshold,
                                            max_jitter);
84201854:	11 1c       	pushm <r0>;
84201856:	b1 f0 b0 88 	rMAC = M[r9 + 704];
8420185a:	09 1c       	pushm <rMAC>;
8420185c:	01 f9 d2 c8 	r0 = r7 LSHIFT 2;
84201860:	49 d8       	rMAC = M[FP + 36];
84201862:	0b 00       	r1 = rMAC + Null;
84201864:	51 00       	rMAC = r0 + rMAC;
84201866:	09 1c       	pushm <rMAC>;
84201868:	b4 f0 af 88 	r2 = M[r9 + 700];
8420186c:	4a 08       	r0 = r7 + Null;
8420186e:	45 d8       	r3 = M[FP + 32];
84201870:	06 f0 25 ed 	call (m) $_create_aec_ref_spkr_op;
84201874:	7d 4c       	SP = SP + -12;
#if defined(IO_DEBUG)
    insert_op  = overrid_op_ptr;
84201876:	e0 f0 02 f0 	M[Null + $_insert_op] = r0;
8420187a:	59 8e 
#endif
    if(!overrid_op_ptr)
8420187c:	10 04       	Null = r0 - Null;
8420187e:	97 61       	if EQ jump (m) Lc_build_spkr_graph_27;

84201880 <Lc_build_spkr_graph_42>:
    {
        goto aFailed;
    }

    cbops_set_override_operator(spkr_graph,overrid_op_ptr);
84201880:	13 00       	r1 = r0 + Null;
84201882:	52 08       	r0 = r8 + Null;
84201884:	ff fd ab f0 	call (m) 0x16ec2;
84201888:	3f e1 

    /* Add Mixer to section #1 if needed*/
    if(num_inputs > num_spkrs)
8420188a:	41 d8       	rMAC = M[FP + 32];
8420188c:	1f f9 00 c2 	Null = r7 - rMAC;
84201890:	09 f0 b9 e0 	if LS jump (m) Lc_build_spkr_graph_48;

84201894 <Lc_build_spkr_graph_43>:
    {
        for(i=1;i<num_inputs;i++)
84201894:	46 20       	r4 = Null + 1;

84201896 <Lc_build_spkr_graph_44>:
84201896:	9f f6 00 c2 	Null = r4 - r7;
8420189a:	02 f0 ad e0 	if C jump (m) Lc_build_spkr_graph_47;

8420189e <Lc_build_spkr_graph_45>:
        {
            /* NOTE: left scratch input reused for output (inplace) */
            /*  - Add Mix Operator - stereo to mono (left = (left+right)/2 */
            op_ptr = create_mixer_op(intern_ins_idx, intern_ins_idx+i, intern_ins_idx, 0, FRACTIONAL(0.5));
8420189e:	ff f3 ff ff 	push Null + 1073741823;
842018a2:	5f ef 
842018a4:	05 00       	r3 = Null + Null;
842018a6:	04 00       	r2 = Null + Null;
842018a8:	02 00       	r0 = Null + Null;
842018aa:	33 00       	r1 = r4 + Null;
842018ac:	ff fd 52 f1 	call (m) 0x2bcbc;
842018b0:	31 e0 
842018b2:	7f 4c       	SP = SP + -4;
842018b4:	17 00       	r5 = r0 + Null;
            if(!op_ptr)
842018b6:	7b 61       	if EQ jump (m) Lc_build_spkr_graph_27;

842018b8 <Lc_build_spkr_graph_46>:
            {
                goto aFailed;
            }
            cbops_append_operator_to_graph(spkr_graph,op_ptr);
842018b8:	3b 00       	r1 = r5 + Null;
842018ba:	52 08       	r0 = r8 + Null;
842018bc:	ff fd aa f0 	call (m) 0x16e96;
842018c0:	3b ee 
    cbops_set_override_operator(spkr_graph,overrid_op_ptr);

    /* Add Mixer to section #1 if needed*/
    if(num_inputs > num_spkrs)
    {
        for(i=1;i<num_inputs;i++)
842018c2:	76 20       	r4 = r4 + 1;
842018c4:	e9 6f       	jump (m) Lc_build_spkr_graph_44;

842018c6 <Lc_build_spkr_graph_47>:
                goto aFailed;
            }
            cbops_append_operator_to_graph(spkr_graph,op_ptr);
        }
        /* Input is now mono */
        num_inputs = 1;
842018c6:	09 71       	r7 = Null + 1;

842018c8 <Lc_build_spkr_graph_48>:
    /* This is the point where we take input for the
     * reference sub-path, store information about
     * where in the graph the reference sub-path
     * should be inserted to.
     */
    op_extra_data->spkr_ref_input_idx = intern_ins_idx;
842018c8:	b0 f0 a1 8e 	M[r9 + 644] = Null;
    op_extra_data->spkr_ref_point_op = op_ptr;
842018cc:	b7 f0 a8 8e 	M[r9 + 672] = r5;
    op_extra_data->spkr_ref_scratch_idx = num_inputs;
842018d0:	b9 f0 a2 8e 	M[r9 + 648] = r7;

    /* Add sample rate conversion per channel [num_inputs] (input_rate --> spkr_rate) */
    if(intern_rs_idx!=0)
842018d4:	59 d8       	rMAC = M[FP + 44];
842018d6:	40 60       	if EQ jump (m) Lc_build_spkr_graph_56;

842018d8 <Lc_build_spkr_graph_49>:
    {
        int shift_amount = op_extra_data->spkr_shift;
842018d8:	b1 f0 74 88 	rMAC = M[r9 + 464];

        if(intern_rs_idx!=out_indx)
842018dc:	5b d8       	r1 = M[FP + 44];
842018de:	52 d8       	r0 = M[FP + 40];
842018e0:	98 04       	Null = r1 - r0;
842018e2:	18 60       	if EQ jump (m) Lc_build_spkr_graph_54;

842018e4 <Lc_build_spkr_graph_50>:
        {
            /* Buffers for output of resampler. */
            for(i=0; i < num_inputs ; i++)
842018e4:	06 00       	r4 = Null + Null;
842018e6:	01 f9 d2 c8 	r0 = r7 LSHIFT 2;
842018ea:	59 08       	rMAC = r9 + Null;
842018ec:	51 00       	rMAC = r0 + rMAC;
842018ee:	17 f0 84 20 	r5 = rMAC + 132;

842018f2 <Lc_build_spkr_graph_51>:
842018f2:	9f f6 00 c2 	Null = r4 - r7;
842018f6:	02 f0 9b e0 	if C jump (m) Lc_build_spkr_graph_53;

842018fa <Lc_build_spkr_graph_52>:
            {
                cbops_set_internal_io_buffer(spkr_graph,intern_rs_idx+i,intern_rs_idx,op_extra_data->scratch_bufs[num_inputs+i]);
842018fa:	3d e8       	r3 = M[r5 + Null];
842018fc:	59 d8       	rMAC = M[FP + 44];
842018fe:	0c 00       	r2 = rMAC + Null;
84201900:	73 00       	r1 = r4 + rMAC;
84201902:	52 08       	r0 = r8 + Null;
84201904:	ff fd aa f0 	call (m) 0x16e66;
84201908:	23 eb 
        int shift_amount = op_extra_data->spkr_shift;

        if(intern_rs_idx!=out_indx)
        {
            /* Buffers for output of resampler. */
            for(i=0; i < num_inputs ; i++)
8420190a:	76 20       	r4 = r4 + 1;
8420190c:	3f 21       	r5 = r5 + 4;
8420190e:	f2 6f       	jump (m) Lc_build_spkr_graph_51;

84201910 <Lc_build_spkr_graph_53>:
            {
                cbops_set_internal_io_buffer(spkr_graph,intern_rs_idx+i,intern_rs_idx,op_extra_data->scratch_bufs[num_inputs+i]);
            }
            shift_amount=0;
84201910:	01 00       	rMAC = Null + Null;

84201912 <Lc_build_spkr_graph_54>:
        }

        op_ptr = create_iir_resamplerv2_op(num_inputs, &idxs[intern_ins_idx], &idxs[intern_rs_idx],
                                           op_extra_data->input_rate, op_extra_data->spkr_rate,
                                           op_extra_data->resampler_temp_buffer_size,
                                           op_extra_data->resampler_temp_buffer, shift_amount, 0, 0);
84201912:	00 f0 30 cf 	push Null;
84201916:	00 f0 30 cf 	push Null;
8420191a:	09 1c       	pushm <rMAC>;
8420191c:	b1 f0 32 88 	rMAC = M[r9 + 200];
84201920:	09 1c       	pushm <rMAC>;
84201922:	b1 f0 91 88 	rMAC = M[r9 + 580];
84201926:	09 1c       	pushm <rMAC>;
84201928:	b1 f0 6e 88 	rMAC = M[r9 + 440];
8420192c:	09 1c       	pushm <rMAC>;
8420192e:	b5 f0 64 88 	r3 = M[r9 + 400];
84201932:	5a d8       	r0 = M[FP + 44];
84201934:	4c d8       	r2 = M[FP + 36];
84201936:	52 54       	r0 = r0 LSHIFT 2;
84201938:	23 00       	r1 = r2 + Null;
8420193a:	14 01       	r2 = r0 + r2;
8420193c:	4a 08       	r0 = r7 + Null;
8420193e:	09 f0 37 e6 	call (m) $_create_iir_resamplerv2_op;
84201942:	7a 4c       	SP = SP + -24;
84201944:	17 00       	r5 = r0 + Null;
        if(!op_ptr)
84201946:	33 61       	if EQ jump (m) Lc_build_spkr_graph_27;

84201948 <Lc_build_spkr_graph_55>:
        {
            goto aFailed;
        }
        cbops_append_operator_to_graph(spkr_graph,op_ptr);
84201948:	3b 00       	r1 = r5 + Null;
8420194a:	52 08       	r0 = r8 + Null;
8420194c:	ff fd aa f0 	call (m) 0x16e96;
84201950:	2b ea 

        /* Move next input to output of resampler */
        intern_ins_idx = intern_rs_idx;
84201952:	59 d8       	rMAC = M[FP + 44];
84201954:	69 de       	M[FP + 52] = rMAC;

84201956 <Lc_build_spkr_graph_56>:
    /* This is the point where we insert possible sidetone
     * mix operator, store both the operator and the input
     * buffer index for the operator. Sidetone mixing
     * will always be done in-place.
     */
    op_extra_data->spkr_st_point_op = op_ptr;
84201956:	b7 f0 a9 8e 	M[r9 + 676] = r5;
    op_extra_data->spkr_stmix_in_idx = intern_ins_idx;
8420195a:	69 d8       	rMAC = M[FP + 52];
8420195c:	b1 f0 a3 8e 	M[r9 + 652] = rMAC;

    /* Optional section for SW rate matching */
    if(intern_rm_idx != 0)
84201960:	61 d8       	rMAC = M[FP + 48];
84201962:	48 60       	if EQ jump (m) Lc_build_spkr_graph_67;

84201964 <Lc_build_spkr_graph_57>:
    {
        int shift_amount =  op_extra_data->spkr_shift;
84201964:	b1 f0 74 88 	rMAC = M[r9 + 464];

        if(intern_rm_idx!=out_indx)
84201968:	63 d8       	r1 = M[FP + 48];
8420196a:	52 d8       	r0 = M[FP + 40];
8420196c:	98 04       	Null = r1 - r0;
8420196e:	1c 60       	if EQ jump (m) Lc_build_spkr_graph_65;

84201970 <Lc_build_spkr_graph_58>:
        {
            /* Use alternate set of scratch buffers from resampler */
            unsigned scratch_offset = (intern_rs_idx!=0)? 0 : num_inputs;
84201970:	59 d8       	rMAC = M[FP + 44];
84201972:	03 60       	if EQ jump (m) Lc_build_spkr_graph_60;

84201974 <Lc_build_spkr_graph_59>:
84201974:	02 00       	r0 = Null + Null;
84201976:	02 6e       	jump (m) Lc_build_spkr_graph_61;

84201978 <Lc_build_spkr_graph_60>:
84201978:	4a 08       	r0 = r7 + Null;

8420197a <Lc_build_spkr_graph_61>:

            /* Buffers for output of ratematch if it exists */
            for(i=0; i < num_inputs; i++)
8420197a:	06 00       	r4 = Null + Null;
8420197c:	52 54       	r0 = r0 LSHIFT 2;
8420197e:	59 08       	rMAC = r9 + Null;
84201980:	51 00       	rMAC = r0 + rMAC;
84201982:	17 f0 84 20 	r5 = rMAC + 132;

84201986 <Lc_build_spkr_graph_62>:
84201986:	9f f6 00 c2 	Null = r4 - r7;
8420198a:	02 f0 9b e0 	if C jump (m) Lc_build_spkr_graph_64;

8420198e <Lc_build_spkr_graph_63>:
            {
                cbops_set_internal_io_buffer(spkr_graph,intern_rm_idx+i,intern_rm_idx,op_extra_data->scratch_bufs[scratch_offset+i]);
8420198e:	3d e8       	r3 = M[r5 + Null];
84201990:	61 d8       	rMAC = M[FP + 48];
84201992:	0c 00       	r2 = rMAC + Null;
84201994:	73 00       	r1 = r4 + rMAC;
84201996:	52 08       	r0 = r8 + Null;
84201998:	ff fd aa f0 	call (m) 0x16e66;
8420199c:	2f e6 
        {
            /* Use alternate set of scratch buffers from resampler */
            unsigned scratch_offset = (intern_rs_idx!=0)? 0 : num_inputs;

            /* Buffers for output of ratematch if it exists */
            for(i=0; i < num_inputs; i++)
8420199e:	76 20       	r4 = r4 + 1;
842019a0:	3f 21       	r5 = r5 + 4;
842019a2:	f2 6f       	jump (m) Lc_build_spkr_graph_62;

842019a4 <Lc_build_spkr_graph_64>:
            {
                cbops_set_internal_io_buffer(spkr_graph,intern_rm_idx+i,intern_rm_idx,op_extra_data->scratch_bufs[scratch_offset+i]);
            }
            shift_amount=0;
842019a4:	01 00       	rMAC = Null + Null;

842019a6 <Lc_build_spkr_graph_65>:
        }

        /*  SW rate adjustment per channel [num_inputs] */
        op_ptr = create_sw_rate_adj_op(num_inputs, &idxs[intern_ins_idx], &idxs[intern_rm_idx],
                                       CBOPS_RATEADJUST_COEFFS,
                                       &op_extra_data->spkr_rate_adjustment,shift_amount);
842019a6:	09 1c       	pushm <rMAC>;
842019a8:	01 f0 c0 ff 	push r9 + 448;
842019ac:	1b cf 
842019ae:	85 2a       	r3 = Null + 26;
842019b0:	62 d8       	r0 = M[FP + 48];
842019b2:	4c d8       	r2 = M[FP + 36];
842019b4:	52 54       	r0 = r0 LSHIFT 2;
842019b6:	23 00       	r1 = r2 + Null;
842019b8:	14 01       	r2 = r0 + r2;
842019ba:	6a d8       	r0 = M[FP + 52];
842019bc:	52 54       	r0 = r0 LSHIFT 2;
842019be:	d3 00       	r1 = r0 + r1;
842019c0:	4a 08       	r0 = r7 + Null;
842019c2:	ff fd a9 f0 	call (m) 0x16bea;
842019c6:	29 e1 
842019c8:	7e 4c       	SP = SP + -8;
842019ca:	16 00       	r4 = r0 + Null;
        if(!op_ptr)
842019cc:	f0 ff e1 eb 	if EQ jump (m) Lc_build_spkr_graph_27;

842019d0 <Lc_build_spkr_graph_66>:
        {
            goto aFailed;
        }

        op_extra_data->spkr_sw_rateadj_op=op_ptr;
842019d0:	b6 f0 7e 8e 	M[r9 + 504] = r4;
        cbops_rateadjust_passthrough_mode(op_ptr,(op_extra_data->spkr_rate_enactment==RATEMATCHING_SUPPORT_NONE)?TRUE:FALSE);
842019d4:	03 00       	r1 = Null + Null;
842019d6:	b0 f0 71 88 	Null = M[r9 + 452];
842019da:	20 f0 43 ce 	if EQ r1 = Null + 1;
842019de:	ff fd a9 f0 	call (m) 0x16c96;
842019e2:	39 e5 

        cbops_append_operator_to_graph(spkr_graph,op_ptr);
842019e4:	33 00       	r1 = r4 + Null;
842019e6:	52 08       	r0 = r8 + Null;
842019e8:	ff fd aa f0 	call (m) 0x16e96;
842019ec:	2f e5 

        /* Move next input to output of ratematch */
        intern_ins_idx = intern_rm_idx;
842019ee:	61 d8       	rMAC = M[FP + 48];
842019f0:	69 de       	M[FP + 52] = rMAC;

842019f2 <Lc_build_spkr_graph_67>:
    }


    /* Did previous operator terminate route? */
    if(intern_ins_idx!=out_indx)
842019f2:	6a d8       	r0 = M[FP + 52];
842019f4:	51 d8       	rMAC = M[FP + 40];
842019f6:	50 04       	Null = r0 - rMAC;
842019f8:	29 60       	if EQ jump (m) Lc_build_spkr_graph_74;

842019fa <Lc_build_spkr_graph_68>:
    {
        /* Check for Mono to multi-channel */
        if(num_inputs<num_spkrs)
842019fa:	41 d8       	rMAC = M[FP + 32];
842019fc:	1f f9 00 c2 	Null = r7 - rMAC;
84201a00:	02 f0 9f e0 	if C jump (m) Lc_build_spkr_graph_72;

84201a04 <Lc_build_spkr_graph_69>:
        {
            for(i=0; i < num_spkrs; i++)
84201a04:	01 00       	rMAC = Null + Null;
84201a06:	72 d8       	r0 = M[FP + 56];
84201a08:	49 d8       	rMAC = M[FP + 36];
84201a0a:	52 54       	r0 = r0 LSHIFT 2;
84201a0c:	51 00       	rMAC = r0 + rMAC;
84201a0e:	42 d8       	r0 = M[FP + 32];
84201a10:	14 09       	r10 = r0 + Null;
84201a12:	04 4c       	do (m) Lc__loop0;

84201a14 <Lc_build_spkr_graph_70>:
            {
                idxs[num_io+i] = intern_ins_idx;
84201a14:	6a d8       	r0 = M[FP + 52];
84201a16:	0a ee       	M[rMAC + Null] = r0;
84201a18:	09 21       	rMAC = rMAC + 4;

84201a1a <Lc__loop0>:
    if(intern_ins_idx!=out_indx)
    {
        /* Check for Mono to multi-channel */
        if(num_inputs<num_spkrs)
        {
            for(i=0; i < num_spkrs; i++)
84201a1a:	71 d8       	rMAC = M[FP + 56];
84201a1c:	69 de       	M[FP + 52] = rMAC;

84201a1e <Lc_build_spkr_graph_72>:
                idxs[num_io+i] = intern_ins_idx;
            }
            intern_ins_idx = num_io;
        }

        op_ptr = create_shift_op(num_spkrs, &idxs[intern_ins_idx], &idxs[out_indx], op_extra_data->spkr_shift);
84201a1e:	b5 f0 74 88 	r3 = M[r9 + 464];
84201a22:	52 d8       	r0 = M[FP + 40];
84201a24:	4c d8       	r2 = M[FP + 36];
84201a26:	52 54       	r0 = r0 LSHIFT 2;
84201a28:	23 00       	r1 = r2 + Null;
84201a2a:	14 01       	r2 = r0 + r2;
84201a2c:	6a d8       	r0 = M[FP + 52];
84201a2e:	52 54       	r0 = r0 LSHIFT 2;
84201a30:	d3 00       	r1 = r0 + r1;
84201a32:	42 d8       	r0 = M[FP + 32];
84201a34:	ff fd 21 f1 	call (m) 0x25e08;
84201a38:	35 ee 
        if(!op_ptr)
84201a3a:	10 04       	Null = r0 - Null;
84201a3c:	f0 ff f1 ea 	if EQ jump (m) Lc_build_spkr_graph_27;

84201a40 <Lc_build_spkr_graph_73>:
        {
            goto aFailed;
        }
        cbops_append_operator_to_graph(spkr_graph,op_ptr);
84201a40:	13 00       	r1 = r0 + Null;
84201a42:	52 08       	r0 = r8 + Null;
84201a44:	ff fd aa f0 	call (m) 0x16e96;
84201a48:	33 e2 

84201a4a <Lc_build_spkr_graph_74>:
    }

    op_extra_data->spkr_rate_adjustment=0;
84201a4a:	b0 f0 70 8e 	M[r9 + 448] = Null;

    /* create rate monitor op if required */
    op_ptr = NULL;
    if(op_extra_data->spkr_rate_ability == RATEMATCHING_SUPPORT_HW)
84201a4e:	b1 f0 6f 88 	rMAC = M[r9 + 444];
84201a52:	88 24       	Null = rMAC - 2;
84201a54:	f1 ff ad e8 	if NE jump (m) Lc_build_spkr_graph_5;

84201a58 <Lc_build_spkr_graph_75>:
    {
        /* With HW rate adjustmen we always need rate monitor */
        op_ptr = create_rate_monitor_operator(op_extra_data->task_frequency, out_indx);
84201a58:	b2 f0 92 88 	r0 = M[r9 + 584];
84201a5c:	53 d8       	r1 = M[FP + 40];
84201a5e:	08 f0 2b e9 	call (m) $_create_rate_monitor_operator;
84201a62:	16 00       	r4 = r0 + Null;
        if(!op_ptr)
84201a64:	f0 ff c9 ea 	if EQ jump (m) Lc_build_spkr_graph_27;

84201a68 <Lc_build_spkr_graph_76>:
        {
            goto aFailed;
        }
        rate_monitor_op_initialise(op_ptr,op_extra_data->spkr_rate, TRUE, 3*MS_PER_SEC);
84201a68:	05 f0 b8 53 	r3 = Null + 3000;
84201a6c:	44 20       	r2 = Null + 1;
84201a6e:	b3 f0 6e 88 	r1 = M[r9 + 440];
84201a72:	f2 ff 2a ed 	call $_rate_monitor_op_initialise;
84201a76:	ff ff b5 e8 	jump (m) Lc_build_spkr_graph_8;

84201a7a <Lc_build_spkr_graph_77>:
    return TRUE;
  aFailed:
    DEBUG_GRAPHS("AEC REFERENCE: Building speaker graph, Failed!" );
    pfree(idxs);
    return FALSE;
}
84201a7a:	f6 4a       	SP = SP - 0x20, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84201a7c:	d8 4c       	rts;

84201a7e <$_validate_channels_and_build>:
 *        paths and rebuild the cbops graphs for each path when needed.
 *
 * \param op_data Pointer to the AEC reference operator data.
 */
bool validate_channels_and_build(OPERATOR_DATA *op_data)
{
84201a7e:	f6 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x10;
84201a80:	42 de       	M[FP + 32] = r0;
84201a82:	11 00       	rMAC = r0 + Null;
/****************************************************************************
Private Function Declarations
*/
static inline AEC_REFERENCE_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AEC_REFERENCE_OP_DATA *) op_data->extra_op_data;
84201a84:	0e 99       	r4 = M[rMAC + 48];
bool validate_channels_and_build(OPERATOR_DATA *op_data)
{
    AEC_REFERENCE_OP_DATA *op_extra_data = get_instance_data(op_data);

    /* check changes in speaker, microphone and reference paths */
    bool spkr_changed = aec_reference_update_spkr_channel_status(op_extra_data);
84201a86:	32 00       	r0 = r4 + Null;
84201a88:	dc 4e       	call (m) $_aec_reference_update_spkr_channel_status;
84201a8a:	10 09       	r6 = r0 + Null;
    bool mic_changed = aec_reference_update_mic_channel_status(op_extra_data);
84201a8c:	32 00       	r0 = r4 + Null;
84201a8e:	85 4e       	call (m) $_aec_reference_update_mic_channel_status;
84201a90:	17 00       	r5 = r0 + Null;
    bool ref_changed = aec_reference_update_ref_channel_status(op_extra_data);
84201a92:	32 00       	r0 = r4 + Null;
84201a94:	01 f0 3b e3 	call (m) $_aec_reference_update_ref_channel_status;
84201a98:	12 09       	r8 = r0 + Null;
    bool interrupts_blocked = FALSE;
84201a9a:	03 09       	r9 = Null + Null;

    bool mic_changed_while_spkr_running = (!spkr_changed) && (op_extra_data->spkr_graph!=NULL) &&
        (mic_changed || ref_changed);
84201a9c:	0f f8 00 c2 	Null = r6 - Null;
84201aa0:	0b 62       	if NE jump (m) Lc_validate_channels_and_build_6;

84201aa2 <Lc_validate_channels_and_build_2>:
84201aa2:	61 f0 72 88 	rMAC = M[r4 + 456];
84201aa6:	08 60       	if EQ jump (m) Lc_validate_channels_and_build_6;

84201aa8 <Lc_validate_channels_and_build_3>:
84201aa8:	38 04       	Null = r5 - Null;
84201aaa:	04 62       	if NE jump (m) Lc_validate_channels_and_build_5;

84201aac <Lc_validate_channels_and_build_4>:
84201aac:	0f fa 00 c2 	Null = r8 - Null;
84201ab0:	03 60       	if EQ jump (m) Lc_validate_channels_and_build_6;

84201ab2 <Lc_validate_channels_and_build_5>:
84201ab2:	41 20       	rMAC = Null + 1;
84201ab4:	02 6e       	jump (m) Lc_validate_channels_and_build_7;

84201ab6 <Lc_validate_channels_and_build_6>:
84201ab6:	01 00       	rMAC = Null + Null;

84201ab8 <Lc_validate_channels_and_build_7>:
84201ab8:	49 de       	M[FP + 36] = rMAC;

    bool spkr_changed_while_mic_running = (!mic_changed) && (op_extra_data->mic_graph!=NULL) &&
        spkr_changed ;
84201aba:	38 04       	Null = r5 - Null;
84201abc:	0a 62       	if NE jump (m) Lc_validate_channels_and_build_10;

84201abe <Lc_validate_channels_and_build_8>:
84201abe:	61 f0 6a 88 	rMAC = M[r4 + 424];
84201ac2:	07 60       	if EQ jump (m) Lc_validate_channels_and_build_10;

84201ac4 <Lc_validate_channels_and_build_9>:
84201ac4:	01 09       	r7 = Null + Null;
84201ac6:	0f f8 00 c2 	Null = r6 - Null;
84201aca:	21 f0 49 ce 	if NE r7 = Null + 1;
84201ace:	02 6e       	jump (m) Lc_validate_channels_and_build_11;

84201ad0 <Lc_validate_channels_and_build_10>:
84201ad0:	01 09       	r7 = Null + Null;

84201ad2 <Lc_validate_channels_and_build_11>:

    patch_fn_shared(aec_reference);

    /* update sidetone method */
    aec_reference_update_sidetone_method(op_extra_data);
84201ad2:	32 00       	r0 = r4 + Null;
84201ad4:	01 f0 35 e3 	call (m) $_aec_reference_update_sidetone_method;

    /* see if graph builds need to be done with
     * interrupts blocked.
     */
    if (opmgr_op_is_running(op_data) &&
        (mic_changed_while_spkr_running || spkr_changed_while_mic_running))
84201ad8:	42 d8       	r0 = M[FP + 32];
84201ada:	08 f0 25 ec 	call (m) $_opmgr_op_is_running;
84201ade:	10 04       	Null = r0 - Null;
84201ae0:	0a 60       	if EQ jump (m) Lc_validate_channels_and_build_15;

84201ae2 <Lc_validate_channels_and_build_12>:
84201ae2:	49 d8       	rMAC = M[FP + 36];
84201ae4:	04 62       	if NE jump (m) Lc_validate_channels_and_build_14;

84201ae6 <Lc_validate_channels_and_build_13>:
84201ae6:	0f f9 00 c2 	Null = r7 - Null;
84201aea:	05 60       	if EQ jump (m) Lc_validate_channels_and_build_15;

84201aec <Lc_validate_channels_and_build_14>:
        /* if we have a change in mic/ref paths while
         * speaker graph is already running, then we block the
         * interrupts so new additions wont disrupt speaker
         * path.
         */
        LOCK_INTERRUPTS;
84201aec:	ff fd 58 f1 	call (m) 0x2cc9c;
84201af0:	31 ed 
        interrupts_blocked = TRUE;
84201af2:	0b 71       	r9 = Null + 1;

84201af4 <Lc_validate_channels_and_build_15>:
    }

    /* rebuild graphs if there is change in
     * speaker or microphone path
     */
    if(!aec_reference_build_graphs(op_extra_data, spkr_changed, mic_changed))
84201af4:	3c 00       	r2 = r5 + Null;
84201af6:	43 08       	r1 = r6 + Null;
84201af8:	32 00       	r0 = r4 + Null;
84201afa:	01 f0 3f e3 	call (m) $_aec_reference_build_graphs;
84201afe:	10 04       	Null = r0 - Null;
84201b00:	41 60       	if EQ jump (m) Lc_validate_channels_and_build_27;

84201b02 <Lc_validate_channels_and_build_16>:
    }

    /* also if there is changes in reference path, then
     * apply that change to speaker graph
     */
    if(ref_changed || spkr_changed)
84201b02:	0f fa 00 c2 	Null = r8 - Null;
84201b06:	04 62       	if NE jump (m) Lc_validate_channels_and_build_18;

84201b08 <Lc_validate_channels_and_build_17>:
84201b08:	0f f8 00 c2 	Null = r6 - Null;
84201b0c:	0a 60       	if EQ jump (m) Lc_validate_channels_and_build_19;

84201b0e <Lc_validate_channels_and_build_18>:
84201b0e:	61 f0 76 88 	rMAC = M[r4 + 472];
84201b12:	13 f2 00 00 	r1 = rMAC AND 0x4000;
84201b16:	32 00       	r0 = r4 + Null;
84201b18:	02 f0 3f ea 	call (m) $_aec_reference_spkr_include_ref_path;
84201b1c:	10 04       	Null = r0 - Null;
84201b1e:	32 60       	if EQ jump (m) Lc_validate_channels_and_build_27;

84201b20 <Lc_validate_channels_and_build_19>:
84201b20:	0f fb 00 c2 	Null = r9 - Null;
84201b24:	f1 fd 58 f1 	if NE call (m) 0x2ccb8;
84201b28:	35 ec 
    {
        UNLOCK_INTERRUPTS;
    }

    if(op_extra_data->mic_graph != NULL ||
       op_extra_data->spkr_graph!= NULL)
84201b2a:	61 f0 6a 88 	rMAC = M[r4 + 424];
84201b2e:	04 62       	if NE jump (m) Lc_validate_channels_and_build_21;

84201b30 <Lc_validate_channels_and_build_20>:
84201b30:	61 f0 72 88 	rMAC = M[r4 + 456];
84201b34:	16 60       	if EQ jump (m) Lc_validate_channels_and_build_24;

84201b36 <Lc_validate_channels_and_build_21>:
    {
        /* start running the graphs if not already running
         */
        if(op_extra_data->kick_id == TIMER_ID_INVALID)
84201b36:	60 f0 5d 88 	Null = M[r4 + 372];
84201b3a:	11 62       	if NE jump (m) Lc_validate_channels_and_build_23;

84201b3c <Lc_validate_channels_and_build_22>:
        {
            op_extra_data->kick_id = timer_schedule_event_in(op_extra_data->kick_period, aec_reference_timer_task,(void*)op_data);
84201b3c:	42 f0 07 f0 	r5 = Null + 69207699;
84201b40:	93 4a 
84201b42:	68 f0 94 88 	r6 = M[r4 + 592];
        INTERVAL time_in,
        tTimerEventFunction TimerEventFunction,
        void *data_pointer)
{
    return create_add_strict_event(
            time_add(hal_get_time(), time_in), TimerEventFunction, data_pointer);
84201b46:	ff fd 7e f1 	call (m) 0x317e8;
84201b4a:	23 e5 
84201b4c:	42 0c       	r0 = r6 + r0;
84201b4e:	3b 00       	r1 = r5 + Null;
84201b50:	44 d8       	r2 = M[FP + 32];
84201b52:	ff fd 92 f0 	call (m) 0x1402a;
84201b56:	39 e6 
}
84201b58:	62 f0 5d 8e 	M[r4 + 372] = r0;

84201b5c <Lc_validate_channels_and_build_23>:
    else
    {
        timer_cancel_event_atomic(&op_extra_data->kick_id);
    }

    return TRUE;
84201b5c:	42 20       	r0 = Null + 1;
84201b5e:	1b 6e       	jump (m) Lc_validate_channels_and_build_28;

84201b60 <Lc_validate_channels_and_build_24>:
            op_extra_data->kick_id = timer_schedule_event_in(op_extra_data->kick_period, aec_reference_timer_task,(void*)op_data);
        }
    }
    else
    {
        timer_cancel_event_atomic(&op_extra_data->kick_id);
84201b60:	06 f0 74 45 	r4 = r4 + 372;
                    ((void)timer_cancel_event_ret(timer_id, NULL, NULL))


INLINE_SECTION static inline void timer_cancel_event_atomic(tTimerId *timer_id)
{
    interrupt_block();
84201b64:	ff fd 58 f1 	call (m) 0x2cc9c;
84201b68:	39 e9 
    if (*timer_id != TIMER_ID_INVALID)
84201b6a:	32 e8       	r0 = M[r4 + Null];
84201b6c:	07 60       	if EQ jump (m) Lc_validate_channels_and_build_26;

84201b6e <Lc_validate_channels_and_build_25>:
    {
        (void) timer_cancel_event_ret(*timer_id, NULL, NULL);
84201b6e:	04 00       	r2 = Null + Null;
84201b70:	03 00       	r1 = Null + Null;
84201b72:	ff fd 93 f0 	call (m) 0x141bc;
84201b76:	2b e2 
        *timer_id = TIMER_ID_INVALID;
84201b78:	30 ee       	M[r4 + Null] = Null;

84201b7a <Lc_validate_channels_and_build_26>:
    }
    interrupt_unblock();
84201b7a:	ff fd 58 f1 	call (m) 0x2ccb8;
84201b7e:	3f e9 
84201b80:	ee 6f       	jump (m) Lc_validate_channels_and_build_23;

84201b82 <Lc_validate_channels_and_build_27>:

  aFailed:
    /* it failed to complete the build for some reason,
     * clean up all the graphs.
     */
    aec_reference_cleanup(op_data);
84201b82:	42 d8       	r0 = M[FP + 32];
84201b84:	fb ff 31 e6 	call (m) $_aec_reference_cleanup;
84201b88:	0f fb 00 c2 	Null = r9 - Null;
84201b8c:	f1 fd 58 f1 	if NE call (m) 0x2ccb8;
84201b90:	2d e9 
    if(interrupts_blocked)
    {
        UNLOCK_INTERRUPTS;
    }
    return FALSE;
84201b92:	02 00       	r0 = Null + Null;

84201b94 <Lc_validate_channels_and_build_28>:
}
84201b94:	f6 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84201b96:	d8 4c       	rts;

84201b98 <$_aec_reference_update_mic_channel_status>:
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 * \return whether there is a change in speaker channel status that requires
 *         rebuilding of the speaker graph.
 */
bool aec_reference_update_mic_channel_status(AEC_REFERENCE_OP_DATA *op_extra_data)
{
84201b98:	72 1c       	pushm <FP(=SP), r4, r5>;
    patch_fn_shared(aec_reference);
    unsigned i;
    unsigned mic_channel_status=0;
84201b9a:	03 00       	r1 = Null + Null;
    unsigned number_mics=0;
84201b9c:	04 00       	r2 = Null + Null;
    tCbuffer *inputBuf,*outputBuf;

    patch_fn_shared(aec_reference);

    /* Microphones are connected */
    op_extra_data->source_kicks = 0;
84201b9e:	20 f0 7b 8e 	M[r0 + 492] = Null;
    if(op_extra_data->input_stream[AEC_REF_MIC_TERMINAL1] && op_extra_data->output_stream[AEC_REF_OUTPUT_TERMINAL1])
84201ba2:	91 88       	rMAC = M[r0 + 8];
84201ba4:	2c 60       	if EQ jump (m) Lc_aec_reference_update_mic_channel_status_13;

84201ba6 <Lc_aec_reference_update_mic_channel_status_2>:
84201ba6:	d1 a8       	rMAC = M[r0 + 76];
84201ba8:	2a 60       	if EQ jump (m) Lc_aec_reference_update_mic_channel_status_13;

84201baa <Lc_aec_reference_update_mic_channel_status_3>:
    {
        bool all_mic_channels = TRUE;
        for(i=0;i<MAX_NUMBER_MICS;i++)
84201baa:	01 00       	rMAC = Null + Null;
84201bac:	04 6e       	jump (m) Lc_aec_reference_update_mic_channel_status_5;

84201bae <Lc_aec_reference_update_mic_channel_status_4>:
}


inline static unsigned MicrophoneTerminalByIndex(unsigned i)
{
    if(i<4)
84201bae:	08 25       	Null = rMAC - 4;
84201bb0:	02 f0 8f e0 	if C jump (m) Lc_aec_reference_update_mic_channel_status_6;

84201bb4 <Lc_aec_reference_update_mic_channel_status_5>:
    {
        return (i + AEC_REF_MIC_TERMINAL1);
84201bb4:	8d 20       	r3 = rMAC + 2;
        {
            inputBuf  = op_extra_data->input_stream[MicrophoneTerminalByIndex(i)];
84201bb6:	6d 54       	r3 = r3 LSHIFT 2;
84201bb8:	55 e9       	r3 = M[r0 + r3];

inline static unsigned OutputTerminalByIndex(unsigned i)
{
    if(i<4)
    {
        return (i + AEC_REF_OUTPUT_TERMINAL1);
84201bba:	ce 20       	r4 = rMAC + 3;
84201bbc:	05 6e       	jump (m) Lc_aec_reference_update_mic_channel_status_7;

84201bbe <Lc_aec_reference_update_mic_channel_status_6>:
    {
        return (i + AEC_REF_MIC_TERMINAL1);
    }
    else
    {
        return ((i-4)+ AEC_REF_MIC_TERMINAL5);
84201bbe:	0d 22       	r3 = rMAC + 8;
84201bc0:	6d 54       	r3 = r3 LSHIFT 2;
84201bc2:	55 e9       	r3 = M[r0 + r3];
    {
        return (i + AEC_REF_OUTPUT_TERMINAL1);
    }
    else
    {
        return ((i-4) + AEC_REF_OUTPUT_TERMINAL5);
84201bc4:	4e 22       	r4 = rMAC + 9;

84201bc6 <Lc_aec_reference_update_mic_channel_status_7>:
            outputBuf = op_extra_data->output_stream[OutputTerminalByIndex(i)];
84201bc6:	27 f0 40 20 	r5 = r0 + 64;
84201bca:	76 54       	r4 = r4 LSHIFT 2;
84201bcc:	be e9       	r4 = M[r5 + r4];

            if(inputBuf && outputBuf)
84201bce:	28 04       	Null = r3 - Null;
84201bd0:	26 60       	if EQ jump (m) Lc_aec_reference_update_mic_channel_status_16;

84201bd2 <Lc_aec_reference_update_mic_channel_status_8>:
84201bd2:	30 04       	Null = r4 - Null;
84201bd4:	26 60       	if EQ jump (m) Lc_aec_reference_update_mic_channel_status_17;

84201bd6 <Lc_aec_reference_update_mic_channel_status_9>:
            {
                number_mics++;
84201bd6:	64 20       	r2 = r2 + 1;

                if(i<4)
84201bd8:	08 25       	Null = rMAC - 4;
84201bda:	02 f0 b5 e0 	if C jump (m) Lc_aec_reference_update_mic_channel_status_15;

84201bde <Lc_aec_reference_update_mic_channel_status_10>:
                {
                    mic_channel_status |= (AEC_REFERENCE_CONSTANT_CONN_MIKE_1<<i);
84201bde:	0d 00       	r3 = rMAC + Null;
84201be0:	00 f5 95 de 	r3 = 0x1 LSHIFT r3;
84201be4:	5b 13       	r1 = r1 OR r3;

inline static unsigned OutputTerminalByIndex(unsigned i)
{
    if(i<4)
    {
        return (i + AEC_REF_OUTPUT_TERMINAL1);
84201be6:	cd 20       	r3 = rMAC + 3;

84201be8 <Lc_aec_reference_update_mic_channel_status_11>:
                }
                else
                {
                    mic_channel_status |= ((AEC_REFERENCE_CONSTANT_CONN_MIKE_5>>4)<<i);
                }
                op_extra_data->source_kicks |= (1 << OutputTerminalByIndex(i) );
84201be8:	00 f5 95 de 	r3 = 0x1 LSHIFT r3;
84201bec:	26 f0 7b 88 	r4 = M[r0 + 492];
84201bf0:	ad 13       	r3 = r3 OR r4;
84201bf2:	25 f0 7b 8e 	M[r0 + 492] = r3;

84201bf6 <Lc_aec_reference_update_mic_channel_status_12>:
    /* Microphones are connected */
    op_extra_data->source_kicks = 0;
    if(op_extra_data->input_stream[AEC_REF_MIC_TERMINAL1] && op_extra_data->output_stream[AEC_REF_OUTPUT_TERMINAL1])
    {
        bool all_mic_channels = TRUE;
        for(i=0;i<MAX_NUMBER_MICS;i++)
84201bf6:	49 20       	rMAC = rMAC + 1;
84201bf8:	08 26       	Null = rMAC - 8;
84201bfa:	da 65       	if NC jump (m) Lc_aec_reference_update_mic_channel_status_4;

84201bfc <Lc_aec_reference_update_mic_channel_status_13>:
            mic_channel_status = 0;
            op_extra_data->source_kicks = 0;
        }
    }

    if((GetMicChannelStatus(op_extra_data)) == mic_channel_status)
84201bfc:	21 f0 76 88 	rMAC = M[r0 + 472];
84201c00:	07 f0 15 f8 	r3 = rMAC AND 0xf000f;
84201c04:	0f 00 
84201c06:	e8 04       	Null = r3 - r1;
84201c08:	11 62       	if NE jump (m) Lc_aec_reference_update_mic_channel_status_18;

84201c0a <Lc_aec_reference_update_mic_channel_status_14>:
    {
        /* No change in the mic path */
        return FALSE;
84201c0a:	02 00       	r0 = Null + Null;
84201c0c:	18 6e       	jump (m) Lc_aec_reference_update_mic_channel_status_19;

84201c0e <Lc_aec_reference_update_mic_channel_status_15>:
                {
                    mic_channel_status |= (AEC_REFERENCE_CONSTANT_CONN_MIKE_1<<i);
                }
                else
                {
                    mic_channel_status |= ((AEC_REFERENCE_CONSTANT_CONN_MIKE_5>>4)<<i);
84201c0e:	0d 00       	r3 = rMAC + Null;
84201c10:	10 f0 00 f5 	r3 = 0x1000 LSHIFT r3;
84201c14:	95 ce 
84201c16:	5b 13       	r1 = r1 OR r3;
    }
    else
    {
        return ((i-4) + AEC_REF_OUTPUT_TERMINAL5);
84201c18:	4d 22       	r3 = rMAC + 9;
84201c1a:	e7 6f       	jump (m) Lc_aec_reference_update_mic_channel_status_11;

84201c1c <Lc_aec_reference_update_mic_channel_status_16>:
                }
                op_extra_data->source_kicks |= (1 << OutputTerminalByIndex(i) );
            }
            else if(inputBuf || outputBuf)
84201c1c:	30 04       	Null = r4 - Null;
84201c1e:	ec 61       	if EQ jump (m) Lc_aec_reference_update_mic_channel_status_12;

84201c20 <Lc_aec_reference_update_mic_channel_status_17>:
                break;
            }
        }
        if(!all_mic_channels)
        {
            number_mics=0;
84201c20:	04 00       	r2 = Null + Null;
            mic_channel_status = 0;
84201c22:	03 00       	r1 = Null + Null;
            op_extra_data->source_kicks = 0;
84201c24:	20 f0 7b 8e 	M[r0 + 492] = Null;
84201c28:	ea 6f       	jump (m) Lc_aec_reference_update_mic_channel_status_13;

84201c2a <Lc_aec_reference_update_mic_channel_status_18>:
        /* No change in the mic path */
        return FALSE;
    }

    /* update number of mics */
    op_extra_data->num_mic_channels = number_mics;
84201c2a:	24 f0 78 8e 	M[r0 + 480] = r2;

    /* update mic channel status */
    SetMicChannelStatus(op_extra_data, mic_channel_status);
84201c2e:	f8 ff 11 f7 	rMAC = rMAC AND 0xfff0fff0;
84201c32:	f0 1f 
84201c34:	c9 12       	rMAC = rMAC OR r1;
84201c36:	21 f0 76 8e 	M[r0 + 472] = rMAC;

    return TRUE;
84201c3a:	42 20       	r0 = Null + 1;

84201c3c <Lc_aec_reference_update_mic_channel_status_19>:
}
84201c3c:	72 48       	popm <FP, r4, r5>;
84201c3e:	d8 4c       	rts;

84201c40 <$_aec_reference_update_spkr_channel_status>:
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 * \return whether there is a change in speaker channel status that requires
 *         rebuilding of the speaker graph.
 */
bool aec_reference_update_spkr_channel_status(AEC_REFERENCE_OP_DATA *op_extra_data)
{
84201c40:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
    unsigned i;
    unsigned spkr_channel_status=0;
84201c42:	03 00       	r1 = Null + Null;
    unsigned number_spkrs=0;
84201c44:	01 00       	rMAC = Null + Null;
    tCbuffer *inputBuf,*outputBuf;

    patch_fn_shared(aec_reference);

    /* Speakers are connected */
    op_extra_data->sink_kicks   = 0;
84201c46:	20 f0 7c 8e 	M[r0 + 496] = Null;
    if(op_extra_data->input_stream[AEC_REF_INPUT_TERMINAL1] && op_extra_data->output_stream[AEC_REF_SPKR_TERMINAL1])
84201c4a:	14 e8       	r2 = M[r0 + Null];
84201c4c:	39 60       	if EQ jump (m) Lc_aec_reference_update_spkr_channel_status_16;

84201c4e <Lc_aec_reference_update_spkr_channel_status_2>:
84201c4e:	54 a8       	r2 = M[r0 + 68];
84201c50:	37 60       	if EQ jump (m) Lc_aec_reference_update_spkr_channel_status_16;

84201c52 <Lc_aec_reference_update_spkr_channel_status_3>:
    {
        int in_count=1;
84201c52:	45 20       	r3 = Null + 1;
        int out_count=1;
84201c54:	2e 00       	r4 = r3 + Null;

        /* Master Channel is connected */
        spkr_channel_status |= AEC_REFERENCE_CONSTANT_CONN_SPKR_1;
84201c56:	03 28       	r1 = Null + 16;

        /* Primary sink is connected */
        op_extra_data->sink_kicks = (1<<AEC_REF_INPUT_TERMINAL1);
84201c58:	29 00       	rMAC = r3 + Null;
84201c5a:	21 f0 7c 8e 	M[r0 + 496] = rMAC;

        for(i=1;i<MAX_NUMBER_SPEAKERS;i++)
84201c5e:	04 6e       	jump (m) Lc_aec_reference_update_spkr_channel_status_5;

84201c60 <Lc_aec_reference_update_spkr_channel_status_4>:
        {
            int sink_idx = SpeakerInputTerminalByIndex(i);
84201c60:	88 24       	Null = rMAC - 2;
84201c62:	02 f0 8b e0 	if C jump (m) Lc_aec_reference_update_spkr_channel_status_6;

84201c66 <Lc_aec_reference_update_spkr_channel_status_5>:
84201c66:	47 20       	r5 = Null + 1;

            /* Old terminals kept for backwards compatibility */
            outputBuf = op_extra_data->output_stream[SpeakerTerminalByIndex(i)];
84201c68:	84 20       	r2 = Null + 2;
84201c6a:	03 6e       	jump (m) Lc_aec_reference_update_spkr_channel_status_7;

84201c6c <Lc_aec_reference_update_spkr_channel_status_6>:
        /* Primary sink is connected */
        op_extra_data->sink_kicks = (1<<AEC_REF_INPUT_TERMINAL1);

        for(i=1;i<MAX_NUMBER_SPEAKERS;i++)
        {
            int sink_idx = SpeakerInputTerminalByIndex(i);
84201c6c:	0f 21       	r5 = rMAC + 4;

            /* Old terminals kept for backwards compatibility */
            outputBuf = op_extra_data->output_stream[SpeakerTerminalByIndex(i)];
84201c6e:	4c 21       	r2 = rMAC + 5;

84201c70 <Lc_aec_reference_update_spkr_channel_status_7>:
84201c70:	28 f0 40 20 	r6 = r0 + 64;
84201c74:	64 54       	r2 = r2 LSHIFT 2;
84201c76:	84 f0 04 e8 	r2 = M[r6 + r2];
            inputBuf  = op_extra_data->input_stream[sink_idx];
84201c7a:	01 f7 d8 c8 	r6 = r5 LSHIFT 2;

            if(inputBuf || outputBuf)
84201c7e:	28 f0 08 e8 	r6 = M[r0 + r6];
84201c82:	03 62       	if NE jump (m) Lc_aec_reference_update_spkr_channel_status_9;

84201c84 <Lc_aec_reference_update_spkr_channel_status_8>:
84201c84:	20 04       	Null = r2 - Null;
84201c86:	15 60       	if EQ jump (m) Lc_aec_reference_update_spkr_channel_status_13;

84201c88 <Lc_aec_reference_update_spkr_channel_status_9>:
            {
                spkr_channel_status |= (AEC_REFERENCE_CONSTANT_CONN_SPKR_1<<i);
84201c88:	09 09       	r7 = rMAC + Null;
84201c8a:	08 f9 99 ce 	r7 = 0x10 LSHIFT r7;
84201c8e:	00 f9 73 c8 	r1 = r1 OR r7;

                if(inputBuf)
84201c92:	0f f8 00 c2 	Null = r6 - Null;
84201c96:	23 60       	if EQ jump (m) Lc_aec_reference_update_spkr_channel_status_18;

84201c98 <Lc_aec_reference_update_spkr_channel_status_10>:
                {
                    op_extra_data->sink_kicks |= (1<<sink_idx);
84201c98:	00 f7 97 de 	r5 = 0x1 LSHIFT r5;
84201c9c:	28 f0 7c 88 	r6 = M[r0 + 496];
84201ca0:	00 f8 77 c8 	r5 = r5 OR r6;
84201ca4:	27 f0 7c 8e 	M[r0 + 496] = r5;
                    in_count++;
84201ca8:	6d 20       	r3 = r3 + 1;

84201caa <Lc_aec_reference_update_spkr_channel_status_11>:
                {
                    /* Special case allows mono input split to multiple outputs*/
                    return(FALSE);
                }

                if(outputBuf)
84201caa:	20 04       	Null = r2 - Null;
84201cac:	1c 60       	if EQ jump (m) Lc_aec_reference_update_spkr_channel_status_20;

84201cae <Lc_aec_reference_update_spkr_channel_status_12>:
                {
                    out_count++;
84201cae:	76 20       	r4 = r4 + 1;

84201cb0 <Lc_aec_reference_update_spkr_channel_status_13>:
        spkr_channel_status |= AEC_REFERENCE_CONSTANT_CONN_SPKR_1;

        /* Primary sink is connected */
        op_extra_data->sink_kicks = (1<<AEC_REF_INPUT_TERMINAL1);

        for(i=1;i<MAX_NUMBER_SPEAKERS;i++)
84201cb0:	49 20       	rMAC = rMAC + 1;
84201cb2:	08 26       	Null = rMAC - 8;
84201cb4:	d6 65       	if NC jump (m) Lc_aec_reference_update_spkr_channel_status_4;

84201cb6 <Lc_aec_reference_update_spkr_channel_status_14>:
                    return(FALSE);
                }
            }
        }
        /* Verify complete channel setup */
        number_spkrs = out_count;
84201cb6:	31 00       	rMAC = r4 + Null;
        if(in_count==out_count)
84201cb8:	a8 05       	Null = r3 - r4;
84201cba:	18 62       	if NE jump (m) Lc_aec_reference_update_spkr_channel_status_21;

84201cbc <Lc_aec_reference_update_spkr_channel_status_15>:
        {
            /* Parallel channels */
            spkr_channel_status |= AEC_REFERENCE_CONSTANT_CONN_TYPE_PARA;
84201cbc:	db cd       	r1 = r1 OR 0x1000;

84201cbe <Lc_aec_reference_update_spkr_channel_status_16>:
            /* Mono Input.  Split outputs */
            PL_ASSERT(in_count==1);
        }
    }

    if((GetSpkrChannelStatus(op_extra_data)) == spkr_channel_status)
84201cbe:	24 f0 76 88 	r2 = M[r0 + 472];
84201cc2:	45 f1 f0 1f 	r3 = r2 AND 0x3ff0;
84201cc6:	e8 04       	Null = r3 - r1;
84201cc8:	0c 60       	if EQ jump (m) Lc_aec_reference_update_spkr_channel_status_19;

84201cca <Lc_aec_reference_update_spkr_channel_status_17>:
        /* No change in the speaker channel status */
        return FALSE;
    }

    /* update number of speaker channels */
    op_extra_data->num_spkr_channels = number_spkrs;
84201cca:	21 f0 77 8e 	M[r0 + 476] = rMAC;

    /* update speaker channel status */
    SetSpkrChannelStatus(op_extra_data, spkr_channel_status);
84201cce:	41 fe 0f 00 	rMAC = r2 AND 0xffffc00f;
84201cd2:	c9 12       	rMAC = rMAC OR r1;
84201cd4:	21 f0 76 8e 	M[r0 + 472] = rMAC;
    return TRUE;
84201cd8:	42 20       	r0 = Null + 1;
84201cda:	18 6e       	jump (m) Lc_aec_reference_update_spkr_channel_status_25;

84201cdc <Lc_aec_reference_update_spkr_channel_status_18>:
                if(inputBuf)
                {
                    op_extra_data->sink_kicks |= (1<<sink_idx);
                    in_count++;
                }
                else if(in_count>1)
84201cdc:	68 24       	Null = r3 - 1;
84201cde:	e6 6d       	if LE jump (m) Lc_aec_reference_update_spkr_channel_status_11;

84201ce0 <Lc_aec_reference_update_spkr_channel_status_19>:
                {
                    /* Special case allows mono input split to multiple outputs*/
                    return(FALSE);
84201ce0:	02 00       	r0 = Null + Null;
84201ce2:	14 6e       	jump (m) Lc_aec_reference_update_spkr_channel_status_25;

84201ce4 <Lc_aec_reference_update_spkr_channel_status_20>:

                if(outputBuf)
                {
                    out_count++;
                }
                else if(out_count>1)
84201ce4:	70 24       	Null = r4 - 1;
84201ce6:	fd 6b       	if GT jump (m) Lc_aec_reference_update_spkr_channel_status_19;

84201ce8 <Lc_22>:
84201ce8:	e4 6f       	jump (m) Lc_aec_reference_update_spkr_channel_status_13;

84201cea <Lc_aec_reference_update_spkr_channel_status_21>:
        if(in_count==out_count)
        {
            /* Parallel channels */
            spkr_channel_status |= AEC_REFERENCE_CONSTANT_CONN_TYPE_PARA;
        }
        else if(out_count==1)
84201cea:	70 24       	Null = r4 - 1;
84201cec:	06 62       	if NE jump (m) Lc_aec_reference_update_spkr_channel_status_23;

84201cee <Lc_aec_reference_update_spkr_channel_status_22>:
        {
            /* Mono Output.  Mix inputs */
            spkr_channel_status |= AEC_REFERENCE_CONSTANT_CONN_TYPE_MIX;
84201cee:	20 f0 00 f3 	r1 = r1 OR 0x2000;
84201cf2:	53 d8 
            number_spkrs = in_count;
84201cf4:	29 00       	rMAC = r3 + Null;
84201cf6:	e4 6f       	jump (m) Lc_aec_reference_update_spkr_channel_status_16;

84201cf8 <Lc_aec_reference_update_spkr_channel_status_23>:
        }
        else
        {
            /* Mono Input.  Split outputs */
            PL_ASSERT(in_count==1);
84201cf8:	68 24       	Null = r3 - 1;
84201cfa:	e2 61       	if EQ jump (m) Lc_aec_reference_update_spkr_channel_status_16;

84201cfc <Lc_aec_reference_update_spkr_channel_status_24>:
84201cfc:	03 f0 05 4a 	r1 = Null + 1541;
84201d00:	02 f0 13 60 	r0 = Null + 4115;
84201d04:	ff fd 91 f0 	call (m) 0x13f12;
84201d08:	2f e0 

84201d0a <Lc_aec_reference_update_spkr_channel_status_25>:

    /* update speaker channel status */
    SetSpkrChannelStatus(op_extra_data, spkr_channel_status);
    return TRUE;

}
84201d0a:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84201d0c:	d8 4c       	rts;

84201d0e <$_aec_reference_update_ref_channel_status>:
 *         insertion/deletion of the reference sub-path into/from speaker graph.
 */
bool aec_reference_update_ref_channel_status(AEC_REFERENCE_OP_DATA *op_extra_data)
{

    unsigned ref_channel_status = 0;
84201d0e:	01 00       	rMAC = Null + Null;
    patch_fn_shared(aec_reference);

    /* Check AEC reference */
    if(op_extra_data->output_stream[AEC_REF_REFERENCE_TERMINAL] && (op_extra_data->channel_status&AEC_REFERENCE_CONSTANT_CONN_MIKE_1))
84201d10:	13 a8       	r1 = M[r0 + 64];
84201d12:	0c 60       	if EQ jump (m) Lc_aec_reference_update_ref_channel_status_4;

84201d14 <Lc_aec_reference_update_ref_channel_status_2>:
84201d14:	23 f0 76 88 	r1 = M[r0 + 472];
84201d18:	1b c0       	r1 = r1 AND 0x1;
84201d1a:	08 60       	if EQ jump (m) Lc_aec_reference_update_ref_channel_status_4;

84201d1c <Lc_aec_reference_update_ref_channel_status_3>:
    {
        op_extra_data->source_kicks |= 1<<AEC_REF_REFERENCE_TERMINAL;
84201d1c:	21 f0 7b 88 	rMAC = M[r0 + 492];
84201d20:	09 c8       	rMAC = rMAC OR 0x1;
84201d22:	21 f0 7b 8e 	M[r0 + 492] = rMAC;
        ref_channel_status = AEC_REFERENCE_CONSTANT_CONN_TYPE_REF;
84201d26:	21 f0 00 40 	rMAC = Null + 16384;

84201d2a <Lc_aec_reference_update_ref_channel_status_4>:
    }

    if(ref_channel_status == (GetRefChannelStatus(op_extra_data)))
84201d2a:	23 f0 76 88 	r1 = M[r0 + 472];
84201d2e:	34 f2 00 00 	r2 = r1 AND 0x4000;
84201d32:	08 05       	Null = rMAC - r2;
84201d34:	03 62       	if NE jump (m) Lc_aec_reference_update_ref_channel_status_6;

84201d36 <Lc_aec_reference_update_ref_channel_status_5>:
    {
        /* No change in reference path */
        return FALSE;
84201d36:	02 00       	r0 = Null + Null;
84201d38:	07 6e       	jump (m) Lc_aec_reference_update_ref_channel_status_7;

84201d3a <Lc_aec_reference_update_ref_channel_status_6>:
    }

    /* reference path has changed, update
     * channel status.
     */
    SetRefChannelStatus(op_extra_data, ref_channel_status);
84201d3a:	33 fd ff 1f 	r1 = r1 AND 0xffffbfff;
84201d3e:	c9 12       	rMAC = rMAC OR r1;
84201d40:	21 f0 76 8e 	M[r0 + 472] = rMAC;
    return TRUE;
84201d44:	42 20       	r0 = Null + 1;

84201d46 <Lc_aec_reference_update_ref_channel_status_7>:
84201d46:	d8 4c       	rts;

84201d48 <$_aec_reference_update_sidetone_method>:
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 * \return whether there is a change in sidetone mixing method
 */
void aec_reference_update_sidetone_method(AEC_REFERENCE_OP_DATA *op_extra_data)
{
84201d48:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84201d4a:	16 00       	r4 = r0 + Null;
    AEC_REFERENCE_SIDETONE_METHOD sidetone_method = AEC_SIDETONE_NOT_REQUIRED;
84201d4c:	07 00       	r5 = Null + Null;
    patch_fn_shared(aec_reference);

    /* reset state of sidetone */
    aec_reference_update_sidetone_status(op_extra_data);
84201d4e:	f9 ff 3d e3 	call (m) $_aec_reference_update_sidetone_status;

    /* If the config needs sidetone, decide which method it should use */
    if(op_extra_data->using_sidetone == USE_SIDETONE_FLAG)
84201d52:	61 f0 7a 88 	rMAC = M[r4 + 488];
84201d56:	c8 24       	Null = rMAC - 3;
84201d58:	0c 62       	if NE jump (m) Lc_aec_reference_update_sidetone_method_5;

84201d5a <Lc_aec_reference_update_sidetone_method_2>:
    {
        if(op_extra_data->hw_sidetone_available)
84201d5a:	60 f0 9b 88 	Null = M[r4 + 620];
84201d5e:	03 60       	if EQ jump (m) Lc_aec_reference_update_sidetone_method_4;

84201d60 <Lc_aec_reference_update_sidetone_method_3>:
        {
            /* if the config can have sidetone mixing in Hw then use that method */
            sidetone_method = AEC_SIDETONE_IN_HW;
84201d60:	47 20       	r5 = Null + 1;
84201d62:	07 6e       	jump (m) Lc_aec_reference_update_sidetone_method_5;

84201d64 <Lc_aec_reference_update_sidetone_method_4>:
        {
            /* HW side tone isn't supported, and speaker and mic are
             * running at high task period, use separate graph for sidetone
             * mixing which will run at decimated task period.
             */
            sidetone_method = AEC_SIDETONE_IN_SW_USING_SEPARATE_GRAPH;
84201d64:	61 f0 97 88 	rMAC = M[r4 + 604];
84201d68:	c7 20       	r5 = Null + 3;
84201d6a:	48 24       	Null = rMAC - 1;
84201d6c:	a9 f0 47 ce 	if LS r5 = Null + 2;

84201d70 <Lc_aec_reference_update_sidetone_method_5>:
            sidetone_method = AEC_SIDETONE_IN_SW_BY_MIC_SPKR_GRAPH;
        }
    }

    /* update sidetone mixing method */
    op_extra_data->sidetone_method = sidetone_method;
84201d70:	67 f0 70 9a 	MB[r4 + 624] = r5;

84201d74 <Lc_aec_reference_update_sidetone_method_6>:

}
84201d74:	f2 48       	popm <FP, r4, r5, rLink>;
84201d76:	d8 4c       	rts;

84201d78 <$_aec_reference_build_graphs>:
 * \brief clean up speaker graph
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
bool aec_reference_build_graphs(AEC_REFERENCE_OP_DATA *op_extra_data, bool spkr_changed, bool mic_changed)
{
84201d78:	f6 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x10;
84201d7a:	16 00       	r4 = r0 + Null;
84201d7c:	44 de       	M[FP + 32] = r2;
84201d7e:	1b 09       	r9 = r1 + Null;
    unsigned max_sample_rate;

    patch_fn_shared(aec_reference);

    /* nothing to do if neither speaker nor mic has changed */
    if(!spkr_changed && !mic_changed)
84201d80:	03 62       	if NE jump (m) Lc_aec_reference_build_graphs_3;

84201d82 <Lc_aec_reference_build_graphs_2>:
84201d82:	41 d8       	rMAC = M[FP + 32];
84201d84:	70 60       	if EQ jump (m) Lc_aec_reference_build_graphs_21;

84201d86 <Lc_aec_reference_build_graphs_3>:
    {
        return TRUE;
    }

    max_sample_rate = op_extra_data->mic_rate;
84201d86:	62 f0 66 88 	r0 = M[r4 + 408];
    max_sample_rate = MAX(max_sample_rate, op_extra_data->spkr_rate);
84201d8a:	61 f0 6e 88 	rMAC = M[r4 + 440];
84201d8e:	50 04       	Null = r0 - rMAC;
84201d90:	02 f0 87 e0 	if C jump (m) Lc_aec_reference_build_graphs_5;

84201d94 <Lc_aec_reference_build_graphs_4>:
84201d94:	0a 00       	r0 = rMAC + Null;

84201d96 <Lc_aec_reference_build_graphs_5>:
    max_sample_rate = MAX(max_sample_rate, op_extra_data->input_rate);
84201d96:	61 f0 64 88 	rMAC = M[r4 + 400];
84201d9a:	50 04       	Null = r0 - rMAC;
84201d9c:	02 f0 87 e0 	if C jump (m) Lc_aec_reference_build_graphs_7;

84201da0 <Lc_aec_reference_build_graphs_6>:
84201da0:	0a 00       	r0 = rMAC + Null;

84201da2 <Lc_aec_reference_build_graphs_7>:
    max_sample_rate = MAX(max_sample_rate, op_extra_data->output_rate);
84201da2:	61 f0 65 88 	rMAC = M[r4 + 404];
84201da6:	50 04       	Null = r0 - rMAC;
84201da8:	02 f0 87 e0 	if C jump (m) Lc_aec_reference_build_graphs_9;

84201dac <Lc_aec_reference_build_graphs_8>:
84201dac:	0a 00       	r0 = rMAC + Null;

84201dae <Lc_aec_reference_build_graphs_9>:
    op_extra_data->max_io_rate = max_sample_rate;
84201dae:	62 f0 95 8e 	M[r4 + 596] = r0;

    /* 1ms more than a task period for max sample rate in all corners,
     * few samples more for considering resampling extra outputs.
     */
    size = frac_mult(max_sample_rate, op_extra_data->task_period_frac) + 4;
84201db2:	63 f0 93 88 	r1 = M[r4 + 588];
84201db6:	00 f3 72 c9 	r0 = r0 * r1 (frac);
84201dba:	29 f0 04 20 	r7 = r0 + 4;

    /* Min size, was constant size of 100 words before introducing,
     * configurable task period, don't go below that tested value.
     */
    size = MAX(size, 100);
84201dbe:	90 f0 64 24 	Null = r7 - 100;
84201dc2:	02 f0 89 e0 	if C jump (m) Lc_aec_reference_build_graphs_11;

84201dc6 <Lc_aec_reference_build_graphs_10>:
84201dc6:	09 f0 64 40 	r7 = Null + 100;

84201dca <Lc_aec_reference_build_graphs_11>:

    /* allocate buffer needed for resampler */
    if(op_extra_data->resampler_temp_buffer == NULL)
84201dca:	61 f0 32 88 	rMAC = M[r4 + 200];
84201dce:	57 62       	if NE jump (m) Lc_aec_reference_build_graphs_24;

84201dd0 <Lc_aec_reference_build_graphs_12>:
    {
        /* resampler_temp_buffer_size must already have been calculated */
        PL_ASSERT(0 != op_extra_data->resampler_temp_buffer_size);
84201dd0:	62 f0 91 88 	r0 = M[r4 + 580];
84201dd4:	4a 62       	if NE jump (m) Lc_aec_reference_build_graphs_22;

84201dd6 <Lc_aec_reference_build_graphs_13>:
84201dd6:	03 f0 98 50 	r1 = Null + 2200;
84201dda:	02 f0 13 60 	r0 = Null + 4115;
84201dde:	ff fd 90 f0 	call (m) 0x13f12;
84201de2:	35 e9 
84201de4:	6e 6e       	jump (m) Lc_aec_reference_build_graphs_32;

84201de6 <Lc_aec_reference_build_graphs_14>:
        }
    }

    /** Setup Latency Control */
    {
    	unsigned jitter = frac_mult(op_extra_data->output_rate,op_extra_data->task_period_frac);
84201de6:	62 f0 65 88 	r0 = M[r4 + 404];
84201dea:	63 f0 93 88 	r1 = M[r4 + 588];
84201dee:	00 f3 72 c9 	r0 = r0 * r1 (frac);

	    op_extra_data->sync_block.jitter     = 	jitter + (jitter>>1);				/* 1.5 times task period */
84201df2:	13 50       	r1 = r0 LSHIFT -1;
84201df4:	99 00       	rMAC = r1 + r0;
84201df6:	61 f0 85 8e 	M[r4 + 532] = rMAC;
	    op_extra_data->sync_block.ref_delay  = frac_mult(op_extra_data->output_rate,FRACTIONAL(0.001)); 	 /* 1.0 msec */
84201dfa:	62 f0 65 88 	r0 = M[r4 + 404];
84201dfe:	02 f0 63 f0 	r1 = Null + 2147483;
84201e02:	9b 48 
84201e04:	00 f3 72 c9 	r0 = r0 * r1 (frac);
84201e08:	62 f0 8a 8e 	M[r4 + 552] = r0;
	    op_extra_data->sync_block.block_sync = 0;
84201e0c:	60 f0 87 8e 	M[r4 + 540] = Null;
	    op_extra_data->sync_block.rm_adjustment = 0;
84201e10:	60 f0 8c 8e 	M[r4 + 560] = Null;
        op_extra_data->sync_block.frm_count = 0;
84201e14:	60 f0 8b 8e 	M[r4 + 556] = Null;
    }

    if(spkr_changed)
84201e18:	0f fb 00 c2 	Null = r9 - Null;
84201e1c:	09 60       	if EQ jump (m) Lc_aec_reference_build_graphs_16;

84201e1e <Lc_aec_reference_build_graphs_15>:
    {
        /* any change in main speaker path will cause full
         * rebuild of every thing from scratch
         */
        aec_reference_cleanup_spkr_graph(op_extra_data);
84201e1e:	32 00       	r0 = r4 + Null;
84201e20:	01 f0 21 e0 	call (m) $_aec_reference_cleanup_spkr_graph;
        /* rebuild speaker graph */
        if(!build_spkr_graph(op_extra_data))
84201e24:	32 00       	r0 = r4 + Null;
84201e26:	fc ff 31 e1 	call (m) $_build_spkr_graph;
84201e2a:	10 04       	Null = r0 - Null;
84201e2c:	26 60       	if EQ jump (m) Lc_aec_reference_build_graphs_23;

84201e2e <Lc_aec_reference_build_graphs_16>:
        {
            return FALSE;
        }
    }

    if(mic_changed)
84201e2e:	41 d8       	rMAC = M[FP + 32];
84201e30:	12 60       	if EQ jump (m) Lc_aec_reference_build_graphs_19;

84201e32 <Lc_aec_reference_build_graphs_17>:
    {
        /* if only mic has changed, then only mic graph will be rebuilt */
        aec_reference_cleanup_mic_graph(op_extra_data);
84201e32:	32 00       	r0 = r4 + Null;
84201e34:	9a 4e       	call (m) $_aec_reference_cleanup_mic_graph;

        /* mic graph is rebuilt if there is a change
         * in either mic path or speaker path */
        if(!build_mic_graph(op_extra_data))
84201e36:	32 00       	r0 = r4 + Null;
84201e38:	fa ff 2f e1 	call (m) $_build_mic_graph;
84201e3c:	10 04       	Null = r0 - Null;
84201e3e:	1d 60       	if EQ jump (m) Lc_aec_reference_build_graphs_23;

84201e40 <Lc_aec_reference_build_graphs_18>:
            return FALSE;
        }

        /* update speaker graph to include sidetone mix if required */
        if(!aec_reference_spkr_include_sidetone(
               op_extra_data, op_extra_data->sidetone_method == AEC_SIDETONE_IN_SW_BY_MIC_SPKR_GRAPH))
84201e40:	61 f0 70 90 	rMAC = MBS[r4 + 624];
84201e44:	03 00       	r1 = Null + Null;
84201e46:	88 24       	Null = rMAC - 2;
84201e48:	20 f0 43 ce 	if EQ r1 = Null + 1;
84201e4c:	32 00       	r0 = r4 + Null;
84201e4e:	3b 4e       	call (m) $_aec_reference_spkr_include_sidetone;
84201e50:	10 04       	Null = r0 - Null;
84201e52:	13 60       	if EQ jump (m) Lc_aec_reference_build_graphs_23;

84201e54 <Lc_aec_reference_build_graphs_19>:
        }
    }

#ifdef AEC_REFERENCE_CAN_PERFORM_INPLACE_SIDETONE_MIXING
    /* build separate sidetone graph if required */
    if(!build_sidetone_graph(op_extra_data))
84201e54:	32 00       	r0 = r4 + Null;
84201e56:	02 f0 23 eb 	call (m) $_build_sidetone_graph;
84201e5a:	10 04       	Null = r0 - Null;
84201e5c:	0e 60       	if EQ jump (m) Lc_aec_reference_build_graphs_23;

84201e5e <Lc_aec_reference_build_graphs_20>:
        return FALSE;
    }
#endif /* AEC_REFERENCE_CAN_PERFORM_INPLACE_SIDETONE_MIXING */

    /*  Re-init */
    op_extra_data->ReInitFlag = TRUE;
84201e5e:	41 20       	rMAC = Null + 1;
84201e60:	61 f0 5c 8e 	M[r4 + 368] = rMAC;

84201e64 <Lc_aec_reference_build_graphs_21>:
    patch_fn_shared(aec_reference);

    /* nothing to do if neither speaker nor mic has changed */
    if(!spkr_changed && !mic_changed)
    {
        return TRUE;
84201e64:	42 20       	r0 = Null + 1;
84201e66:	2d 6e       	jump (m) Lc_aec_reference_build_graphs_32;

84201e68 <Lc_aec_reference_build_graphs_22>:
    {
        /* resampler_temp_buffer_size must already have been calculated */
        PL_ASSERT(0 != op_extra_data->resampler_temp_buffer_size);

        op_extra_data->resampler_temp_buffer =
            (unsigned*)xzpmalloc(op_extra_data->resampler_temp_buffer_size*sizeof(unsigned));
84201e68:	c3 20       	r1 = Null + 3;
84201e6a:	52 54       	r0 = r0 LSHIFT 2;
84201e6c:	ff fd 18 f0 	call (m) 0x4f2a;
84201e70:	3f e5 
        if(op_extra_data->resampler_temp_buffer == NULL)
84201e72:	62 f0 32 8e 	M[r4 + 200] = r0;
84201e76:	03 62       	if NE jump (m) Lc_aec_reference_build_graphs_24;

84201e78 <Lc_aec_reference_build_graphs_23>:
        {
            return FALSE;
84201e78:	02 00       	r0 = Null + Null;
84201e7a:	23 6e       	jump (m) Lc_aec_reference_build_graphs_32;

84201e7c <Lc_aec_reference_build_graphs_24>:

    /* get the number of required scratch buffers based
     * on the number of speakers and mics that we have.
     */
    num_scratch_buffs = (MAX(op_extra_data->num_spkr_channels,
                             op_extra_data->num_mic_channels))*2;
84201e7c:	61 f0 77 88 	rMAC = M[r4 + 476];
84201e80:	62 f0 78 88 	r0 = M[r4 + 480];
84201e84:	88 04       	Null = rMAC - r0;
84201e86:	02 f0 87 e0 	if C jump (m) Lc_aec_reference_build_graphs_26;

84201e8a <Lc_aec_reference_build_graphs_25>:
84201e8a:	02 6e       	jump (m) Lc_aec_reference_build_graphs_27;

84201e8c <Lc_aec_reference_build_graphs_26>:
84201e8c:	0a 00       	r0 = rMAC + Null;

84201e8e <Lc_aec_reference_build_graphs_27>:
84201e8e:	00 f2 da d8 	r8 = r0 LSHIFT 1;

    /* create scratch buffers, some of them might
     * already have been created */
    for(i=0;i<num_scratch_buffs;i++)
84201e92:	07 00       	r5 = Null + Null;
84201e94:	68 f0 84 20 	r6 = r4 + 132;

84201e98 <Lc_aec_reference_build_graphs_28>:
84201e98:	af f7 00 c2 	Null = r5 - r8;
84201e9c:	f2 ff cb ee 	if C jump (m) Lc_aec_reference_build_graphs_14;

84201ea0 <Lc_aec_reference_build_graphs_29>:
    {
        if(NULL == op_extra_data->scratch_bufs[i])
84201ea0:	81 f0 00 e8 	rMAC = M[r6 + Null];
84201ea4:	0b 62       	if NE jump (m) Lc_aec_reference_build_graphs_31;

84201ea6 <Lc_aec_reference_build_graphs_30>:
        {
            op_extra_data->scratch_bufs[i] = cbuffer_create_with_malloc_fast(size, BUF_DESC_SW_BUFFER);
84201ea6:	03 00       	r1 = Null + Null;
84201ea8:	4a 08       	r0 = r7 + Null;
84201eaa:	ff fd 84 f0 	call (m) 0x1279c;
84201eae:	33 e7 
84201eb0:	82 f0 00 ee 	M[r6 + Null] = r0;
            if(!op_extra_data->scratch_bufs[i])
84201eb4:	81 f0 00 e8 	rMAC = M[r6 + Null];
84201eb8:	e0 61       	if EQ jump (m) Lc_aec_reference_build_graphs_23;

84201eba <Lc_aec_reference_build_graphs_31>:
    num_scratch_buffs = (MAX(op_extra_data->num_spkr_channels,
                             op_extra_data->num_mic_channels))*2;

    /* create scratch buffers, some of them might
     * already have been created */
    for(i=0;i<num_scratch_buffs;i++)
84201eba:	7f 20       	r5 = r5 + 1;
84201ebc:	20 75       	r6 = r6 + 4;
84201ebe:	ed 6f       	jump (m) Lc_aec_reference_build_graphs_28;

84201ec0 <Lc_aec_reference_build_graphs_32>:

    /*  Re-init */
    op_extra_data->ReInitFlag = TRUE;

    return TRUE;
}
84201ec0:	f6 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84201ec2:	d8 4c       	rts;

84201ec4 <$_aec_reference_spkr_include_sidetone>:
 * \brief updates speaker graph to include/exclude side tone mixing
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
bool aec_reference_spkr_include_sidetone(AEC_REFERENCE_OP_DATA* op_extra_data, bool include_sidetone)
{
84201ec4:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84201ec6:	16 00       	r4 = r0 + Null;
    cbops_graph *spkr_graph = op_extra_data->spkr_graph;
    cbops_op    *op_ptr;

    /* we need to have a speaker graph */
    if(NULL == op_extra_data->spkr_graph)
84201ec8:	67 f0 72 88 	r5 = M[r4 + 456];
84201ecc:	19 62       	if NE jump (m) Lc_aec_reference_spkr_include_sidetone_6;

84201ece <Lc_aec_reference_spkr_include_sidetone_2>:
    {
        /* No action if we don't have a speaker graph
         * however in that case we expect the sidetone is
         * not active.
         */
        PL_ASSERT(op_extra_data->spkr_sidetone_active == FALSE);
84201ece:	60 f0 9f 88 	Null = M[r4 + 636];
84201ed2:	14 60       	if EQ jump (m) Lc_aec_reference_spkr_include_sidetone_5;

84201ed4 <Lc_aec_reference_spkr_include_sidetone_3>:
84201ed4:	03 f0 e8 4a 	r1 = Null + 1768;
84201ed8:	02 f0 13 60 	r0 = Null + 4115;
84201edc:	ff fd 90 f0 	call (m) 0x13f12;
84201ee0:	37 e1 
84201ee2:	41 6e       	jump (m) Lc_aec_reference_spkr_include_sidetone_11;

84201ee4 <Lc_aec_reference_spkr_include_sidetone_4>:
        {
            return FALSE;
        }

        /* insert sidetone mix operator into speaker graph */
        cbops_insert_operator_into_graph(spkr_graph, op_ptr, op_extra_data->spkr_st_point_op);
84201ee4:	64 f0 a9 88 	r2 = M[r4 + 676];
84201ee8:	43 08       	r1 = r6 + Null;
84201eea:	3a 00       	r0 = r5 + Null;
84201eec:	06 f0 3d e1 	call (m) $_cbops_insert_operator_into_graph;

        /* save the sidetone mix operator */
        op_extra_data->spkr_stmix_op = op_ptr;
84201ef0:	68 f0 ab 8e 	M[r4 + 684] = r6;

        /* now speaker graph has sidetone mix operator */
        op_extra_data->spkr_sidetone_active = TRUE;
84201ef4:	41 20       	rMAC = Null + 1;
84201ef6:	61 f0 9f 8e 	M[r4 + 636] = rMAC;

84201efa <Lc_aec_reference_spkr_include_sidetone_5>:
        /* No action if we don't have a speaker graph
         * however in that case we expect the sidetone is
         * not active.
         */
        PL_ASSERT(op_extra_data->spkr_sidetone_active == FALSE);
        return TRUE;
84201efa:	42 20       	r0 = Null + 1;
84201efc:	34 6e       	jump (m) Lc_aec_reference_spkr_include_sidetone_11;

84201efe <Lc_aec_reference_spkr_include_sidetone_6>:
    }

    if(!include_sidetone == !op_extra_data->spkr_sidetone_active)
84201efe:	01 00       	rMAC = Null + Null;
84201f00:	18 04       	Null = r1 - Null;
84201f02:	20 f0 41 ce 	if EQ rMAC = Null + 1;
84201f06:	02 00       	r0 = Null + Null;
84201f08:	60 f0 9f 88 	Null = M[r4 + 636];
84201f0c:	20 f0 42 ce 	if EQ r0 = Null + 1;
84201f10:	88 04       	Null = rMAC - r0;
84201f12:	f4 61       	if EQ jump (m) Lc_aec_reference_spkr_include_sidetone_5;

84201f14 <Lc_aec_reference_spkr_include_sidetone_7>:
         * as current state.
         */
        return TRUE;
    }

    if(include_sidetone)
84201f14:	18 04       	Null = r1 - Null;
84201f16:	18 60       	if EQ jump (m) Lc_aec_reference_spkr_include_sidetone_10;

84201f18 <Lc_aec_reference_spkr_include_sidetone_8>:
    {
        /* Add sidetone mixer to resampler section,  Master channel only */
        cbops_set_input_io_buffer(spkr_graph,
                                  op_extra_data->spkr_st_in_idx,
                                  op_extra_data->spkr_st_in_idx,
                                  op_extra_data->sidetone_buf);
84201f18:	63 f0 a5 88 	r1 = M[r4 + 660];
84201f1c:	65 f0 31 88 	r3 = M[r4 + 196];
84201f20:	1c 00       	r2 = r1 + Null;
84201f22:	3a 00       	r0 = r5 + Null;
84201f24:	ff fd a7 f0 	call (m) 0x16e02;
84201f28:	3f e6 
         * it is as per multi-channel model, but only ever works on one single channel
         */
        op_ptr = create_sidetone_mix_op(op_extra_data->spkr_stmix_in_idx,
                                        op_extra_data->spkr_stmix_in_idx,
                                        op_extra_data->spkr_st_in_idx,
                                        op_extra_data->spkr_out_threshold);
84201f2a:	62 f0 a3 88 	r0 = M[r4 + 652];
84201f2e:	65 f0 b0 88 	r3 = M[r4 + 704];
84201f32:	64 f0 a5 88 	r2 = M[r4 + 660];
84201f36:	13 00       	r1 = r0 + Null;
84201f38:	ff fd 4f f1 	call (m) 0x2bd4a;
84201f3c:	33 e0 
84201f3e:	10 09       	r6 = r0 + Null;
        if(op_ptr == NULL)
84201f40:	d2 63       	if NE jump (m) Lc_aec_reference_spkr_include_sidetone_4;

84201f42 <Lc_aec_reference_spkr_include_sidetone_9>:
        {
            return FALSE;
84201f42:	02 00       	r0 = Null + Null;
84201f44:	10 6e       	jump (m) Lc_aec_reference_spkr_include_sidetone_11;

84201f46 <Lc_aec_reference_spkr_include_sidetone_10>:
        DEBUG_GRAPHS("AEC REFERENCE: Side tone path added!" );
    }
    else
    {
        /* remove the sidetone mix operator from speaker graph */
        cbops_remove_operator_from_graph(spkr_graph, op_extra_data->spkr_stmix_op);
84201f46:	63 f0 ab 88 	r1 = M[r4 + 684];
84201f4a:	3a 00       	r0 = r5 + Null;
84201f4c:	05 f0 2f ed 	call (m) $_cbops_remove_operator_from_graph;
        op_extra_data->spkr_stmix_op = NULL;
84201f50:	60 f0 ab 8e 	M[r4 + 684] = Null;

        /* also tell the cbops not to care about sidetone buffer any more */
        cbops_unset_buffer(spkr_graph, op_extra_data->spkr_st_in_idx);
84201f54:	63 f0 a5 88 	r1 = M[r4 + 660];
84201f58:	3a 00       	r0 = r5 + Null;
84201f5a:	05 f0 2d ef 	call (m) $_cbops_unset_buffer;

        /* speaker graph no longer has sidetone mix operator*/
        op_extra_data->spkr_sidetone_active = FALSE;
84201f5e:	60 f0 9f 8e 	M[r4 + 636] = Null;
84201f62:	cc 6f       	jump (m) Lc_aec_reference_spkr_include_sidetone_5;

84201f64 <Lc_aec_reference_spkr_include_sidetone_11>:

        DEBUG_GRAPHS("AEC REFERENCE: Side tone path removed!" );
    }

    return TRUE;
}
84201f64:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84201f66:	d8 4c       	rts;

84201f68 <$_aec_reference_cleanup_mic_graph>:
 * \brief clean up mic graph
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
void aec_reference_cleanup_mic_graph(AEC_REFERENCE_OP_DATA *op_extra_data)
{
84201f68:	f1 1c       	pushm <FP(=SP), r4, rLink>;
84201f6a:	16 00       	r4 = r0 + Null;
    patch_fn_shared(aec_reference);

    /* Clear links to graphs */
    op_extra_data->mic_rate_monitor_op = NULL;
84201f6c:	60 f0 6b 8e 	M[r4 + 428] = Null;
    op_extra_data->mic_sidetone_op = NULL;
84201f70:	60 f0 6c 8e 	M[r4 + 432] = Null;
    op_extra_data->mic_sw_rateadj_op = NULL;
84201f74:	60 f0 7d 8e 	M[r4 + 500] = Null;
    op_extra_data->mic_mute_op = NULL;
84201f78:	60 f0 9d 8e 	M[r4 + 628] = Null;

    /* Free cbops mic graph */
    if(op_extra_data->mic_graph != NULL)
84201f7c:	62 f0 6a 88 	r0 = M[r4 + 424];
84201f80:	06 60       	if EQ jump (m) Lc_aec_reference_cleanup_mic_graph_3;

84201f82 <Lc_aec_reference_cleanup_mic_graph_2>:
    {
        destroy_graph(op_extra_data->mic_graph);
84201f82:	ff fd a7 f0 	call (m) 0x16daa;
84201f86:	29 e1 
        op_extra_data->mic_graph = NULL;
84201f88:	60 f0 6a 8e 	M[r4 + 424] = Null;

84201f8c <Lc_aec_reference_cleanup_mic_graph_3>:
    }

    /* if we have active sidetone path then remove
     * it from speaker graph
     */
    if(op_extra_data->spkr_sidetone_active)
84201f8c:	60 f0 9f 88 	Null = M[r4 + 636];
84201f90:	04 60       	if EQ jump (m) Lc_aec_reference_cleanup_mic_graph_5;

84201f92 <Lc_aec_reference_cleanup_mic_graph_4>:
    {
        aec_reference_spkr_include_sidetone(op_extra_data, FALSE);
84201f92:	03 00       	r1 = Null + Null;
84201f94:	32 00       	r0 = r4 + Null;
84201f96:	97 4f       	call (m) $_aec_reference_spkr_include_sidetone;

84201f98 <Lc_aec_reference_cleanup_mic_graph_5>:

    /* Free Sidetone buffers, this must be
     * done after removing sidetone mix from
     * speaker graph.
     */
    if(op_extra_data->sidetone_buf != NULL)
84201f98:	62 f0 31 88 	r0 = M[r4 + 196];
84201f9c:	06 60       	if EQ jump (m) Lc_aec_reference_cleanup_mic_graph_7;

84201f9e <Lc_aec_reference_cleanup_mic_graph_6>:
    {
        cbuffer_destroy(op_extra_data->sidetone_buf);
84201f9e:	ff fd 84 f0 	call (m) 0x12802;
84201fa2:	25 e3 
        op_extra_data->sidetone_buf = NULL;
84201fa4:	60 f0 31 8e 	M[r4 + 196] = Null;

84201fa8 <Lc_aec_reference_cleanup_mic_graph_7>:
    }

    /* update the state of sidetone */
    aec_reference_update_sidetone_status(op_extra_data);
84201fa8:	32 00       	r0 = r4 + Null;
84201faa:	f8 ff 21 e1 	call (m) $_aec_reference_update_sidetone_status;

#ifdef AEC_REFERENCE_GENERATE_MIC_TIMESTAMP
    op_extra_data->mic_metadata_tag_left_words = 0;
84201fae:	60 f0 cb 8e 	M[r4 + 812] = Null;

84201fb2 <Lc_aec_reference_cleanup_mic_graph_8>:
#endif

    DEBUG_GRAPHS("AEC REFERENCE: MIC graph's cleanup done!" );
}
84201fb2:	f1 48       	popm <FP, r4, rLink>;
84201fb4:	d8 4c       	rts;

84201fb6 <$_aec_reference_cleanup_graphs>:
 * \brief clean up all the cbops graphs
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
void aec_reference_cleanup_graphs(AEC_REFERENCE_OP_DATA *op_extra_data)
{
84201fb6:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84201fb8:	16 00       	r4 = r0 + Null;

    patch_fn_shared(aec_reference);

    /* Kill timer Task */
    /* This needs to be atomic, to make sure the right timer gets cancelled */
    LOCK_INTERRUPTS;
84201fba:	ff fd 56 f1 	call (m) 0x2cc9c;
84201fbe:	23 e7 
    if(op_extra_data->kick_id!=TIMER_ID_INVALID)
84201fc0:	62 f0 5d 88 	r0 = M[r4 + 372];
84201fc4:	08 60       	if EQ jump (m) Lc_aec_reference_cleanup_graphs_3;

84201fc6 <Lc_aec_reference_cleanup_graphs_2>:
    {
        timer_cancel_event(op_extra_data->kick_id);
84201fc6:	04 00       	r2 = Null + Null;
84201fc8:	03 00       	r1 = Null + Null;
84201fca:	ff fd 90 f0 	call (m) 0x141bc;
84201fce:	33 ef 
        op_extra_data->kick_id=TIMER_ID_INVALID;
84201fd0:	60 f0 5d 8e 	M[r4 + 372] = Null;

84201fd4 <Lc_aec_reference_cleanup_graphs_3>:
    }
    UNLOCK_INTERRUPTS;
84201fd4:	ff fd 56 f1 	call (m) 0x2ccb8;
84201fd8:	25 e7 

#ifdef AEC_REFERENCE_CAN_PERFORM_INPLACE_SIDETONE_MIXING
    /* cleanup sidetone graph if we have one */
    if(NULL != op_extra_data->sidetone_graph)
84201fda:	61 f0 99 88 	rMAC = M[r4 + 612];
84201fde:	04 60       	if EQ jump (m) Lc_aec_reference_cleanup_graphs_5;

84201fe0 <Lc_aec_reference_cleanup_graphs_4>:
    {
        /* clean sidetone graph */
        aec_reference_cleanup_sidetone_graph(op_extra_data);
84201fe0:	32 00       	r0 = r4 + Null;
84201fe2:	02 f0 37 ef 	call (m) $_aec_reference_cleanup_sidetone_graph;

84201fe6 <Lc_aec_reference_cleanup_graphs_5>:
    }
#endif
    /* clean mic graph */
    aec_reference_cleanup_mic_graph(op_extra_data);
84201fe6:	32 00       	r0 = r4 + Null;
84201fe8:	c0 4f       	call (m) $_aec_reference_cleanup_mic_graph;

    /* clean speaker graph */
    aec_reference_cleanup_spkr_graph(op_extra_data);
84201fea:	32 00       	r0 = r4 + Null;
84201fec:	1a 4e       	call (m) $_aec_reference_cleanup_spkr_graph;

    /* Free Internal buffers */
    for(i=0;i<AEC_NUM_SCRATCH_BUFFERS;i++)
84201fee:	07 00       	r5 = Null + Null;
84201ff0:	68 f0 84 20 	r6 = r4 + 132;

84201ff4 <Lc_aec_reference_cleanup_graphs_6>:
    {
        if(op_extra_data->scratch_bufs[i] != NULL)
84201ff4:	82 f0 00 e8 	r0 = M[r6 + Null];
84201ff8:	06 60       	if EQ jump (m) Lc_aec_reference_cleanup_graphs_8;

84201ffa <Lc_aec_reference_cleanup_graphs_7>:
        {
            cbuffer_destroy(op_extra_data->scratch_bufs[i]);
84201ffa:	ff fd 84 f0 	call (m) 0x12802;
84201ffe:	29 e0 
            op_extra_data->scratch_bufs[i] = NULL;
84202000:	80 f0 00 ee 	M[r6 + Null] = Null;

84202004 <Lc_aec_reference_cleanup_graphs_8>:

    /* clean speaker graph */
    aec_reference_cleanup_spkr_graph(op_extra_data);

    /* Free Internal buffers */
    for(i=0;i<AEC_NUM_SCRATCH_BUFFERS;i++)
84202004:	7f 20       	r5 = r5 + 1;
84202006:	20 75       	r6 = r6 + 4;
84202008:	38 2c       	Null = r5 - 16;
8420200a:	f5 65       	if NC jump (m) Lc_aec_reference_cleanup_graphs_6;

8420200c <Lc_aec_reference_cleanup_graphs_9>:
            op_extra_data->scratch_bufs[i] = NULL;
        }
    }

    /* clear scratch buffer used by resampler operator */
    if(op_extra_data->resampler_temp_buffer != NULL)
8420200c:	62 f0 32 88 	r0 = M[r4 + 200];
84202010:	06 60       	if EQ jump (m) Lc_aec_reference_cleanup_graphs_11;

84202012 <Lc_aec_reference_cleanup_graphs_10>:
    {
        pfree(op_extra_data->resampler_temp_buffer);
84202012:	ff fd 17 f0 	call (m) 0x4f62;
84202016:	31 ea 
        op_extra_data->resampler_temp_buffer = NULL;
84202018:	60 f0 32 8e 	M[r4 + 200] = Null;

8420201c <Lc_aec_reference_cleanup_graphs_11>:
    }

    DEBUG_GRAPHS("AEC REFERENCE: Full graphs cleanup done!" );
}
8420201c:	f3 48       	popm <FP, r4, r5, r6, rLink>;
8420201e:	d8 4c       	rts;

84202020 <$_aec_reference_cleanup_spkr_graph>:
 * \brief clean up speaker graph
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
void aec_reference_cleanup_spkr_graph(AEC_REFERENCE_OP_DATA *op_extra_data)
{
84202020:	f1 1c       	pushm <FP(=SP), r4, rLink>;
84202022:	16 00       	r4 = r0 + Null;
    patch_fn_shared(aec_reference);

#if defined(IO_DEBUG)
    insert_op  = NULL;
84202024:	e0 f0 00 f0 	M[Null + $_insert_op] = Null;
84202028:	59 8e 
    st_disgard_op = NULL;
8420202a:	e0 f0 00 f0 	M[Null + $_st_disgard_op] = Null;
8420202e:	5a 8e 
#endif

    /* Clear links to graphs */
    op_extra_data->spkr_rate_monitor_op = NULL;
84202030:	60 f0 73 8e 	M[r4 + 460] = Null;
    op_extra_data->spkr_sw_rateadj_op = NULL;
84202034:	60 f0 7e 8e 	M[r4 + 504] = Null;
    op_extra_data->spkr_ref_point_op = NULL;
84202038:	60 f0 a8 8e 	M[r4 + 672] = Null;
    op_extra_data->spkr_st_point_op = NULL;
8420203c:	60 f0 a9 8e 	M[r4 + 676] = Null;
    op_extra_data->spkr_ref_last_op = NULL;
84202040:	60 f0 aa 8e 	M[r4 + 680] = Null;
    op_extra_data->spkr_stmix_op =  NULL;
84202044:	60 f0 ab 8e 	M[r4 + 684] = Null;
    op_extra_data->spkr_ref_rs_op = NULL;
84202048:	60 f0 ac 8e 	M[r4 + 688] = Null;
    op_extra_data->ref_sw_rateadj_op = NULL;
8420204c:	60 f0 90 8e 	M[r4 + 576] = Null;

    /* destroy speaker graph */
    if(op_extra_data->spkr_graph != NULL)
84202050:	62 f0 72 88 	r0 = M[r4 + 456];
84202054:	06 60       	if EQ jump (m) Lc_aec_reference_cleanup_spkr_graph_3;

84202056 <Lc_aec_reference_cleanup_spkr_graph_2>:
    {
        destroy_graph(op_extra_data->spkr_graph);
84202056:	ff fd a6 f0 	call (m) 0x16daa;
8420205a:	35 ea 
        op_extra_data->spkr_graph = NULL;
8420205c:	60 f0 72 8e 	M[r4 + 456] = Null;

84202060 <Lc_aec_reference_cleanup_spkr_graph_3>:
    }

    /* clear flag for reference path */
    op_extra_data->spkr_ref_active = FALSE;
84202060:	60 f0 a0 8e 	M[r4 + 640] = Null;

    /* clear flag for sidetone path */
    op_extra_data->spkr_sidetone_active = FALSE;
84202064:	60 f0 9f 8e 	M[r4 + 636] = Null;

#ifdef AEC_REFERENCE_SPKR_TTP
    /* destroy any structure allocated for ttp playback */
    aec_reference_spkr_ttp_terminate(op_extra_data);
84202068:	32 00       	r0 = r4 + Null;
8420206a:	03 f0 3d e9 	call (m) $_aec_reference_spkr_ttp_terminate;
#endif /* AEC_REFERENCE_SPKR_TTP */

#ifdef AEC_REF_CALC_SPKR_RATE_MONITOR_AMOUNT
    /* Reset flag showing speaker started to consume data */
    op_extra_data->spkr_flow_started = FALSE;
8420206e:	60 f0 d3 8e 	M[r4 + 844] = Null;

84202072 <Lc_aec_reference_cleanup_spkr_graph_4>:
#endif

    /* TODO - Fill speakers with silence */

    DEBUG_GRAPHS("AEC REFERENCE: Speaker graph's cleanup done!" );
}
84202072:	f1 48       	popm <FP, r4, rLink>;
84202074:	d8 4c       	rts;

84202076 <$_aec_reference_spkr_include_ref_path>:
 * \brief updates speaker graph to include/exclude path for reference output
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
bool aec_reference_spkr_include_ref_path(AEC_REFERENCE_OP_DATA* op_extra_data, bool include_ref_path)
{
84202076:	f5 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>, SP = SP + 0x10;
84202078:	16 00       	r4 = r0 + Null;
8420207a:	19 00       	rMAC = r1 + Null;
    cbops_graph *spkr_graph = op_extra_data->spkr_graph;
8420207c:	68 f0 72 88 	r6 = M[r4 + 456];
    cbops_op    *op_ptr;
    unsigned ref_idx = op_extra_data->spkr_ref_idx;
84202080:	63 f0 a4 88 	r1 = M[r4 + 656];
84202084:	3b de       	M[FP + 28] = r1;

    /* No action if no speaker graph */
    if(NULL == spkr_graph)
84202086:	0f f8 00 c2 	Null = r6 - Null;
8420208a:	56 62       	if NE jump (m) Lc_aec_reference_spkr_include_ref_path_11;

8420208c <Lc_aec_reference_spkr_include_ref_path_2>:
    {
        /* nothing to do but we expect no reference output */
        PL_ASSERT(op_extra_data->spkr_ref_active == FALSE);
8420208c:	60 f0 a0 88 	Null = M[r4 + 640];
84202090:	51 60       	if EQ jump (m) Lc_aec_reference_spkr_include_ref_path_10;

84202092 <Lc_aec_reference_spkr_include_ref_path_3>:
84202092:	03 f0 35 4b 	r1 = Null + 1845;
84202096:	02 f0 13 60 	r0 = Null + 4115;
8420209a:	ff fd 8f f0 	call (m) 0x13f12;
8420209e:	39 e3 
842020a0:	bc 6e       	jump (m) Lc_aec_reference_spkr_include_ref_path_22;

842020a2 <Lc_aec_reference_spkr_include_ref_path_4>:
            {
                return FALSE;
            }

            /* save the resampler op and it's scratch buffer index */
            op_extra_data->spkr_ref_rs_op = op_ptr;
842020a2:	67 f0 ac 8e 	M[r4 + 688] = r5;
            op_extra_data->spkr_ref_rs_idx = ref_rm_in_idx;
842020a6:	49 d8       	rMAC = M[FP + 36];
842020a8:	61 f0 a7 8e 	M[r4 + 668] = rMAC;

            /* insert resamler op into speaker cbops graph */
            cbops_insert_operator_into_graph(spkr_graph,op_ptr, after);
842020ac:	4c 08       	r2 = r7 + Null;
842020ae:	3b 00       	r1 = r5 + Null;
842020b0:	42 08       	r0 = r6 + Null;
842020b2:	05 f0 37 e3 	call (m) $_cbops_insert_operator_into_graph;
            after = op_ptr;
842020b6:	39 09       	r7 = r5 + Null;
            spkr_num_ref_ops++;
842020b8:	0a 71       	r8 = Null + 1;

842020ba <Lc_aec_reference_spkr_include_ref_path_5>:
        }

        /*  SW rate adjustment for reference */
        op_ptr = create_sw_rate_adj_op(1, &ref_rm_in_idx, &ref_idx,
                                       CBOPS_RATEADJUST_COEFFS,
                                       &op_extra_data->sync_block.rm_adjustment, 0);
842020ba:	00 f0 30 cf 	push Null;
842020be:	85 2a       	r3 = Null + 26;
842020c0:	c4 11       	r2 = FP + 28;
842020c2:	43 12       	r1 = FP + 36;
842020c4:	02 f0 30 ff 	push r4 + 560;
842020c8:	16 cf 
842020ca:	42 20       	r0 = Null + 1;
842020cc:	ff fd a5 f0 	call (m) 0x16bea;
842020d0:	3f e8 
842020d2:	7e 4c       	SP = SP + -8;
842020d4:	17 00       	r5 = r0 + Null;
        if(op_ptr == NULL)
842020d6:	78 60       	if EQ jump (m) Lc_aec_reference_spkr_include_ref_path_15;

842020d8 <Lc_aec_reference_spkr_include_ref_path_6>:
        {
            return FALSE;
        }

		/* store reference rate adjust operator */
        op_extra_data->ref_sw_rateadj_op = op_ptr;
842020d8:	67 f0 90 8e 	M[r4 + 576] = r5;
        if(op_extra_data->mic_sync_enable)
842020dc:	60 f0 d4 88 	Null = M[r4 + 848];
842020e0:	05 60       	if EQ jump (m) Lc_aec_reference_spkr_include_ref_path_8;

842020e2 <Lc_aec_reference_spkr_include_ref_path_7>:
        {
            /* if input and output are in the same clock, then mic output
             * can get sychronised to ref, and ref won't need rate adjustment.
             * The operator will be doing simple copy here.
             */
            cbops_rateadjust_passthrough_mode(op_ptr, TRUE);
842020e2:	43 20       	r1 = Null + 1;
842020e4:	ff fd a5 f0 	call (m) 0x16c96;
842020e8:	33 ed 

842020ea <Lc_aec_reference_spkr_include_ref_path_8>:
        }

        /* insert rate adjust op into speaker cbops graph*/
        cbops_insert_operator_into_graph(spkr_graph, op_ptr, after);
842020ea:	4c 08       	r2 = r7 + Null;
842020ec:	3b 00       	r1 = r5 + Null;
842020ee:	42 08       	r0 = r6 + Null;
842020f0:	05 f0 39 e1 	call (m) $_cbops_insert_operator_into_graph;
        after = op_ptr;
        spkr_num_ref_ops++;
842020f4:	0a 75       	r8 = r8 + 1;

        /* speaker latency cbops operator */
        op_ptr = create_speaker_latency_op(ref_idx, &op_extra_data->sync_block);
842020f6:	63 f0 14 22 	r1 = r4 + 532;
842020fa:	3a d8       	r0 = M[FP + 28];
842020fc:	ff fd 30 f1 	call (m) 0x28250;
84202100:	35 ea 
84202102:	11 09       	r7 = r0 + Null;
        if(op_ptr == NULL)
84202104:	61 60       	if EQ jump (m) Lc_aec_reference_spkr_include_ref_path_15;

84202106 <Lc_aec_reference_spkr_include_ref_path_9>:
        {
            return FALSE;
        }
        /* insert speaker latency op into speaker cbops graph*/
        cbops_insert_operator_into_graph(spkr_graph, op_ptr, after);
84202106:	3c 00       	r2 = r5 + Null;
84202108:	4b 08       	r1 = r7 + Null;
8420210a:	42 08       	r0 = r6 + Null;
8420210c:	05 f0 3d e0 	call (m) $_cbops_insert_operator_into_graph;
        spkr_num_ref_ops++;
84202110:	0a 75       	r8 = r8 + 1;
        /* save last operator in the reference sub-path and
         * also the number of operator in the sub-path,
         * these will be required when removing the
         * reference path
         */
        op_extra_data->spkr_ref_last_op = op_ptr;
84202112:	69 f0 aa 8e 	M[r4 + 680] = r7;
        op_extra_data->spkr_num_ref_ops = spkr_num_ref_ops;
84202116:	6a f0 a6 8e 	M[r4 + 664] = r8;

        /* Now speaker graph includes reference sub path */
        op_extra_data->spkr_ref_active = TRUE;
8420211a:	47 20       	r5 = Null + 1;
8420211c:	67 f0 a0 8e 	M[r4 + 640] = r5;

        /* have reasonable distance between MIC and REF at the beginning,
		 * assumes MIC buffer is empty now.
		 */
        cbuffer_move_write_to_read_point(op_extra_data->output_stream[AEC_REF_REFERENCE_TERMINAL],
                                         op_extra_data->sync_block.jitter/2);
84202120:	62 f0 85 88 	r0 = M[r4 + 532];
84202124:	13 50       	r1 = r0 LSHIFT -1;
84202126:	32 a8       	r0 = M[r4 + 64];
84202128:	ff fd 52 f1 	call (m) 0x2c57a;
8420212c:	33 e2 
 *
 * \param op pointer to cbop
 */
static inline void cbops_reshresh_buffers(cbops_graph *graph)
{
   graph->refresh_buffers = TRUE;
8420212e:	87 f0 07 8e 	M[r6 + 28] = r5;

84202132 <Lc_aec_reference_spkr_include_ref_path_10>:
    /* No action if no speaker graph */
    if(NULL == spkr_graph)
    {
        /* nothing to do but we expect no reference output */
        PL_ASSERT(op_extra_data->spkr_ref_active == FALSE);
        return TRUE;
84202132:	42 20       	r0 = Null + 1;
84202134:	72 6e       	jump (m) Lc_aec_reference_spkr_include_ref_path_22;

84202136 <Lc_aec_reference_spkr_include_ref_path_11>:
    }

    if(!include_ref_path == !op_extra_data->spkr_ref_active)
84202136:	02 00       	r0 = Null + Null;
84202138:	08 04       	Null = rMAC - Null;
8420213a:	20 f0 42 ce 	if EQ r0 = Null + 1;
8420213e:	04 00       	r2 = Null + Null;
84202140:	60 f0 a0 88 	Null = M[r4 + 640];
84202144:	20 f0 44 ce 	if EQ r2 = Null + 1;
84202148:	10 05       	Null = r0 - r2;
8420214a:	f4 61       	if EQ jump (m) Lc_aec_reference_spkr_include_ref_path_10;

8420214c <Lc_aec_reference_spkr_include_ref_path_12>:
         * as current state.
         */
        return TRUE;
    }

    if(include_ref_path)
8420214c:	08 04       	Null = rMAC - Null;
8420214e:	3e 60       	if EQ jump (m) Lc_aec_reference_spkr_include_ref_path_16;

84202150 <Lc_aec_reference_spkr_include_ref_path_13>:
    {
        /* Adding Reference path to speaker graph */

        unsigned ref_input_idx = op_extra_data->spkr_ref_input_idx;
84202150:	61 f0 a1 88 	rMAC = M[r4 + 644];
84202154:	41 de       	M[FP + 32] = rMAC;
        unsigned ref_rm_in_idx = ref_input_idx;
84202156:	49 de       	M[FP + 36] = rMAC;
        cbops_op *after = op_extra_data->spkr_ref_point_op;
84202158:	69 f0 a8 88 	r7 = M[r4 + 672];
        unsigned spkr_num_ref_ops = 0;
8420215c:	02 09       	r8 = Null + Null;

        /* set buffer index for reference output in cbops graph */
        cbops_set_output_io_buffer(spkr_graph,
                                   ref_idx,
                                   ref_idx,
                                   op_extra_data->output_stream[AEC_REF_REFERENCE_TERMINAL]);
8420215e:	35 a8       	r3 = M[r4 + 64];
84202160:	1c 00       	r2 = r1 + Null;
84202162:	42 08       	r0 = r6 + Null;
84202164:	ff fd a6 f0 	call (m) 0x16e34;
84202168:	31 e6 

        /* see if resampler is needed in reference path */
        if(op_extra_data->input_rate != op_extra_data->output_rate)
8420216a:	61 f0 64 88 	rMAC = M[r4 + 400];
8420216e:	62 f0 65 88 	r0 = M[r4 + 404];
84202172:	88 04       	Null = rMAC - r0;
84202174:	a3 61       	if EQ jump (m) Lc_aec_reference_spkr_include_ref_path_5;

84202176 <Lc_aec_reference_spkr_include_ref_path_14>:
        {
            /* resampler outputs into internal buffer */
            ref_rm_in_idx = ref_idx+1;
84202176:	39 d8       	rMAC = M[FP + 28];
84202178:	4b 20       	r1 = rMAC + 1;
8420217a:	4b de       	M[FP + 36] = r1;
            /* NOTE: left scratch input is input to resampler */

            cbops_set_internal_io_buffer(spkr_graph,
                                         ref_rm_in_idx,
                                         ref_rm_in_idx,
                                         op_extra_data->scratch_bufs[op_extra_data->spkr_ref_scratch_idx]);
8420217c:	62 f0 a2 88 	r0 = M[r4 + 648];
84202180:	31 00       	rMAC = r4 + Null;
84202182:	1c 00       	r2 = r1 + Null;
84202184:	52 54       	r0 = r0 LSHIFT 2;
84202186:	51 00       	rMAC = r0 + rMAC;
84202188:	15 f0 21 88 	r3 = M[rMAC + 132];
8420218c:	42 08       	r0 = r6 + Null;
8420218e:	ff fd a6 f0 	call (m) 0x16e66;
84202192:	39 e6 

            /* Add reference sample rate conversion (input_rate --> output_rate) - for 1 channel only */
            op_ptr = create_iir_resamplerv2_op(1, &ref_input_idx, &ref_rm_in_idx,
                                               op_extra_data->input_rate, op_extra_data->output_rate,
                                               op_extra_data->resampler_temp_buffer_size,
                                               op_extra_data->resampler_temp_buffer, 0, 0, 0);
84202194:	00 f0 30 cf 	push Null;
84202198:	00 f0 30 cf 	push Null;
8420219c:	00 f0 30 cf 	push Null;
842021a0:	61 f0 32 88 	rMAC = M[r4 + 200];
842021a4:	09 1c       	pushm <rMAC>;
842021a6:	61 f0 91 88 	rMAC = M[r4 + 580];
842021aa:	09 1c       	pushm <rMAC>;
842021ac:	61 f0 65 88 	rMAC = M[r4 + 404];
842021b0:	09 1c       	pushm <rMAC>;
842021b2:	65 f0 64 88 	r3 = M[r4 + 400];
842021b6:	44 12       	r2 = FP + 36;
842021b8:	03 12       	r1 = FP + 32;
842021ba:	42 20       	r0 = Null + 1;
842021bc:	05 f0 39 e2 	call (m) $_create_iir_resamplerv2_op;
842021c0:	7a 4c       	SP = SP + -24;
842021c2:	17 00       	r5 = r0 + Null;

            if(op_ptr == NULL)
842021c4:	6f 63       	if NE jump (m) Lc_aec_reference_spkr_include_ref_path_4;

842021c6 <Lc_aec_reference_spkr_include_ref_path_15>:
            {
                return FALSE;
842021c6:	02 00       	r0 = Null + Null;
842021c8:	28 6e       	jump (m) Lc_aec_reference_spkr_include_ref_path_22;

842021ca <Lc_aec_reference_spkr_include_ref_path_16>:
        DEBUG_GRAPHS("AEC REFERENCE: Reference path added!" );
    }
    else
    {
        /* removing sub-graph starts from its last operator */
        cbops_op *op = op_extra_data->spkr_ref_last_op;
842021ca:	63 f0 aa 88 	r1 = M[r4 + 680];
        unsigned i;

        /* remove all the ops in the reference sub-path */
        for (i=0; i < op_extra_data->spkr_num_ref_ops; ++i)
842021ce:	07 00       	r5 = Null + Null;

842021d0 <Lc_aec_reference_spkr_include_ref_path_17>:
842021d0:	61 f0 a6 88 	rMAC = M[r4 + 664];
842021d4:	78 04       	Null = r5 - rMAC;
842021d6:	02 f0 95 e0 	if C jump (m) Lc_aec_reference_spkr_include_ref_path_19;

842021da <Lc_aec_reference_spkr_include_ref_path_18>:
        {
            cbops_op *prev_op = op->prev_operator_addr;
842021da:	39 f0 00 e8 	r7 = M[r1 + Null];
            cbops_remove_operator_from_graph(spkr_graph, op);
842021de:	42 08       	r0 = r6 + Null;
842021e0:	04 f0 3b e8 	call (m) $_cbops_remove_operator_from_graph;
            op = prev_op;
842021e4:	4b 08       	r1 = r7 + Null;
        /* removing sub-graph starts from its last operator */
        cbops_op *op = op_extra_data->spkr_ref_last_op;
        unsigned i;

        /* remove all the ops in the reference sub-path */
        for (i=0; i < op_extra_data->spkr_num_ref_ops; ++i)
842021e6:	7f 20       	r5 = r5 + 1;
842021e8:	f4 6f       	jump (m) Lc_aec_reference_spkr_include_ref_path_17;

842021ea <Lc_aec_reference_spkr_include_ref_path_19>:
            cbops_remove_operator_from_graph(spkr_graph, op);
            op = prev_op;
        }

        /*  tell the cbops not to care about reference buffer any more */
        cbops_unset_buffer(spkr_graph, ref_idx);
842021ea:	3b d8       	r1 = M[FP + 28];
842021ec:	42 08       	r0 = r6 + Null;
842021ee:	04 f0 39 ea 	call (m) $_cbops_unset_buffer;

        if(op_extra_data->spkr_ref_rs_op != NULL)
842021f2:	61 f0 ac 88 	rMAC = M[r4 + 688];
842021f6:	08 60       	if EQ jump (m) Lc_aec_reference_spkr_include_ref_path_21;

842021f8 <Lc_aec_reference_spkr_include_ref_path_20>:
        {
            /* if we have resampler in the reference path
             * then also the reserved index buffer should
             * get unset.
             */
            cbops_unset_buffer(spkr_graph, op_extra_data->spkr_ref_rs_idx);
842021f8:	63 f0 a7 88 	r1 = M[r4 + 668];
842021fc:	42 08       	r0 = r6 + Null;
842021fe:	04 f0 29 ea 	call (m) $_cbops_unset_buffer;
            op_extra_data->spkr_ref_rs_op = NULL;
84202202:	60 f0 ac 8e 	M[r4 + 688] = Null;

84202206 <Lc_aec_reference_spkr_include_ref_path_21>:
        }

        op_extra_data->spkr_num_ref_ops = 0;
84202206:	60 f0 a6 8e 	M[r4 + 664] = Null;
        op_extra_data->spkr_ref_last_op = NULL;
8420220a:	60 f0 aa 8e 	M[r4 + 680] = Null;
        op_extra_data->ref_sw_rateadj_op = NULL;
8420220e:	60 f0 90 8e 	M[r4 + 576] = Null;

        /* speaker graph no longer has reference sub-path */
        op_extra_data->spkr_ref_active = FALSE;
84202212:	60 f0 a0 8e 	M[r4 + 640] = Null;
84202216:	8e 6f       	jump (m) Lc_aec_reference_spkr_include_ref_path_10;

84202218 <Lc_aec_reference_spkr_include_ref_path_22>:
        DEBUG_GRAPHS("AEC REFERENCE: Reference path removed!" );
    }
    return TRUE;
}
84202218:	f5 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, rLink>;
8420221a:	d8 4c       	rts;

8420221c <$_aec_reference_stop_reset>:
    base_op_change_response_status(response_data,STATUS_OK);
    return TRUE;
}

bool aec_reference_stop_reset(OPERATOR_DATA *op_data,void **response_data)
{
8420221c:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
8420221e:	16 00       	r4 = r0 + Null;
84202220:	1f 00       	r5 = r1 + Null;
    patch_fn_shared(aec_reference);

    if(!base_op_build_std_response(STATUS_CMD_FAILED,op_data->id,response_data))
84202222:	73 88       	r1 = M[r4 + 4];
84202224:	02 f0 00 60 	r0 = Null + 4096;
84202228:	3c 00       	r2 = r5 + Null;
8420222a:	ef fd ef ff 	call (m) 0x204;
8420222e:	3b ee 
84202230:	10 04       	Null = r0 - Null;
84202232:	03 62       	if NE jump (m) Lc_aec_reference_stop_reset_3;

84202234 <Lc_aec_reference_stop_reset_2>:
    {
        return(FALSE);
84202234:	02 00       	r0 = Null + Null;
84202236:	0b 6e       	jump (m) Lc_aec_reference_stop_reset_6;

84202238 <Lc_aec_reference_stop_reset_3>:
    }
    /* do something only if the current state is "running" */
    if(op_data->state == OP_RUNNING)
84202238:	31 b0       	rMAC = MBS[r4 + 24];
8420223a:	04 62       	if NE jump (m) Lc_aec_reference_stop_reset_5;

8420223c <Lc_aec_reference_stop_reset_4>:
    {
        aec_reference_cleanup(op_data);
8420223c:	32 00       	r0 = r4 + Null;
8420223e:	f8 ff 37 e0 	call (m) $_aec_reference_cleanup;

84202242 <Lc_aec_reference_stop_reset_5>:
    }

    /* operator state variable set to not running state. based on base_op.c */
    op_data->state = OP_NOT_RUNNING;
84202242:	41 20       	rMAC = Null + 1;
84202244:	31 ba       	MB[r4 + 24] = rMAC;
84202246:	39 e8       	rMAC = M[r5 + Null];
84202248:	48 8e       	M[rMAC + 4] = Null;
    base_op_change_response_status(response_data,STATUS_OK);
    return TRUE;
8420224a:	42 20       	r0 = Null + 1;

8420224c <Lc_aec_reference_stop_reset_6>:
}
8420224c:	f2 48       	popm <FP, r4, r5, rLink>;
8420224e:	d8 4c       	rts;

84202250 <$_aec_reference_update_mic_reference_sync>:
 * aec_reference_update_mic_reference_sync
 * \brief keeps mic and ref syncronised by updatin mic or reference path warp value
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
void aec_reference_update_mic_reference_sync( AEC_REFERENCE_OP_DATA * op_extra_data)
{
84202250:	f5 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>, SP = SP + 0x10;
84202252:	16 00       	r4 = r0 + Null;
    int mic_ra = 0;
84202254:	02 09       	r8 = Null + Null;
    int spkr_ra = 0;
84202256:	01 09       	r7 = Null + Null;
    uint32 val;

    /* This is run in main loop, decimate update as it won't be
     * needed to get updated that often
     */
    op_extra_data->ref_update_counter++;
84202258:	61 f0 d0 88 	rMAC = M[r4 + 832];
8420225c:	49 20       	rMAC = rMAC + 1;
8420225e:	61 f0 d0 8e 	M[r4 + 832] = rMAC;
    if(op_extra_data->ref_update_counter >= AEC_REFERENCE_REF_RATE_UPDATE_PERIOD)
84202262:	48 26       	Null = rMAC - 9;
84202264:	a8 64       	if NC jump (m) Lc_aec_reference_update_mic_reference_sync_27;

84202266 <Lc_aec_reference_update_mic_reference_sync_2>:
    {
        op_extra_data->ref_update_counter = 0;
84202266:	60 f0 d0 8e 	M[r4 + 832] = Null;
        if(op_extra_data->spkr_rate_enactment == RATEMATCHING_SUPPORT_HW)
8420226a:	61 f0 71 88 	rMAC = M[r4 + 452];
8420226e:	88 24       	Null = rMAC - 2;
84202270:	0e 62       	if NE jump (m) Lc_aec_reference_update_mic_reference_sync_6;

84202272 <Lc_aec_reference_update_mic_reference_sync_3>:
            /* speaker is using HW rate adjustment, read the latest HW warp rate,
             * when using HW rate adjust pretend it is applied in SW and speaker rate
             * itself is perfect.
             * TODO: might need a constant offset for 44.1kHz-like speaker rates
             */
            if(get_override_ep_current_hw_warp(op_extra_data->spkr_endpoint, &val))
84202272:	c3 11       	r1 = FP + 28;
84202274:	62 f0 80 88 	r0 = M[r4 + 512];
84202278:	05 f0 23 e1 	call (m) $_get_override_ep_current_hw_warp;
8420227c:	10 04       	Null = r0 - Null;
8420227e:	03 60       	if EQ jump (m) Lc_aec_reference_update_mic_reference_sync_5;

84202280 <Lc_aec_reference_update_mic_reference_sync_4>:
            {
                spkr_ra = (int)val;
84202280:	e9 f0 07 88 	r7 = M[FP + 28];

84202284 <Lc_aec_reference_update_mic_reference_sync_5>:
            }
            spkr_rt = (1<<STREAM_RATEMATCHING_FIX_POINT_SHIFT);
84202284:	04 f0 08 f0 	r6 = Null + 4194304;
84202288:	00 40 
8420228a:	15 6e       	jump (m) Lc_aec_reference_update_mic_reference_sync_9;

8420228c <Lc_aec_reference_update_mic_reference_sync_6>:
        }
        else
        {
            /* get the latest speaker rate measurement */
            spkr_rt = rate_monitor_op_get_rate(op_extra_data->spkr_rate_monitor_op,0);
8420228c:	62 f0 73 88 	r0 = M[r4 + 460];
84202290:	03 00       	r1 = Null + Null;
84202292:	ff fd 4c f3 	call 0x6bbf0;
84202296:	3e ea 
84202298:	10 09       	r6 = r0 + Null;
            if(op_extra_data->spkr_rate_enactment == RATEMATCHING_SUPPORT_SW
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
               /* if using standalone operator, no built-in adjust rate is applied */
               &&(0 == op_extra_data->spkr_ext_rate_adjust_op)
#endif
               )
8420229a:	61 f0 71 88 	rMAC = M[r4 + 452];
8420229e:	48 24       	Null = rMAC - 1;
842022a0:	0a 62       	if NE jump (m) Lc_aec_reference_update_mic_reference_sync_9;

842022a2 <Lc_aec_reference_update_mic_reference_sync_7>:
842022a2:	60 f0 ae 88 	Null = M[r4 + 696];
842022a6:	07 62       	if NE jump (m) Lc_aec_reference_update_mic_reference_sync_9;

842022a8 <Lc_aec_reference_update_mic_reference_sync_8>:
            {
                /* if SW rate adjustment is used, get the current value */
                spkr_ra = cbops_sra_get_current_rate_adjust(op_extra_data->spkr_sw_rateadj_op);
842022a8:	62 f0 7e 88 	r0 = M[r4 + 504];
842022ac:	ff fd a5 f0 	call (m) 0x16cba;
842022b0:	2f e0 
842022b2:	11 09       	r7 = r0 + Null;

842022b4 <Lc_aec_reference_update_mic_reference_sync_9>:
            }
        }
        if(op_extra_data->mic_rate_enactment == RATEMATCHING_SUPPORT_HW)
842022b4:	61 f0 68 88 	rMAC = M[r4 + 416];
842022b8:	88 24       	Null = rMAC - 2;
842022ba:	0f 62       	if NE jump (m) Lc_aec_reference_update_mic_reference_sync_13;

842022bc <Lc_aec_reference_update_mic_reference_sync_10>:
            /* MIC is using HW rate adjustment, read the latest HW warp rate,
             * when using HW rate adjust pretend it is applied in SW and mic rate
             * itself is perfect.
             * TODO: might need a constant offset for 44.1khz-like mic rates
             */
            if(get_override_ep_current_hw_warp(op_extra_data->mic_endpoint, &val))
842022bc:	c3 11       	r1 = FP + 28;
842022be:	62 f0 7f 88 	r0 = M[r4 + 508];
842022c2:	04 f0 39 ee 	call (m) $_get_override_ep_current_hw_warp;
842022c6:	10 04       	Null = r0 - Null;
842022c8:	04 60       	if EQ jump (m) Lc_aec_reference_update_mic_reference_sync_12;

842022ca <Lc_aec_reference_update_mic_reference_sync_11>:
            {
                mic_ra = -(int)val;
842022ca:	39 d8       	rMAC = M[FP + 28];
842022cc:	1f f0 0a c2 	r8 = Null - rMAC;

842022d0 <Lc_aec_reference_update_mic_reference_sync_12>:
            }
            mic_rt = (1<<STREAM_RATEMATCHING_FIX_POINT_SHIFT);
842022d0:	04 f0 07 f0 	r5 = Null + 4194304;
842022d4:	00 40 
842022d6:	15 6e       	jump (m) Lc_aec_reference_update_mic_reference_sync_16;

842022d8 <Lc_aec_reference_update_mic_reference_sync_13>:
        }
        else
        {
            /* get the latest speaker rate measurement */
            mic_rt = rate_monitor_op_get_rate(op_extra_data->mic_rate_monitor_op,0);
842022d8:	62 f0 6b 88 	r0 = M[r4 + 428];
842022dc:	03 00       	r1 = Null + Null;
842022de:	ff fd 4c f3 	call 0x6bbf0;
842022e2:	32 e8 
842022e4:	17 00       	r5 = r0 + Null;
            if(op_extra_data->mic_rate_enactment == RATEMATCHING_SUPPORT_SW
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
               /* if using standalone operator, no built-in adjust rate is applied */
               &&(0 == op_extra_data->mic_ext_rate_adjust_op)
#endif
               )
842022e6:	61 f0 68 88 	rMAC = M[r4 + 416];
842022ea:	48 24       	Null = rMAC - 1;
842022ec:	0a 62       	if NE jump (m) Lc_aec_reference_update_mic_reference_sync_16;

842022ee <Lc_aec_reference_update_mic_reference_sync_14>:
842022ee:	60 f0 ad 88 	Null = M[r4 + 692];
842022f2:	07 62       	if NE jump (m) Lc_aec_reference_update_mic_reference_sync_16;

842022f4 <Lc_aec_reference_update_mic_reference_sync_15>:
            {
                mic_ra = cbops_sra_get_current_rate_adjust(op_extra_data->mic_sw_rateadj_op);
842022f4:	62 f0 7d 88 	r0 = M[r4 + 500];
842022f8:	ff fd a4 f0 	call (m) 0x16cba;
842022fc:	23 ee 
842022fe:	12 09       	r8 = r0 + Null;

84202300 <Lc_aec_reference_update_mic_reference_sync_16>:
         *   However to avoid any need to discard/insert in long runs (will cause echo canceller
         *   re-adaptation) we make sure that latency is always tending towards the centre of the
         *   desired range.
         */

        if(op_extra_data->sync_block.block_size != 0)
84202300:	60 f0 86 88 	Null = M[r4 + 536];
84202304:	1e 60       	if EQ jump (m) Lc_aec_reference_update_mic_reference_sync_18;

84202306 <Lc_aec_reference_update_mic_reference_sync_17>:
        {
            int ref_mic_delay_to_centre =
                (int) op_extra_data->sync_block.ref_delay +
                (int) (op_extra_data->sync_block.jitter/2) -
                (int) op_extra_data->sync_block.speaker_delay;
84202306:	62 f0 85 88 	r0 = M[r4 + 532];
8420230a:	61 f0 8a 88 	rMAC = M[r4 + 552];
8420230e:	12 50       	r0 = r0 LSHIFT -1;
84202310:	51 00       	rMAC = r0 + rMAC;
84202312:	62 f0 8f 88 	r0 = M[r4 + 572];
84202316:	89 04       	rMAC = rMAC - r0;
            op_extra_data->ref_mic_adj_fix += ref_mic_delay_to_centre * AEC_REFERENCE_REF_MIC_ADJ_COEFF;
84202318:	62 f0 d7 88 	r0 = M[r4 + 860];
8420231c:	53 00       	r1 = r0 + rMAC;
8420231e:	63 f0 d7 8e 	M[r4 + 860] = r1;
            op_extra_data->ref_mic_adj_fix = pl_min(op_extra_data->ref_mic_adj_fix, AEC_REFERENCE_REF_MIC_ADJ_MAX);
84202322:	02 f0 d6 40 	r0 = Null + 214;
84202326:	5f f2 43 ce 	r1 = MIN r0;
8420232a:	63 f0 d7 8e 	M[r4 + 860] = r1;
            op_extra_data->ref_mic_adj_fix = pl_max(op_extra_data->ref_mic_adj_fix, -AEC_REFERENCE_REF_MIC_ADJ_MAX);
8420232e:	63 f0 d7 88 	r1 = M[r4 + 860];
84202332:	f2 f7 2a 7b 	r0 = Null + -214;
84202336:	6f f2 43 ce 	r1 = MAX r0;
8420233a:	63 f0 d7 8e 	M[r4 + 860] = r1;
8420233e:	03 6e       	jump (m) Lc_aec_reference_update_mic_reference_sync_19;

84202340 <Lc_aec_reference_update_mic_reference_sync_18>:
        }
        else
        {
            /* Note: REF-MIC latency control is disabled for block_size == 0 */
            op_extra_data->ref_mic_adj_fix = 0;
84202340:	60 f0 d7 8e 	M[r4 + 860] = Null;

84202344 <Lc_aec_reference_update_mic_reference_sync_19>:
        }

        if(op_extra_data->mic_sync_enable)
84202344:	60 f0 d4 88 	Null = M[r4 + 848];
84202348:	22 60       	if EQ jump (m) Lc_aec_reference_update_mic_reference_sync_25;

8420234a <Lc_aec_reference_update_mic_reference_sync_20>:
        {
            /* if we are syncronising MIC to REF then calculate the rate needs
             * to be applied to the mic path, so it will be syncronised to
             * REFERENCE output(i.e. speaker input)*/
            int new_mic_ra = (int) aecref_calc_sync_mic_rate(spkr_ra,spkr_rt,mic_rt) - op_extra_data->ref_mic_adj_fix;
8420234a:	3c 00       	r2 = r5 + Null;
8420234c:	43 08       	r1 = r6 + Null;
8420234e:	4a 08       	r0 = r7 + Null;
84202350:	05 f0 35 ea 	call (m) $_aecref_calc_sync_mic_rate;
84202354:	61 f0 d7 88 	rMAC = M[r4 + 860];
84202358:	57 04       	r5 = r0 - rMAC;
            int diff = new_mic_ra - mic_ra;
8420235a:	af f7 03 c2 	r1 = r5 - r8;
            if(diff != 0)
8420235e:	18 04       	Null = r1 - Null;
84202360:	13 60       	if EQ jump (m) Lc_aec_reference_update_mic_reference_sync_24;

84202362 <Lc_aec_reference_update_mic_reference_sync_21>:
            {
                if(op_extra_data->mic_rate_enactment == RATEMATCHING_SUPPORT_HW)
84202362:	61 f0 68 88 	rMAC = M[r4 + 416];
84202366:	88 24       	Null = rMAC - 2;
84202368:	07 62       	if NE jump (m) Lc_aec_reference_update_mic_reference_sync_23;

8420236a <Lc_aec_reference_update_mic_reference_sync_22>:
                {
                    /* HW rate adjustment, apply the change only */
                    set_override_ep_ratematch_adjustment(op_extra_data->mic_endpoint, diff);
8420236a:	62 f0 7f 88 	r0 = M[r4 + 508];
8420236e:	ff fd 13 f0 	call (m) 0x4aa0;
84202372:	33 e9 
84202374:	09 6e       	jump (m) Lc_aec_reference_update_mic_reference_sync_24;

84202376 <Lc_aec_reference_update_mic_reference_sync_23>:
                else
                {
                    /* apply new SW rate adjustment */
                    cbops_sra_set_rate_adjust(op_extra_data->mic_sw_rateadj_op,
                                              op_extra_data->num_mic_channels,
                                              new_mic_ra);
84202376:	63 f0 78 88 	r1 = M[r4 + 480];
8420237a:	62 f0 7d 88 	r0 = M[r4 + 500];
8420237e:	3c 00       	r2 = r5 + Null;
84202380:	ff fd a4 f0 	call (m) 0x16c9c;
84202384:	3d e8 

84202386 <Lc_aec_reference_update_mic_reference_sync_24>:
                }
            }
            op_extra_data->mic_rate_adjustment = new_mic_ra;
84202386:	67 f0 69 8e 	M[r4 + 420] = r5;
8420238a:	13 6e       	jump (m) Lc_aec_reference_update_mic_reference_sync_26;

8420238c <Lc_aec_reference_update_mic_reference_sync_25>:
        {

            /* We are synchronising REFERENCE to MIC output,
             * Update reference SW rate adjustment.
             */
            op_extra_data->sync_block.rm_adjustment = (int) aecref_calc_ref_rate(mic_rt,mic_ra,spkr_rt,spkr_ra) + op_extra_data->ref_mic_adj_fix;
8420238c:	4d 08       	r3 = r7 + Null;
8420238e:	44 08       	r2 = r6 + Null;
84202390:	53 08       	r1 = r8 + Null;
84202392:	3a 00       	r0 = r5 + Null;
84202394:	ff fd 6e f1 	call (m) 0x3015e;
84202398:	2b ee 
8420239a:	61 f0 d7 88 	rMAC = M[r4 + 860];
8420239e:	8c 00       	r2 = rMAC + r0;
842023a0:	64 f0 8c 8e 	M[r4 + 560] = r2;

            /* update rate adjust for reference path */
            cbops_sra_set_rate_adjust(op_extra_data->ref_sw_rateadj_op,
                                      1,
                                      op_extra_data->sync_block.rm_adjustment);
842023a4:	43 20       	r1 = Null + 1;
842023a6:	62 f0 90 88 	r0 = M[r4 + 576];
842023aa:	ff fd a4 f0 	call (m) 0x16c9c;
842023ae:	33 e7 

842023b0 <Lc_aec_reference_update_mic_reference_sync_26>:

        }
        /* Clear frm_count to disable backup rate adjustment
         *  when rate adjustment is enacted
         */
        op_extra_data->sync_block.frm_count = 0;
842023b0:	60 f0 8b 8e 	M[r4 + 556] = Null;

842023b4 <Lc_aec_reference_update_mic_reference_sync_27>:
    }
}
842023b4:	f5 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, rLink>;
842023b6:	d8 4c       	rts;

842023b8 <$_build_sidetone_graph>:
 * \brief updates speaker graph to include/exclude side tone mixing
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
bool build_sidetone_graph(AEC_REFERENCE_OP_DATA* op_extra_data)
{
842023b8:	f6 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x10;
842023ba:	16 00       	r4 = r0 + Null;
    tCbuffer *mic_buf = op_extra_data->input_stream[AEC_REF_MIC_TERMINAL1];
842023bc:	b7 88       	r5 = M[r4 + 8];
    unsigned* idxs;
    unsigned num_io = 2;
842023be:	10 71       	r6 = Null + 2;
    cbops_graph *sidetone_graph;
    cbops_op *op_ptr;
    cbops_op *override_op_ptr;
    unsigned st_mic_idx = 0;          /* buffer index for mic input */
    unsigned st_filter_out_idx = 1;   /* buffer index for sidetone filter output */
    unsigned resampler_out_idx = 0;   /* buffer index for output of possible resampler */
842023c0:	40 de       	M[FP + 32] = Null;
    unsigned sidetone_idx = st_filter_out_idx; /* buffer index for sidetone buffer */
842023c2:	0a 71       	r8 = Null + 1;
    unsigned sidetone_buf_size;
    unsigned spkr_threshold = frac_mult(op_extra_data->spkr_rate, op_extra_data->kick_period_frac)+1;
842023c4:	62 f0 6e 88 	r0 = M[r4 + 440];
842023c8:	63 f0 96 88 	r1 = M[r4 + 600];
842023cc:	00 f3 72 c9 	r0 = r0 * r1 (frac);
842023d0:	51 20       	rMAC = r0 + 1;
842023d2:	49 de       	M[FP + 36] = rMAC;
    unsigned safety_threshold;
    unsigned spkr_channel_status = GetSpkrChannelStatus(op_extra_data);
842023d4:	61 f0 76 88 	rMAC = M[r4 + 472];
842023d8:	19 f1 f0 1f 	r7 = rMAC AND 0x3ff0;
    unsigned num_sidetone_spkrs = 1;
842023dc:	53 09       	r9 = r8 + Null;
     * --------------------------------------------------------------------------------------------------*/

    patch_fn_shared(aec_reference);

    /* destroy cbops graph if already running */
    if(NULL != op_extra_data->sidetone_graph)
842023de:	61 f0 99 88 	rMAC = M[r4 + 612];
842023e2:	03 60       	if EQ jump (m) Lc_build_sidetone_graph_3;

842023e4 <Lc_build_sidetone_graph_2>:
    {
        aec_reference_cleanup_sidetone_graph(op_extra_data);
842023e4:	32 00       	r0 = r4 + Null;
842023e6:	f9 4e       	call (m) $_aec_reference_cleanup_sidetone_graph;

842023e8 <Lc_build_sidetone_graph_3>:
    }

    /* see if we need to setup a separate graph for sidetone mixing */
    if(op_extra_data->sidetone_method != AEC_SIDETONE_IN_SW_USING_SEPARATE_GRAPH)
842023e8:	61 f0 70 90 	rMAC = MBS[r4 + 624];
842023ec:	c8 24       	Null = rMAC - 3;
842023ee:	e1 62       	if NE jump (m) Lc_build_sidetone_graph_25;

842023f0 <Lc_build_sidetone_graph_4>:
    }

    DEBUG_GRAPHS("AEC_REFERENCE: Building sidetone graph ...");

    /* Determine number of speakers to have sidetone */
    if((spkr_channel_status&AEC_REFERENCE_CONSTANT_CONN_TYPE_PARA) == 0)
842023f0:	91 f0 00 10 	rMAC = r7 AND 0x1000;
842023f4:	05 62       	if NE jump (m) Lc_build_sidetone_graph_7;

842023f6 <Lc_build_sidetone_graph_5>:
    {
        if((spkr_channel_status&AEC_REFERENCE_CONSTANT_CONN_TYPE_MIX) == 0)
842023f6:	91 f1 00 00 	rMAC = r7 AND 0x2000;
842023fa:	02 62       	if NE jump (m) Lc_build_sidetone_graph_7;

842023fc <Lc_build_sidetone_graph_6>:
        {
            /* mono to stereo, mix to both */
            num_sidetone_spkrs = 2;
842023fc:	43 09       	r9 = r6 + Null;

842023fe <Lc_build_sidetone_graph_7>:
        }
    }

    /* limit to available speakers */
    num_sidetone_spkrs = MIN(num_sidetone_spkrs, op_extra_data->num_spkr_channels);
842023fe:	61 f0 77 88 	rMAC = M[r4 + 476];
84202402:	1f fb 00 c2 	Null = r9 - rMAC;
84202406:	02 64       	if NC jump (m) Lc_build_sidetone_graph_9;

84202408 <Lc_build_sidetone_graph_8>:
84202408:	0b 09       	r9 = rMAC + Null;

8420240a <Lc_build_sidetone_graph_9>:

    /* we don't expect Sidetone buffer already existing at this point */
    PL_ASSERT(op_extra_data->sidetone_buf == NULL);
8420240a:	61 f0 31 88 	rMAC = M[r4 + 196];
8420240e:	d3 60       	if EQ jump (m) Lc_build_sidetone_graph_26;

84202410 <Lc_build_sidetone_graph_10>:
84202410:	03 f0 bb 41 	r1 = Null + 443;
84202414:	02 f0 13 60 	r0 = Null + 4115;
84202418:	ff fd 8d f0 	call (m) 0x13f12;
8420241c:	3b e7 
8420241e:	db 6e       	jump (m) Lc_build_sidetone_graph_30;

84202420 <Lc_build_sidetone_graph_11>:
    /* Allocate Buffer for sidetone samples,
     * size = sidetone_task_period + 1ms for latency control
     */
    sidetone_buf_size = frac_mult(op_extra_data->spkr_rate,
                                  op_extra_data->kick_period_frac +
                                  FRACTIONAL(0.001));
84202420:	62 f0 6e 88 	r0 = M[r4 + 440];
84202424:	61 f0 96 88 	rMAC = M[r4 + 600];
84202428:	83 f0 13 f0 	r1 = rMAC + 2147483;
8420242c:	9b 28 
8420242e:	00 f3 72 c9 	r0 = r0 * r1 (frac);

    op_extra_data->sidetone_buf = cbuffer_create_with_malloc_fast(sidetone_buf_size, BUF_DESC_SW_BUFFER);
84202432:	03 00       	r1 = Null + Null;
84202434:	ff fd 81 f0 	call (m) 0x1279c;
84202438:	29 eb 
8420243a:	62 f0 31 8e 	M[r4 + 196] = r0;
    if(!op_extra_data->sidetone_buf)
8420243e:	61 f0 31 88 	rMAC = M[r4 + 196];
84202442:	c8 60       	if EQ jump (m) Lc_build_sidetone_graph_29;

84202444 <Lc_build_sidetone_graph_12>:
    }

    /* create clone cbuffers for mic buffer */
    op_extra_data->sidetone_mic_buf = cbuffer_create(mic_buf->base_addr,
                                                     cbuffer_get_size_in_words(mic_buf),
                                                     BUF_DESC_SW_BUFFER);
84202444:	3a 00       	r0 = r5 + Null;
84202446:	ff fd 82 f0 	call (m) 0x12858;
8420244a:	33 e0 
8420244c:	13 00       	r1 = r0 + Null;
8420244e:	fa 88       	r0 = M[r5 + 12];
84202450:	04 00       	r2 = Null + Null;
84202452:	ff fd 81 f0 	call (m) 0x12762;
84202456:	31 e8 
84202458:	62 f0 9a 8e 	M[r4 + 616] = r0;
    if(op_extra_data->sidetone_mic_buf == NULL)
8420245c:	61 f0 9a 88 	rMAC = M[r4 + 616];
84202460:	b9 60       	if EQ jump (m) Lc_build_sidetone_graph_29;

84202462 <Lc_build_sidetone_graph_13>:
        return FALSE;
    }


    /* do we need resampler for side tone generation */
    if(op_extra_data->spkr_rate != op_extra_data->mic_rate)
84202462:	61 f0 6e 88 	rMAC = M[r4 + 440];
84202466:	62 f0 66 88 	r0 = M[r4 + 408];
8420246a:	88 04       	Null = rMAC - r0;
8420246c:	05 60       	if EQ jump (m) Lc_build_sidetone_graph_15;

8420246e <Lc_build_sidetone_graph_14>:
    {
        /* Extra buffer needed between sidetone filter and resampler,
         * as resampler can't work in-place
         */
        num_io++;
8420246e:	18 71       	r6 = Null + 3;
        resampler_out_idx = st_filter_out_idx + 1;
84202470:	81 20       	rMAC = Null + 2;
84202472:	41 de       	M[FP + 32] = rMAC;
        sidetone_idx++;
84202474:	0a 09       	r8 = rMAC + Null;

84202476 <Lc_build_sidetone_graph_15>:

    /* create indexes for cbops buffers,
     * this needs to be deleted before leaving
     * this function.
     */
    idxs = create_default_indexes(num_io);
84202476:	42 08       	r0 = r6 + Null;
84202478:	ff fd a5 f0 	call (m) 0x16f08;
8420247c:	31 e4 
8420247e:	11 09       	r7 = r0 + Null;
    if(idxs == NULL)
84202480:	a9 60       	if EQ jump (m) Lc_build_sidetone_graph_29;

84202482 <Lc_build_sidetone_graph_16>:
    {
        return(FALSE);
    }

    /* Allocate sidetone graph */
    sidetone_graph = cbops_alloc_graph(num_io);
84202482:	42 08       	r0 = r6 + Null;
84202484:	ff fd a4 f0 	call (m) 0x16d76;
84202488:	33 e7 
8420248a:	10 09       	r6 = r0 + Null;
    if(!sidetone_graph)
8420248c:	9f 60       	if EQ jump (m) Lc_build_sidetone_graph_28;

8420248e <Lc_build_sidetone_graph_17>:
    {
        goto aFailed;
    }
    op_extra_data->sidetone_graph = sidetone_graph;
8420248e:	68 f0 99 8e 	M[r4 + 612] = r6;

    /* set mic input buffer */
    cbops_set_input_io_buffer(sidetone_graph,
                              st_mic_idx,
                              st_mic_idx,
                              op_extra_data->sidetone_mic_buf);
84202492:	65 f0 9a 88 	r3 = M[r4 + 616];
84202496:	04 00       	r2 = Null + Null;
84202498:	03 00       	r1 = Null + Null;
8420249a:	ff fd a4 f0 	call (m) 0x16e02;
8420249e:	29 eb 
     * into speakers by override operator)
     */
    cbops_set_output_io_buffer(sidetone_graph,
                               sidetone_idx,
                               sidetone_idx,
                               op_extra_data->sidetone_buf);
842024a0:	65 f0 31 88 	r3 = M[r4 + 196];
842024a4:	54 08       	r2 = r8 + Null;
842024a6:	53 08       	r1 = r8 + Null;
842024a8:	42 08       	r0 = r6 + Null;
842024aa:	ff fd a4 f0 	call (m) 0x16e34;
842024ae:	2b ec 
      Note:  Sidetone is before resampler.
      Better solution is to place it at lowest sample rate
    */
    op_ptr = create_sidetone_filter_op(st_mic_idx, st_filter_out_idx, 3,
                                       (cbops_sidetone_params*)&op_extra_data->params.OFFSET_ST_CLIP_POINT,
                                       (void*)&op_extra_data->params.OFFSET_ST_PEQ_CONFIG);
842024b0:	01 f0 0c ff 	push r4 + 268;
842024b4:	16 cf 
842024b6:	65 f0 f0 20 	r3 = r4 + 240;
842024ba:	c4 20       	r2 = Null + 3;
842024bc:	43 20       	r1 = Null + 1;
842024be:	02 00       	r0 = Null + Null;
842024c0:	03 f0 27 e8 	call (m) $_create_sidetone_filter_op;
842024c4:	7f 4c       	SP = SP + -4;
    op_extra_data->mic_sidetone_op = op_ptr;
    if(!op_ptr)
842024c6:	62 f0 6c 8e 	M[r4 + 432] = r0;
842024ca:	80 60       	if EQ jump (m) Lc_build_sidetone_graph_28;

842024cc <Lc_build_sidetone_graph_18>:
    {
        goto aFailed;
    }
    cbops_append_operator_to_graph(sidetone_graph,op_ptr);
842024cc:	13 00       	r1 = r0 + Null;
842024ce:	42 08       	r0 = r6 + Null;
842024d0:	ff fd a4 f0 	call (m) 0x16e96;
842024d4:	27 ee 

    /* DC remove on sidetone */
    op_ptr = create_dc_remove_op(1, &idxs[st_filter_out_idx], &idxs[st_filter_out_idx]);
842024d6:	94 f0 04 20 	r2 = r7 + 4;
842024da:	93 f0 04 20 	r1 = r7 + 4;
842024de:	42 20       	r0 = Null + 1;
842024e0:	ff fd 1c f1 	call (m) 0x25e40;
842024e4:	21 eb 
    if(!op_ptr)
842024e6:	10 04       	Null = r0 - Null;
842024e8:	71 60       	if EQ jump (m) Lc_build_sidetone_graph_28;

842024ea <Lc_build_sidetone_graph_19>:
    {
        goto aFailed;
    }
    cbops_append_operator_to_graph(sidetone_graph, op_ptr);
842024ea:	13 00       	r1 = r0 + Null;
842024ec:	42 08       	r0 = r6 + Null;
842024ee:	ff fd a4 f0 	call (m) 0x16e96;
842024f2:	29 ed 

    /* see if we need resampler in sidetone path */
    if(resampler_out_idx != 0)
842024f4:	41 d8       	rMAC = M[FP + 32];
842024f6:	29 60       	if EQ jump (m) Lc_build_sidetone_graph_22;

842024f8 <Lc_build_sidetone_graph_20>:
    {
        /* sidetone filter will write into scratch buff */
        cbops_set_internal_io_buffer(sidetone_graph,
                                     st_filter_out_idx,
                                     st_filter_out_idx,
                                     op_extra_data->scratch_bufs[0]);
842024f8:	65 f0 21 88 	r3 = M[r4 + 132];
842024fc:	44 20       	r2 = Null + 1;
842024fe:	23 00       	r1 = r2 + Null;
84202500:	42 08       	r0 = r6 + Null;
84202502:	ff fd a4 f0 	call (m) 0x16e66;
84202506:	25 eb 
                                           &idxs[st_filter_out_idx],
                                           &idxs[resampler_out_idx],
                                           op_extra_data->mic_rate,
                                           op_extra_data->spkr_rate,
                                           op_extra_data->resampler_temp_buffer_size,
                                           op_extra_data->resampler_temp_buffer, 0, 0, 0);
84202508:	00 f0 30 cf 	push Null;
8420250c:	00 f0 30 cf 	push Null;
84202510:	00 f0 30 cf 	push Null;
84202514:	61 f0 32 88 	rMAC = M[r4 + 200];
84202518:	09 1c       	pushm <rMAC>;
8420251a:	61 f0 91 88 	rMAC = M[r4 + 580];
8420251e:	09 1c       	pushm <rMAC>;
84202520:	61 f0 6e 88 	rMAC = M[r4 + 440];
84202524:	09 1c       	pushm <rMAC>;
84202526:	65 f0 66 88 	r3 = M[r4 + 408];
8420252a:	94 f0 08 20 	r2 = r7 + 8;
8420252e:	93 f0 04 20 	r1 = r7 + 4;
84202532:	42 20       	r0 = Null + 1;
84202534:	03 f0 21 e7 	call (m) $_create_iir_resamplerv2_op;
84202538:	7a 4c       	SP = SP + -24;
        if(!op_ptr)
8420253a:	10 04       	Null = r0 - Null;
8420253c:	47 60       	if EQ jump (m) Lc_build_sidetone_graph_28;

8420253e <Lc_build_sidetone_graph_21>:
        {
            goto aFailed;
        }
        cbops_append_operator_to_graph(sidetone_graph,op_ptr);
8420253e:	13 00       	r1 = r0 + Null;
84202540:	42 08       	r0 = r6 + Null;
84202542:	ff fd a4 f0 	call (m) 0x16e96;
84202546:	35 ea 

84202548 <Lc_build_sidetone_graph_22>:
    op_ptr = create_sink_overflow_disgard_op(1,                   /* number of channels */
                                             &idxs[sidetone_idx], /* buffer indexes */
                                             /* Minimum space needed in buffer at the beginning of
                                              * process, if not enough space this op will discard some
                                              * samples to free space for new incoming mic sapmples */
                                             spkr_threshold);
84202548:	01 fa d2 c8 	r0 = r8 LSHIFT 2;
8420254c:	49 08       	rMAC = r7 + Null;
8420254e:	51 00       	rMAC = r0 + rMAC;
84202550:	0f 00       	r5 = rMAC + Null;
84202552:	42 20       	r0 = Null + 1;
84202554:	3b 00       	r1 = r5 + Null;
84202556:	4c d8       	r2 = M[FP + 36];
84202558:	ff fd 4c f1 	call (m) 0x2bdc4;
8420255c:	2d e3 
#if defined(IO_DEBUG)
    st_disgard_op = op_ptr;
8420255e:	e0 f0 02 f0 	M[Null + $_st_disgard_op] = r0;
84202562:	5a 8e 
#endif

    if(!op_ptr)
84202564:	10 04       	Null = r0 - Null;
84202566:	32 60       	if EQ jump (m) Lc_build_sidetone_graph_28;

84202568 <Lc_build_sidetone_graph_23>:
    {
        goto aFailed;
    }
    cbops_append_operator_to_graph(sidetone_graph,op_ptr);
84202568:	13 00       	r1 = r0 + Null;
8420256a:	42 08       	r0 = r6 + Null;
8420256c:	ff fd a4 f0 	call (m) 0x16e96;
84202570:	2b e9 
     */

    /* safety_threshold, this is a small safety zone to make sure
     * sidetone mixing is ahead of reading by HW, (1/4 of a ms)
     */
    safety_threshold = frac_mult(op_extra_data->spkr_rate, FRACTIONAL(0.00025))+1;
84202572:	62 f0 6e 88 	r0 = M[r4 + 440];
84202576:	00 f0 13 f4 	r1 = Null + 536870;
8420257a:	26 61 
8420257c:	00 f3 72 c9 	r0 = r0 * r1 (frac);
84202580:	51 20       	rMAC = r0 + 1;
        &op_extra_data->output_stream[AEC_REF_SPKR_TERMINAL1], /* spkr mmu buffer(s) */
        num_sidetone_spkrs,                                 /* number of speaker(s) */
        &idxs[sidetone_idx],                                /* indexes for sidetone buffer */
        spkr_threshold,                                     /* speaker threshold */
        safety_threshold                                    /* safety threshold */
                                                );
84202582:	09 1c       	pushm <rMAC>;
84202584:	49 d8       	rMAC = M[FP + 36];
84202586:	08 f0 42 e0 	pushm <rMAC, r5>;
8420258a:	64 f0 44 20 	r2 = r4 + 68;
8420258e:	b2 88       	r0 = M[r4 + 8];
84202590:	03 00       	r1 = Null + Null;
84202592:	5d 08       	r3 = r9 + Null;
84202594:	02 f0 3d e6 	call (m) $_create_aec_ref_sidetone_op;
84202598:	7d 4c       	SP = SP + -12;
    if(!override_op_ptr)
8420259a:	10 04       	Null = r0 - Null;
8420259c:	17 60       	if EQ jump (m) Lc_build_sidetone_graph_28;

8420259e <Lc_build_sidetone_graph_24>:
    {
        goto aFailed;
    }
    cbops_set_override_operator(sidetone_graph, override_op_ptr);
8420259e:	13 00       	r1 = r0 + Null;
842025a0:	42 08       	r0 = r6 + Null;
842025a2:	ff fd a4 f0 	call (m) 0x16ec2;
842025a6:	21 e9 

    DEBUG_GRAPHS("AEC REFERENCE: Building sidetone graph, Done!");
    pfree(idxs);
842025a8:	4a 08       	r0 = r7 + Null;
842025aa:	ff fd 14 f0 	call (m) 0x4f62;
842025ae:	39 ed 

842025b0 <Lc_build_sidetone_graph_25>:
    }

    /* see if we need to setup a separate graph for sidetone mixing */
    if(op_extra_data->sidetone_method != AEC_SIDETONE_IN_SW_USING_SEPARATE_GRAPH)
    {
        return TRUE;
842025b0:	42 20       	r0 = Null + 1;
842025b2:	11 6e       	jump (m) Lc_build_sidetone_graph_30;

842025b4 <Lc_build_sidetone_graph_26>:
    /* limit to available speakers */
    num_sidetone_spkrs = MIN(num_sidetone_spkrs, op_extra_data->num_spkr_channels);

    /* we don't expect Sidetone buffer already existing at this point */
    PL_ASSERT(op_extra_data->sidetone_buf == NULL);
    PL_ASSERT(op_extra_data->sidetone_mic_buf == NULL);
842025b4:	61 f0 9a 88 	rMAC = M[r4 + 616];
842025b8:	34 61       	if EQ jump (m) Lc_build_sidetone_graph_11;

842025ba <Lc_build_sidetone_graph_27>:
842025ba:	03 f0 bc 41 	r1 = Null + 444;
842025be:	02 f0 13 60 	r0 = Null + 4115;
842025c2:	ff fd 8c f0 	call (m) 0x13f12;
842025c6:	31 ea 
842025c8:	06 6e       	jump (m) Lc_build_sidetone_graph_30;

842025ca <Lc_build_sidetone_graph_28>:
    pfree(idxs);

    return TRUE;
  aFailed:
    DEBUG_GRAPHS("AEC REFERENCE: Building sidetone graph, Failed!");
    pfree(idxs);
842025ca:	4a 08       	r0 = r7 + Null;
842025cc:	ff fd 14 f0 	call (m) 0x4f62;
842025d0:	37 ec 

842025d2 <Lc_build_sidetone_graph_29>:
    if(!op_extra_data->sidetone_buf)
    {
        /* Not going ahead with creating sidetone graph if we
         * cannot create shared buffer for sidetone path.
         */
        return FALSE;
842025d2:	02 00       	r0 = Null + Null;

842025d4 <Lc_build_sidetone_graph_30>:
    return TRUE;
  aFailed:
    DEBUG_GRAPHS("AEC REFERENCE: Building sidetone graph, Failed!");
    pfree(idxs);
    return(FALSE);
}
842025d4:	f6 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
842025d6:	d8 4c       	rts;

842025d8 <$_aec_reference_cleanup_sidetone_graph>:
 * \brief clean up sidetone graph
 *
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 */
void aec_reference_cleanup_sidetone_graph(AEC_REFERENCE_OP_DATA *op_extra_data)
{
842025d8:	f1 1c       	pushm <FP(=SP), r4, rLink>;
842025da:	16 00       	r4 = r0 + Null;
    patch_fn_shared(aec_reference);

    /* mic_sidetone_op, no longer is valid` */
    op_extra_data->mic_sidetone_op = NULL;
842025dc:	60 f0 6c 8e 	M[r4 + 432] = Null;

    /* Free cbops sidetone graph */
    if(op_extra_data->sidetone_graph != NULL)
842025e0:	62 f0 99 88 	r0 = M[r4 + 612];
842025e4:	06 60       	if EQ jump (m) Lc_aec_reference_cleanup_sidetone_graph_3;

842025e6 <Lc_aec_reference_cleanup_sidetone_graph_2>:
    {
        destroy_graph(op_extra_data->sidetone_graph);
842025e6:	ff fd a3 f0 	call (m) 0x16daa;
842025ea:	25 ee 
        op_extra_data->sidetone_graph = NULL;
842025ec:	60 f0 99 8e 	M[r4 + 612] = Null;

842025f0 <Lc_aec_reference_cleanup_sidetone_graph_3>:
    }

    /* Free Sidetone buffers */
    if(op_extra_data->sidetone_buf != NULL)
842025f0:	62 f0 31 88 	r0 = M[r4 + 196];
842025f4:	06 60       	if EQ jump (m) Lc_aec_reference_cleanup_sidetone_graph_5;

842025f6 <Lc_aec_reference_cleanup_sidetone_graph_4>:
    {
        cbuffer_destroy(op_extra_data->sidetone_buf);
842025f6:	ff fd 81 f0 	call (m) 0x12802;
842025fa:	2d e0 
        op_extra_data->sidetone_buf = NULL;
842025fc:	60 f0 31 8e 	M[r4 + 196] = Null;

84202600 <Lc_aec_reference_cleanup_sidetone_graph_5>:
    }

    /* free cbuffer structure for clone mic buff */
    if(op_extra_data->sidetone_mic_buf != NULL)
84202600:	62 f0 9a 88 	r0 = M[r4 + 616];
84202604:	06 60       	if EQ jump (m) Lc_aec_reference_cleanup_sidetone_graph_7;

84202606 <Lc_aec_reference_cleanup_sidetone_graph_6>:
    {
        cbuffer_destroy_struct(op_extra_data->sidetone_mic_buf);
84202606:	ff fd 81 f0 	call (m) 0x12834;
8420260a:	2f e1 
        op_extra_data->sidetone_mic_buf = NULL;
8420260c:	60 f0 9a 8e 	M[r4 + 616] = Null;

84202610 <Lc_aec_reference_cleanup_sidetone_graph_7>:
    }

    DEBUG_GRAPHS("AEC REFERENCE: SIDETONE graph's cleanup done!" );
}
84202610:	f1 48       	popm <FP, r4, rLink>;
84202612:	d8 4c       	rts;

84202614 <$_create_aec_ref_spkr_op>:

/*
 * create_insert_op
 */
cbops_op* create_aec_ref_spkr_op(unsigned nr_inputs,unsigned* input_idx,unsigned in_threshold,unsigned nr_outputs,unsigned* output_idx,unsigned out_threshold, unsigned max_jitter)
{
84202614:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84202616:	10 09       	r6 = r0 + Null;
84202618:	19 09       	r7 = r1 + Null;
8420261a:	22 09       	r8 = r2 + Null;
8420261c:	2e 00       	r4 = r3 + Null;
    // cbop param struct size (header plus cbop-specific parameters)
    cbops_op *op = (cbops_op*)xzpmalloc(sizeof_cbops_op(cbops_aec_ref_op, nr_inputs, nr_outputs));
8420261e:	c3 20       	r1 = Null + 3;
84202620:	8f f6 02 c0 	r0 = r4 + r6;
84202624:	52 54       	r0 = r0 LSHIFT 2;
84202626:	12 39       	r0 = r0 + 52;
84202628:	ff fd 14 f0 	call (m) 0x4f2a;
8420262c:	23 e8 
8420262e:	17 00       	r5 = r0 + Null;

    if(op)
84202630:	16 60       	if EQ jump (m) Lc_create_aec_ref_spkr_op_3;

84202632 <Lc_create_aec_ref_spkr_op_2>:
    {
        cbops_aec_ref_op *params;
        
        /* Setup Operator func table */
        op->function_vector    = cbops_aec_ref_spkr_table;
84202632:	07 f0 01 f0 	rMAC = Null + 7340356;
84202636:	44 41 
84202638:	b9 8e       	M[r5 + 8] = rMAC;

        /* Setup cbop param struct header info */
        params = (cbops_aec_ref_op*)cbops_populate_param_hdr(op, nr_inputs, nr_outputs, input_idx, output_idx);
8420263a:	f9 d9       	rMAC = M[FP + -4];
8420263c:	09 1c       	pushm <rMAC>;
8420263e:	4d 08       	r3 = r7 + Null;
84202640:	34 00       	r2 = r4 + Null;
84202642:	43 08       	r1 = r6 + Null;
84202644:	ff fd a4 f0 	call (m) 0x16f30;
84202648:	2d e7 
8420264a:	7f 4c       	SP = SP + -4;

        /* Setup cbop-specific parameters - well, just one in this case. Just exemplifies using the
         * generic macro, but in this cbop's case we could get to the param location "directly"
         */
        params->in_threshold  = in_threshold;
8420264c:	2a f0 00 ee 	M[r0 + Null] = r8;
        params->max_advance   = out_threshold;
84202650:	f1 d9       	rMAC = M[FP + -8];
84202652:	51 8e       	M[r0 + 4] = rMAC;
        params->max_jitter   = max_jitter;        
84202654:	e9 d9       	rMAC = M[FP + -12];
84202656:	91 8f       	M[r0 + 24] = rMAC;
        
        params->buffer_adj = 3;
84202658:	c1 20       	rMAC = Null + 3;
8420265a:	91 8e       	M[r0 + 8] = rMAC;

8420265c <Lc_create_aec_ref_spkr_op_3>:
    }

    return(op);
8420265c:	3a 00       	r0 = r5 + Null;

8420265e <Lc_create_aec_ref_spkr_op_4>:
}
8420265e:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84202660:	d8 4c       	rts;

84202662 <$_aec_reference_spkr_ttp_run>:
 * \param op_extra_data Pointer to the AEC reference operator specific data.
 * \param error current TTP error in speaker path
 * \param max_to_process Pointer max amount of data available to process by speaker cbops
 */
void aec_reference_spkr_ttp_run(AEC_REFERENCE_OP_DATA  *op_extra_data, unsigned *max_to_process)
{
84202662:	f5 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>, SP = SP + 0x10;
84202664:	16 00       	r4 = r0 + Null;
84202666:	1a 09       	r8 = r1 + Null;
    TIME_INTERVAL error = 0;
84202668:	38 de       	M[FP + 28] = Null;
    bool error_valid;
    unsigned amount_can_process = *max_to_process;
8420266a:	a8 f0 00 e8 	r6 = M[r8 + Null];
    /* only used for debug log */
    TIME current_time = hal_get_time();
8420266e:	ff fd 78 f1 	call (m) 0x317e8;
84202672:	3b eb 
84202674:	11 09       	r7 = r0 + Null;

    patch_fn_shared(aec_reference_run);

    /* calculate current TTP error */
    error_valid = aec_reference_spkr_ttp_get_error(op_extra_data, &error);
84202676:	c3 11       	r1 = FP + 28;
84202678:	32 00       	r0 = r4 + Null;
8420267a:	9d 4e       	call (m) Lc_aec_reference_spkr_ttp_get_error_1;

    /* see if we have received void tags while in TTP mode */
    if(op_extra_data->spkr_void_tag_observed)
8420267c:	60 f0 b5 88 	Null = M[r4 + 724];
84202680:	0b 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_run_4;

84202682 <Lc_aec_reference_spkr_ttp_run_2>:
    {
        /* increment a counter, so this shows the time that we have
         * continuously seen void tag
         */
        op_extra_data->spkr_void_tag_counter++;
84202682:	61 f0 b6 88 	rMAC = M[r4 + 728];
84202686:	49 20       	rMAC = rMAC + 1;
84202688:	61 f0 b6 8e 	M[r4 + 728] = rMAC;

        if(op_extra_data->spkr_void_tag_counter == SPKR_TTP_VOID_TAG_COOL_OFF_TIME_MS)
8420268c:	88 3c       	Null = rMAC - 50;
8420268e:	06 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_run_5;

84202690 <Lc_aec_reference_spkr_ttp_run_3>:
             */

            /* error isn't valid anymore, only seeing a timestamp tag will
             * make it valid again
             */
            op_extra_data->spkr_last_timestamp_valid = FALSE;
84202690:	60 f0 b4 8e 	M[r4 + 720] = Null;
84202694:	74 6e       	jump (m) Lc_aec_reference_spkr_ttp_run_23;

84202696 <Lc_aec_reference_spkr_ttp_run_4>:
            error_valid = FALSE;
        }
    }
    else
    {
        op_extra_data->spkr_void_tag_counter = 0;
84202696:	60 f0 b6 8e 	M[r4 + 728] = Null;

8420269a <Lc_aec_reference_spkr_ttp_run_5>:
    }

    if(!error_valid)
8420269a:	10 04       	Null = r0 - Null;
8420269c:	70 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_run_23;

8420269e <Lc_aec_reference_spkr_ttp_run_6>:
    L2_DBG_MSG2("AEC REFERENCE SPEAKER: time=%d, ttp error=%d", current_time, error);
#endif

    /* See if the input is too late */
    if(error < -op_extra_data->spkr_error_threshold &&
       amount_can_process > 0)
8420269e:	39 d8       	rMAC = M[FP + 28];
842026a0:	62 f0 b7 88 	r0 = M[r4 + 732];
842026a4:	82 04       	r0 = Null - r0;
842026a6:	88 04       	Null = rMAC - r0;
842026a8:	30 66       	if GE jump (m) Lc_aec_reference_spkr_ttp_run_13;

842026aa <Lc_aec_reference_spkr_ttp_run_7>:
842026aa:	0f f8 00 c2 	Null = r6 - Null;
842026ae:	2d 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_run_13;

842026b0 <Lc_aec_reference_spkr_ttp_run_8>:
    {
        /* Calculate how many samples we are late,
         * we discard late samples, as much as available
         */
        unsigned samples_to_trash = convert_time_to_samples((unsigned)(-error), op_extra_data->input_rate);
842026b0:	63 f0 64 88 	r1 = M[r4 + 400];
842026b4:	42 04       	r0 = Null - rMAC;
842026b6:	ff fd 99 f0 	call (m) 0x15932;
842026ba:	3d e3 
842026bc:	13 00       	r1 = r0 + Null;

        /* limit to amount available */
        samples_to_trash = MIN(amount_can_process, samples_to_trash);
842026be:	2f f8 00 c2 	Null = r6 - r0;
842026c2:	02 f0 e9 e0 	if C jump (m) Lc_aec_reference_spkr_ttp_run_15;

842026c6 <Lc_aec_reference_spkr_ttp_run_9>:
842026c6:	43 08       	r1 = r6 + Null;

842026c8 <Lc_aec_reference_spkr_ttp_run_10>:

        if(samples_to_trash > 0)
        {
            /* We have something to trash */
            unsigned samples_trashed = aec_reference_spkr_ttp_discard_samples(op_extra_data,samples_to_trash);
842026c8:	32 00       	r0 = r4 + Null;
842026ca:	ff fd 2f f1 	call (m) 0x284f4;
842026ce:	2b e1 
842026d0:	17 00       	r5 = r0 + Null;
            L3_DBG_MSG3("AEC REFERENCE SPEAKER TTP - discard samples=%d, time =%d , error=%d",
                        samples_trashed, current_time, error);
842026d2:	01 f0 28 91 	rMAC = MBS[Null + 0x328];
842026d6:	c8 24       	Null = rMAC - 3;
842026d8:	0a 68       	if LT jump (m) Lc_aec_reference_spkr_ttp_run_12;

842026da <Lc_aec_reference_spkr_ttp_run_11>:
842026da:	3d d8       	r3 = M[FP + 28];
842026dc:	55 f1 02 f0 	r0 = Null + 357564977;
842026e0:	31 42 
842026e2:	4c 08       	r2 = r7 + Null;
842026e4:	3b 00       	r1 = r5 + Null;
842026e6:	ef fd f1 ff 	call (m) 0x9de;
842026ea:	39 e7 

842026ec <Lc_aec_reference_spkr_ttp_run_12>:

            /* some samples discarded, update error */
            error += convert_samples_to_time(samples_trashed, op_extra_data->input_rate);
842026ec:	63 f0 64 88 	r1 = M[r4 + 400];
842026f0:	3a 00       	r0 = r5 + Null;
842026f2:	ff fd 99 f0 	call (m) 0x15914;
842026f6:	23 e1 
842026f8:	39 d8       	rMAC = M[FP + 28];
842026fa:	51 00       	rMAC = r0 + rMAC;
842026fc:	39 de       	M[FP + 28] = rMAC;

            /* update amount left to process */
            amount_can_process -= samples_trashed;
842026fe:	00 f7 38 c2 	r6 = r6 - r5;

            /* ttp play back needs resetting */
            aec_reference_spkr_ttp_reset(op_extra_data);
84202702:	32 00       	r0 = r4 + Null;
84202704:	01 f0 3b e4 	call (m) Lc_aec_reference_spkr_ttp_reset_1;

84202708 <Lc_aec_reference_spkr_ttp_run_13>:
        }
    }

    if (pl_abs_i32(error) < op_extra_data->spkr_error_threshold)
84202708:	3a d8       	r0 = M[FP + 28];
8420270a:	61 f0 b7 88 	rMAC = M[r4 + 732];
8420270e:	4f f2 42 ce 	r0 = ABS r0;
84202712:	50 04       	Null = r0 - rMAC;
84202714:	02 f0 9d e0 	if C jump (m) Lc_aec_reference_spkr_ttp_run_16;

84202718 <Lc_aec_reference_spkr_ttp_run_14>:
    {
        /* This is normal situation, we have on-time input
         * and we can control ttp error
         */
        aec_reference_spkr_ttp_error_control(op_extra_data, error);
84202718:	3b d8       	r1 = M[FP + 28];
8420271a:	32 00       	r0 = r4 + Null;
8420271c:	01 f0 27 e5 	call (m) Lc_aec_reference_spkr_ttp_error_control_1;

        /* real audio is played, go to higher threshold */
        op_extra_data->spkr_error_threshold = SPKR_TTP_MAX_LATENCY_HIGH_THRESHOLD_US;
84202720:	01 f0 d0 4b 	rMAC = Null + 2000;
84202724:	61 f0 b7 8e 	M[r4 + 732] = rMAC;
84202728:	28 6e       	jump (m) Lc_aec_reference_spkr_ttp_run_22;

8420272a <Lc_aec_reference_spkr_ttp_run_15>:
        unsigned samples_to_trash = convert_time_to_samples((unsigned)(-error), op_extra_data->input_rate);

        /* limit to amount available */
        samples_to_trash = MIN(amount_can_process, samples_to_trash);

        if(samples_to_trash > 0)
8420272a:	10 04       	Null = r0 - Null;
8420272c:	ce 63       	if NE jump (m) Lc_aec_reference_spkr_ttp_run_10;

8420272e <Lc_4>:
8420272e:	ed 6f       	jump (m) Lc_aec_reference_spkr_ttp_run_13;

84202730 <Lc_aec_reference_spkr_ttp_run_16>:
    {
        /* Input is early, so we cannot allow samples from input buffers to be played now
         * instead we need to insert silence until time to play has reached. Silence insertion
         * is managed by cbops, we only tell cbops not to use samples from input buffer.
         */
        unsigned samples_early = convert_time_to_samples((unsigned)(error), op_extra_data->input_rate);
84202730:	63 f0 64 88 	r1 = M[r4 + 400];
84202734:	3a d8       	r0 = M[FP + 28];
84202736:	ff fd 98 f0 	call (m) 0x15932;
8420273a:	3d ef 
        if(samples_early >= op_extra_data->spkr_in_threshold)
8420273c:	63 f0 af 88 	r1 = M[r4 + 700];
84202740:	d0 04       	Null = r0 - r1;
84202742:	03 64       	if NC jump (m) Lc_aec_reference_spkr_ttp_run_18;

84202744 <Lc_aec_reference_spkr_ttp_run_17>:
        {
            /* It's early more than the amount cbops is expected to copy,
             * so allow nothing to copy.
             */
            amount_can_process = 0;
84202744:	00 09       	r6 = Null + Null;
84202746:	07 6e       	jump (m) Lc_aec_reference_spkr_ttp_run_20;

84202748 <Lc_aec_reference_spkr_ttp_run_18>:
        {
            /* It's still early but less than the expected amount, we allow cbops to consume
             * expected amount less the amount early, silence insertion will be used for the amount early.
             * next time we expect to switch to normal TTP playback.
             */
            amount_can_process = MIN(op_extra_data->spkr_in_threshold - samples_early, amount_can_process);
84202748:	99 04       	rMAC = r1 - r0;
8420274a:	8f f1 00 c2 	Null = rMAC - r6;
8420274e:	02 f0 87 e0 	if C jump (m) Lc_aec_reference_spkr_ttp_run_20;

84202752 <Lc_aec_reference_spkr_ttp_run_19>:
84202752:	08 09       	r6 = rMAC + Null;

84202754 <Lc_aec_reference_spkr_ttp_run_20>:
        }

        /* We are not playing real audio, so keep the threshold low */
        op_extra_data->spkr_error_threshold = SPKR_TTP_MAX_LATENCY_LOW_THRESHOLD_US;
84202754:	01 f0 fa 40 	rMAC = Null + 250;
84202758:	61 f0 b7 8e 	M[r4 + 732] = rMAC;

        L3_DBG_MSG3("AEC REFERENCE SPEAKER TTP: possible silence insertion: time=%d, samples=%d, max_proc=%d",
                    current_time, op_extra_data->spkr_in_threshold-amount_can_process, amount_can_process);
8420275c:	01 f0 28 91 	rMAC = MBS[Null + 0x328];
84202760:	c8 24       	Null = rMAC - 3;
84202762:	0b 68       	if LT jump (m) Lc_aec_reference_spkr_ttp_run_22;

84202764 <Lc_aec_reference_spkr_ttp_run_21>:
84202764:	8f f3 04 c2 	r2 = r1 - r6;
84202768:	55 f1 02 f0 	r0 = Null + 357565045;
8420276c:	75 42 
8420276e:	45 08       	r3 = r6 + Null;
84202770:	4b 08       	r1 = r7 + Null;
84202772:	ef fd f1 ff 	call (m) 0x9de;
84202776:	2d e3 

84202778 <Lc_aec_reference_spkr_ttp_run_22>:

    }

    /* update amount to process */
    *max_to_process = amount_can_process;
84202778:	a8 f0 00 ee 	M[r8 + Null] = r6;

8420277c <Lc_aec_reference_spkr_ttp_run_23>:
    return;
}
8420277c:	f5 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, rLink>;
8420277e:	d8 4c       	rts;

84202780 <$_aec_reference_spkr_ttp_init>:
84202780:	d8 4c       	rts;

84202782 <$_aec_reference_spkr_ttp_update_last_timestamp>:
 *        stamp associated with last consumed sample.
 * \param op_extra_data pointer to AEC_REFERENCE_OP_DATA data
 * \param amount_read amount read from input buffer
 */
void aec_reference_spkr_ttp_update_last_timestamp(AEC_REFERENCE_OP_DATA   *op_extra_data, unsigned amount_read)
{
84202782:	f1 1c       	pushm <FP(=SP), r4, rLink>;
84202784:	16 00       	r4 = r0 + Null;
84202786:	1a 00       	r0 = r1 + Null;
    if(op_extra_data->spkr_last_timestamp_valid)
84202788:	60 f0 b4 88 	Null = M[r4 + 720];
8420278c:	0b 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_update_last_timestamp_3;

8420278e <Lc_aec_reference_spkr_ttp_update_last_timestamp_2>:
    {
        /* work out time stamp for next input block for the just read block,
         * TODO_AEC_REFERENCE_TTP: for further accuracy we could consider the tag sp_adjust as well */
        TIME_INTERVAL time_passed = convert_samples_to_time(amount_read, op_extra_data->input_rate);
8420278e:	63 f0 64 88 	r1 = M[r4 + 400];
84202792:	ff fd 98 f0 	call (m) 0x15914;
84202796:	23 ec 
        op_extra_data->spkr_last_timestamp = time_add(op_extra_data->spkr_last_timestamp, time_passed);
84202798:	61 f0 b3 88 	rMAC = M[r4 + 716];
8420279c:	51 00       	rMAC = r0 + rMAC;
8420279e:	61 f0 b3 8e 	M[r4 + 716] = rMAC;

842027a2 <Lc_aec_reference_spkr_ttp_update_last_timestamp_3>:
    }
}
842027a2:	f1 48       	popm <FP, r4, rLink>;
842027a4:	d8 4c       	rts;

842027a6 <$_aec_reference_spkr_ttp_terminate>:
 */
void aec_reference_spkr_ttp_terminate(AEC_REFERENCE_OP_DATA  *op_extra_data)
{
    patch_fn_shared(aec_reference);

    op_extra_data->spkr_timed_playback_mode = FALSE;
842027a6:	20 f0 b2 8e 	M[r0 + 712] = Null;
    op_extra_data->spkr_last_timestamp_valid = 0;
842027aa:	20 f0 b4 8e 	M[r0 + 720] = Null;
    op_extra_data->spkr_void_tag_counter = 0;
842027ae:	20 f0 b6 8e 	M[r0 + 728] = Null;

842027b2 <Lc_aec_reference_spkr_ttp_terminate_2>:
842027b2:	d8 4c       	rts;

842027b4 <Lc_aec_reference_spkr_ttp_get_error_1>:
 *        and (estimated) actual playback time. So the error will be
 *        positive if ttp is later than actual playback time.
 * return whether the error is valid
 */
static bool aec_reference_spkr_ttp_get_error(AEC_REFERENCE_OP_DATA *op_extra_data, TIME_INTERVAL *error)
{
842027b4:	f4 1d       	pushm <FP(=SP), r4, r5, r6, r7, rLink>, SP = SP + 0x10;
842027b6:	16 00       	r4 = r0 + Null;
842027b8:	18 09       	r6 = r1 + Null;
    /* see if we have valid metadata buffer */
    tCbuffer *met_buf = op_extra_data->spkr_input_metadata_buffer;
    patch_fn_shared(aec_reference_run);

    if (met_buf!= NULL && buff_has_metadata(met_buf))
842027ba:	62 f0 c9 88 	r0 = M[r4 + 804];
842027be:	97 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_24;

842027c0 <Lc_aec_reference_spkr_ttp_get_error_2>:
842027c0:	51 89       	rMAC = M[r0 + 20];
842027c2:	49 c6       	rMAC = rMAC AND 0x8000;
842027c4:	94 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_24;

842027c6 <Lc_aec_reference_spkr_ttp_get_error_3>:
    {
        /* see if input has a timestamped tag */
        unsigned b4idx = 0;
842027c6:	30 de       	M[FP + 24] = Null;
        metadata_tag *mtag = buff_metadata_peek_ex(met_buf, &b4idx);
842027c8:	83 11       	r1 = FP + 24;
842027ca:	ff fd 7a f0 	call (m) 0x11cd8;
842027ce:	2f e8 
842027d0:	17 00       	r5 = r0 + Null;

        if(mtag != NULL)
842027d2:	5f 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_19;

842027d4 <Lc_aec_reference_spkr_ttp_get_error_4>:
        {
            if(IS_TIMESTAMPED_TAG(mtag))
842027d4:	79 88       	rMAC = M[r5 + 4];
842027d6:	12 f0 30 00 	r0 = rMAC AND 0x30;
842027da:	4e 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_15;

842027dc <Lc_aec_reference_spkr_ttp_get_error_5>:
842027dc:	ca c2       	r0 = rMAC AND 0x40;
842027de:	4c 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_get_error_15;

842027e0 <Lc_aec_reference_spkr_ttp_get_error_6>:
            {
                unsigned *err_offset_id;
                unsigned out_length;

                /* go back to first input sample */
                TIME_INTERVAL time_back = convert_samples_to_time(b4idx / OCTETS_PER_SAMPLE, op_extra_data->input_rate);
842027e0:	63 f0 64 88 	r1 = M[r4 + 400];
842027e4:	32 d8       	r0 = M[FP + 24];
842027e6:	52 50       	r0 = r0 LSHIFT -2;
842027e8:	ff fd 98 f0 	call (m) 0x15914;
842027ec:	2d e9 

                /* set the time stamp,
                 * TODO_AEC_REFERENCE_TTP: for further accuracy we could consider the tag sp_adjust as well */
                op_extra_data->spkr_last_timestamp = time_sub(mtag->timestamp, time_back);
842027ee:	39 89       	rMAC = M[r5 + 16];
842027f0:	89 04       	rMAC = rMAC - r0;
842027f2:	61 f0 b3 8e 	M[r4 + 716] = rMAC;

                /* See if tag's timestamp has an offset*/
                if (buff_metadata_find_private_data(mtag, META_PRIV_KEY_TTP_OFFSET, &out_length,
                                                    (void **)&err_offset_id))
842027f6:	c5 11       	r3 = FP + 28;
842027f8:	04 12       	r2 = FP + 32;
842027fa:	43 20       	r1 = Null + 1;
842027fc:	3a 00       	r0 = r5 + Null;
842027fe:	ff fd 79 f0 	call (m) 0x11a84;
84202802:	27 e4 
84202804:	10 04       	Null = r0 - Null;
84202806:	0e 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_9;

84202808 <Lc_aec_reference_spkr_ttp_get_error_7>:
                {
                    int *err_offset_ptr = ttp_info_get(*err_offset_id);
84202808:	39 d8       	rMAC = M[FP + 28];
8420280a:	0a e8       	r0 = M[rMAC + Null];
8420280c:	ff fd a1 f0 	call (m) 0x16bb8;
84202810:	2d ed 
                    if (err_offset_ptr != NULL)
84202812:	10 04       	Null = r0 - Null;
84202814:	07 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_9;

84202816 <Lc_aec_reference_spkr_ttp_get_error_8>:
                    {
                        /* subtract the offset */
                        op_extra_data->spkr_last_timestamp =
                            time_sub(op_extra_data->spkr_last_timestamp, *err_offset_ptr);
84202816:	61 f0 b3 88 	rMAC = M[r4 + 716];
8420281a:	12 e8       	r0 = M[r0 + Null];
8420281c:	89 04       	rMAC = rMAC - r0;
8420281e:	61 f0 b3 8e 	M[r4 + 716] = rMAC;

84202822 <Lc_aec_reference_spkr_ttp_get_error_9>:
                    }
                }

                /* this will stay valid */
                op_extra_data->spkr_last_timestamp_valid = TRUE;
84202822:	41 20       	rMAC = Null + 1;
84202824:	61 f0 b4 8e 	M[r4 + 720] = rMAC;

                /* switch to timed playback mode if not already,
                 * this is irreversible
                 */
                if(!op_extra_data->spkr_timed_playback_mode)
84202828:	60 f0 b2 88 	Null = M[r4 + 712];
8420282c:	1b 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_get_error_12;

8420282e <Lc_aec_reference_spkr_ttp_get_error_10>:
                    /* For the first time we have seen a timestamp,
                     * This means the metadata buffer will supply timestamp tags
                     * that are required for timed playback. Now is the time to
                     * switch to timed playback mode for speaker graph.
                     */
                    op_extra_data->spkr_timed_playback_mode = aec_reference_spkr_ttp_setup_timed_playback(op_extra_data);
8420282e:	32 00       	r0 = r4 + Null;
84202830:	61 4e       	call (m) Lc_aec_reference_spkr_ttp_setup_timed_playback_1;
84202832:	62 f0 b2 8e 	M[r4 + 712] = r0;
                    if(op_extra_data->spkr_timed_playback_mode)
84202836:	60 f0 b2 88 	Null = M[r4 + 712];
8420283a:	14 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_12;

8420283c <Lc_aec_reference_spkr_ttp_get_error_11>:
                        /* tell the endpoint that speaker is performing rate adjustment, normally
                         * this is done when enacting config is received from framework, however
                         * in case we haven't received (can happen if input is coming from a2dp
                         * source) we do it here.
                         */
                        set_override_ep_ratematch_enacting(op_extra_data->spkr_endpoint, TRUE);
8420283c:	43 20       	r1 = Null + 1;
8420283e:	62 f0 80 88 	r0 = M[r4 + 512];
84202842:	ff fd 10 f0 	call (m) 0x4a3e;
84202846:	3d ef 

                        /* tell the overridden endpoint that we are in timed playback mode,
                         * this is to prevent extra accumulation of HW warps in endpoint so it
                         * won't mess with PID controller. (only nedded for hw rate adjust)
                         */
                        set_override_ep_set_hw_warp_apply_mode(op_extra_data->spkr_endpoint, TRUE);
84202848:	43 20       	r1 = Null + 1;
8420284a:	62 f0 80 88 	r0 = M[r4 + 512];
8420284e:	02 f0 3b e1 	call (m) $_set_override_ep_set_hw_warp_apply_mode;

                        L2_DBG_MSG1("AEC REFERENCE: Speaker graph switched to timed play back mode: %d",
                                    op_extra_data->spkr_timed_playback_mode);
84202852:	63 f0 b2 88 	r1 = M[r4 + 712];
84202856:	55 f1 02 f0 	r0 = Null + 357565133;
8420285a:	cd 42 
8420285c:	ef fd f0 ff 	call (m) 0x9b4;
84202860:	39 ea 

84202862 <Lc_aec_reference_spkr_ttp_get_error_12>:
                    {
                        /* can't do anything except to retry later */
                    }
                }

                if(op_extra_data->spkr_void_tag_observed)
84202862:	60 f0 b5 88 	Null = M[r4 + 724];
84202866:	05 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_14;

84202868 <Lc_aec_reference_spkr_ttp_get_error_13>:
                     * in case that happen, we switch to lower threshold so extra latency will
                     * be discarded immediately. It will quickly go back
                     * to normal threshold.
                     */
                    op_extra_data->spkr_error_threshold =
                        SPKR_TTP_MAX_LATENCY_LOW_THRESHOLD_US;
84202868:	01 f0 fa 40 	rMAC = Null + 250;
8420286c:	61 f0 b7 8e 	M[r4 + 732] = rMAC;

84202870 <Lc_aec_reference_spkr_ttp_get_error_14>:
#endif
                }

                /* void tag not seen */
                op_extra_data->spkr_void_tag_observed = FALSE;
84202870:	60 f0 b5 8e 	M[r4 + 724] = Null;
84202874:	0e 6e       	jump (m) Lc_aec_reference_spkr_ttp_get_error_19;

84202876 <Lc_aec_reference_spkr_ttp_get_error_15>:

            } /* IS_TIMESTAMPED_TAG(mtag) */
            else if(IS_VOID_TTP_TAG(mtag) && op_extra_data->spkr_timed_playback_mode)
84202876:	11 f0 70 00 	rMAC = rMAC AND 0x70;
8420287a:	10 f0 50 24 	Null = rMAC - 80;
8420287e:	09 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_get_error_19;

84202880 <Lc_aec_reference_spkr_ttp_get_error_16>:
84202880:	38 89       	Null = M[r5 + 16];
84202882:	07 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_get_error_19;

84202884 <Lc_aec_reference_spkr_ttp_get_error_17>:
84202884:	60 f0 b2 88 	Null = M[r4 + 712];
84202888:	04 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_19;

8420288a <Lc_aec_reference_spkr_ttp_get_error_18>:
                if(!op_extra_data->spkr_void_tag_observed)
                {
                    L2_DBG_MSG1("AEC REFERENCE, started seeing VOID tags, time=%d", hal_get_time());
                }
#endif
                op_extra_data->spkr_void_tag_observed = TRUE;
8420288a:	41 20       	rMAC = Null + 1;
8420288c:	61 f0 b5 8e 	M[r4 + 724] = rMAC;

84202890 <Lc_aec_reference_spkr_ttp_get_error_19>:
            }
        } /* if(mtag != NULL) */

        if(op_extra_data->spkr_last_timestamp_valid)
84202890:	60 f0 b4 88 	Null = M[r4 + 720];
84202894:	29 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_23;

84202896 <Lc_aec_reference_spkr_ttp_get_error_20>:
             *
             * TODO_AEC_REFERENCE_TTP: since the task for speaker graph is timer based, the time
             * of sampling isn't aligned with the output consuming time, so it
             * could have up to one sample period random jitter.
             */
            TIME cur_time = hal_get_time();
84202896:	ff fd 77 f1 	call (m) 0x317e8;
8420289a:	33 ea 
8420289c:	17 00       	r5 = r0 + Null;
            unsigned amount_in_output = cbuffer_calc_amount_data_in_words(op_extra_data->output_stream[AEC_REF_SPKR_TERMINAL1]);
8420289e:	72 a8       	r0 = M[r4 + 68];
842028a0:	ff fd 4c f1 	call (m) 0x2c208;
842028a4:	29 eb 
            TIME_INTERVAL offset = convert_samples_to_time(amount_in_output, op_extra_data->spkr_rate);
842028a6:	63 f0 6e 88 	r1 = M[r4 + 440];
842028aa:	ff fd 98 f0 	call (m) 0x15914;
842028ae:	2b e3 
842028b0:	11 09       	r7 = r0 + Null;
842028b2:	49 08       	rMAC = r7 + Null;

            /* if we have SW rate adjustment in the graph */
            if(op_extra_data->spkr_sw_rateadj_op != NULL)
842028b4:	62 f0 7e 88 	r0 = M[r4 + 504];
842028b8:	0f 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_get_error_22;

842028ba <Lc_aec_reference_spkr_ttp_get_error_21>:
            {
                /* adjust for the phase difference between first input and first output sample */
                offset -= (int)frac_mult(SECOND, (int)cbops_sra_get_phase(op_extra_data->spkr_sw_rateadj_op)) / (int) op_extra_data->spkr_rate;
842028ba:	ff fd a2 f0 	call (m) 0x16d48;
842028be:	2f e4 
842028c0:	00 f0 a3 f7 	r1 = Null + 1000000;
842028c4:	40 42 
842028c6:	61 f0 6e 88 	rMAC = M[r4 + 440];
842028ca:	2f f3 42 c9 	r0 = r1 * r0 (frac);
842028ce:	8a 4c       	Div = r0 / rMAC;
842028d0:	c1 4c       	rMAC = DivResult;
842028d2:	1f f9 01 c2 	rMAC = r7 - rMAC;

842028d6 <Lc_aec_reference_spkr_ttp_get_error_22>:
            /* Add extra delay that might occur in the path
             * (adjustment for any resampler, HW rate matching,
             *  cbops algorithmic delays and any external delay)
             * TODO_AEC_REFERENCE_TTP: spkr_extra_delay isn't set yet
             */
            offset += op_extra_data->spkr_extra_delay;
842028d6:	62 f0 bb 88 	r0 = M[r4 + 748];
842028da:	51 00       	rMAC = r0 + rMAC;

            /* compute error */
            *error = time_sub(op_extra_data->spkr_last_timestamp, cur_time) - offset;
842028dc:	62 f0 b3 88 	r0 = M[r4 + 716];
842028e0:	d2 05       	r0 = r0 - r5;
842028e2:	1f f2 88 c3 	M[r6] = r0 - rMAC;

842028e6 <Lc_aec_reference_spkr_ttp_get_error_23>:
        }

        return op_extra_data->spkr_last_timestamp_valid;
842028e6:	62 f0 b4 88 	r0 = M[r4 + 720];
842028ea:	02 6e       	jump (m) Lc_aec_reference_spkr_ttp_get_error_25;

842028ec <Lc_aec_reference_spkr_ttp_get_error_24>:
    } /* buff_has_metadata  */

    /* always return invalid error if we don't have metadata buffer */
    return FALSE;
842028ec:	02 00       	r0 = Null + Null;

842028ee <Lc_aec_reference_spkr_ttp_get_error_25>:
}
842028ee:	f4 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, rLink>;
842028f0:	d8 4c       	rts;

842028f2 <Lc_aec_reference_spkr_ttp_setup_timed_playback_1>:
 *
 * \param op_extra_data pointer to AEC_REFERENCE_OP_DATA data
 * return TRUE if setting up was successful else FALSE.
 */
static bool aec_reference_spkr_ttp_setup_timed_playback(AEC_REFERENCE_OP_DATA *op_extra_data)
{
842028f2:	f1 1c       	pushm <FP(=SP), r4, rLink>;
842028f4:	16 00       	r4 = r0 + Null;
    patch_fn_shared(aec_reference);

    /* initialise pid controller parameters */
    timed_set_pid_controller_default_settings(&op_extra_data->spkr_pid_params);
842028f6:	62 f0 f4 22 	r0 = r4 + 756;
842028fa:	ff fd 96 f0 	call (m) 0x1557c;
842028fe:	23 e4 



    /* reset speaker ttp control */
    aec_reference_spkr_ttp_reset(op_extra_data);
84202900:	32 00       	r0 = r4 + Null;
84202902:	4e 4e       	call (m) Lc_aec_reference_spkr_ttp_reset_1;

    /* use ttp SW rate adjust if speaker is capable */
    if(op_extra_data->spkr_rate_ability == RATEMATCHING_SUPPORT_HW)
84202904:	61 f0 6f 88 	rMAC = M[r4 + 444];
84202908:	88 24       	Null = rMAC - 2;
8420290a:	17 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_setup_timed_playback_6;

8420290c <Lc_aec_reference_spkr_ttp_setup_timed_playback_2>:
    {
        op_extra_data->spkr_ttp_adjust_type = RATEMATCHING_SUPPORT_HW;
8420290c:	81 20       	rMAC = Null + 2;
8420290e:	61 f0 bc 8e 	M[r4 + 752] = rMAC;

        /* we want to do HW rate matching in timed playback mode */
        if(op_extra_data->spkr_sw_rateadj_op != NULL)
84202912:	62 f0 7e 88 	r0 = M[r4 + 504];
84202916:	05 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_setup_timed_playback_4;

84202918 <Lc_aec_reference_spkr_ttp_setup_timed_playback_3>:
        {
            /* if we have SW rate adjust, then set it to pass-through mode */
            cbops_rateadjust_passthrough_mode(op_extra_data->spkr_sw_rateadj_op, TRUE);
84202918:	43 20       	r1 = Null + 1;
8420291a:	ff fd a1 f0 	call (m) 0x16c96;
8420291e:	3d eb 

84202920 <Lc_aec_reference_spkr_ttp_setup_timed_playback_4>:
        }

        /* fresh start from 0 warp value */
        set_override_ep_ratematch_adjustment(op_extra_data->spkr_endpoint, 0);
84202920:	62 f0 80 88 	r0 = M[r4 + 512];
84202924:	03 00       	r1 = Null + Null;
84202926:	ff fd 10 f0 	call (m) 0x4aa0;
8420292a:	3b eb 

8420292c <Lc_aec_reference_spkr_ttp_setup_timed_playback_5>:
         */
        return FALSE;
    }

	/* even if we aren't told, speaker graph is enacting */
	op_extra_data->spkr_rate_enactment = op_extra_data->spkr_rate_ability;
8420292c:	61 f0 6f 88 	rMAC = M[r4 + 444];
84202930:	61 f0 71 8e 	M[r4 + 452] = rMAC;

    return TRUE;
84202934:	42 20       	r0 = Null + 1;
84202936:	32 6e       	jump (m) Lc_aec_reference_spkr_ttp_setup_timed_playback_12;

84202938 <Lc_aec_reference_spkr_ttp_setup_timed_playback_6>:

        /* fresh start from 0 warp value */
        set_override_ep_ratematch_adjustment(op_extra_data->spkr_endpoint, 0);
    }
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
    else if(0 != op_extra_data->spkr_ext_rate_adjust_op)
84202938:	62 f0 ae 88 	r0 = M[r4 + 696];
8420293c:	19 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_setup_timed_playback_9;

8420293e <Lc_aec_reference_spkr_ttp_setup_timed_playback_7>:
    {
        /* we will do software TTP using a standalone rate adjust operator */
        op_extra_data->spkr_ttp_adjust_type = RATEMATCHING_SUPPORT_SW;
8420293e:	41 20       	rMAC = Null + 1;
84202940:	61 f0 bc 8e 	M[r4 + 752] = rMAC;
        op_extra_data->spkr_rate_adjustment = 0;
84202944:	60 f0 70 8e 	M[r4 + 448] = Null;

        /* reset the current rate */
        stream_delegate_rate_adjust_set_current_rate(op_extra_data->spkr_ext_rate_adjust_op, 0);
84202948:	03 00       	r1 = Null + Null;
8420294a:	01 f0 23 ee 	call (m) $_stream_delegate_rate_adjust_set_current_rate;

        /* not in passthrough mode */
        stream_delegate_rate_adjust_set_passthrough_mode(op_extra_data->spkr_ext_rate_adjust_op, FALSE);
8420294e:	62 f0 ae 88 	r0 = M[r4 + 696];
84202952:	03 00       	r1 = Null + Null;
84202954:	01 f0 31 ec 	call (m) $_stream_delegate_rate_adjust_set_passthrough_mode;

        /* we shouldn't have created built-in rate adjust operator */
        PL_ASSERT(op_extra_data->spkr_sw_rateadj_op == NULL);
84202958:	61 f0 7e 88 	rMAC = M[r4 + 504];
8420295c:	e8 61       	if EQ jump (m) Lc_aec_reference_spkr_ttp_setup_timed_playback_5;

8420295e <Lc_aec_reference_spkr_ttp_setup_timed_playback_8>:
8420295e:	03 f0 06 42 	r1 = Null + 518;
84202962:	02 f0 13 60 	r0 = Null + 4115;
84202966:	ff fd 8a f0 	call (m) 0x13f12;
8420296a:	2d ed 
8420296c:	17 6e       	jump (m) Lc_aec_reference_spkr_ttp_setup_timed_playback_12;

8420296e <Lc_aec_reference_spkr_ttp_setup_timed_playback_9>:
    }
#endif /* INSTALL_DELEGATE_RATE_ADJUST_SUPPORT */
    else if(op_extra_data->spkr_sw_rateadj_op != NULL)
8420296e:	62 f0 7e 88 	r0 = M[r4 + 504];
84202972:	13 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_setup_timed_playback_11;

84202974 <Lc_aec_reference_spkr_ttp_setup_timed_playback_10>:
    {
        /* We have a rate adjust operator, so we can do software TTP */
        op_extra_data->spkr_ttp_adjust_type = RATEMATCHING_SUPPORT_SW;
84202974:	41 20       	rMAC = Null + 1;
84202976:	61 f0 bc 8e 	M[r4 + 752] = rMAC;
        op_extra_data->spkr_rate_adjustment=0;
8420297a:	60 f0 70 8e 	M[r4 + 448] = Null;
        cbops_sra_set_rate_adjust(op_extra_data->spkr_sw_rateadj_op, op_extra_data->num_spkr_channels, 0);
8420297e:	63 f0 77 88 	r1 = M[r4 + 476];
84202982:	04 00       	r2 = Null + Null;
84202984:	ff fd a1 f0 	call (m) 0x16c9c;
84202988:	39 e8 
		/* force coming out of pass-through mode */
        cbops_rateadjust_passthrough_mode(op_extra_data->spkr_sw_rateadj_op, FALSE);
8420298a:	62 f0 7e 88 	r0 = M[r4 + 504];
8420298e:	03 00       	r1 = Null + Null;
84202990:	ff fd a1 f0 	call (m) 0x16c96;
84202994:	27 e8 
84202996:	cb 6f       	jump (m) Lc_aec_reference_spkr_ttp_setup_timed_playback_5;

84202998 <Lc_aec_reference_spkr_ttp_setup_timed_playback_11>:
    else
    {
        /* For doing TTP playback either it should support HW rate adjustment
         * or have a SW rate adjust operator in the graph.
         */
        return FALSE;
84202998:	02 00       	r0 = Null + Null;

8420299a <Lc_aec_reference_spkr_ttp_setup_timed_playback_12>:

	/* even if we aren't told, speaker graph is enacting */
	op_extra_data->spkr_rate_enactment = op_extra_data->spkr_rate_ability;

    return TRUE;
}
8420299a:	f1 48       	popm <FP, r4, rLink>;
8420299c:	d8 4c       	rts;

8420299e <Lc_aec_reference_spkr_ttp_reset_1>:
 * \brief reset timed playback mode internal state
 * \param op_extra_data pointer to AEC_REFERENCE_OP_DATA data
 * \param error difference between expected ttp and now
 */
static void aec_reference_spkr_ttp_reset(AEC_REFERENCE_OP_DATA *op_extra_data)
{
8420299e:	c8 1c       	pushm <FP(=SP), rLink>;
    patch_fn_shared(aec_reference);

    op_extra_data->spkr_ttp_error_acc = 0;
842029a0:	20 f0 b9 8e 	M[r0 + 740] = Null;
    op_extra_data->spkr_ttp_error_acc_cnt = 0;
842029a4:	20 f0 ba 8e 	M[r0 + 744] = Null;
    op_extra_data->spkr_last_ttp_error = 0;
842029a8:	20 f0 b8 8e 	M[r0 + 736] = Null;
    op_extra_data->spkr_error_threshold = SPKR_TTP_MAX_LATENCY_LOW_THRESHOLD_US;
842029ac:	01 f0 fa 40 	rMAC = Null + 250;
842029b0:	21 f0 b7 8e 	M[r0 + 732] = rMAC;

    /* pid controller will be started */
    timed_reset_pid_controller(&op_extra_data->spkr_pid_state);
842029b4:	02 f0 08 47 	r0 = r0 + 776;
842029b8:	ff fd 95 f0 	call (m) 0x15562;
842029bc:	2b ed 

842029be <Lc_aec_reference_spkr_ttp_reset_2>:
}
842029be:	c8 48       	popm <FP, rLink>;
842029c0:	d8 4c       	rts;

842029c2 <Lc_aec_reference_spkr_ttp_error_control_1>:
 * \brief running PID controller to minimise the ttp error
 * \param pointer to AEC_REFERENCE_OP_DATA data
 * \param error difference between expected and estimated time to play
 */
static void aec_reference_spkr_ttp_error_control(AEC_REFERENCE_OP_DATA *op_extra_data, TIME_INTERVAL error)
{
842029c2:	f1 1c       	pushm <FP(=SP), r4, rLink>;
842029c4:	16 00       	r4 = r0 + Null;
    int error_diff;
    patch_fn_shared(aec_reference);

    /* ignore the error if we have a big jump in error */
    error_diff = error - op_extra_data->spkr_last_ttp_error;
842029c6:	61 f0 b8 88 	rMAC = M[r4 + 736];
842029ca:	5a 04       	r0 = r1 - rMAC;
    op_extra_data->spkr_last_ttp_error = error;
842029cc:	63 f0 b8 8e 	M[r4 + 736] = r1;
    if (pl_abs_i32(error_diff) > SPKR_TTP_MAX_ERROR_JUMP_US)
842029d0:	4f f2 42 ce 	r0 = ABS r0;
842029d4:	90 3c       	Null = r0 - 50;
842029d6:	08 f0 c5 e0 	if HI jump (m) Lc_aec_reference_spkr_ttp_error_control_4;

842029da <Lc_aec_reference_spkr_ttp_error_control_2>:
    {
        return;
    }

    /* accumulate error for averaging */
    op_extra_data->spkr_ttp_error_acc_cnt++;
842029da:	61 f0 ba 88 	rMAC = M[r4 + 744];
842029de:	49 20       	rMAC = rMAC + 1;
842029e0:	61 f0 ba 8e 	M[r4 + 744] = rMAC;
    op_extra_data->spkr_ttp_error_acc += error;
842029e4:	62 f0 b9 88 	r0 = M[r4 + 740];
842029e8:	9a 00       	r0 = r1 + r0;
842029ea:	62 f0 b9 8e 	M[r4 + 740] = r0;
    if(op_extra_data->spkr_ttp_error_acc_cnt == SPKR_TTP_ERROR_AVERAGING_PERIOD_MS)
842029ee:	88 26       	Null = rMAC - 10;
842029f0:	15 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_error_control_4;

842029f2 <Lc_aec_reference_spkr_ttp_error_control_3>:
    {
        /* calculate average error */
        int error_avg = frac_mult(op_extra_data->spkr_ttp_error_acc,
                                  FRACTIONAL(1.0/SPKR_TTP_ERROR_AVERAGING_PERIOD_MS));
842029f2:	cc f0 63 f6 	r1 = Null + 214748364;
842029f6:	cc 58 
842029f8:	3f f2 44 c9 	r2 = r0 * r1 (frac);

        /* run controller to minimise the error */
        timed_run_pid_controller(&op_extra_data->spkr_pid_state, &op_extra_data->spkr_pid_params, error_avg);
842029fc:	63 f0 f4 22 	r1 = r4 + 756;
84202a00:	62 f0 08 23 	r0 = r4 + 776;
84202a04:	ff fd 95 f0 	call (m) 0x15484;
84202a08:	21 e4 
                    hal_get_time(),
                    error_avg,
                    op_extra_data->spkr_pid_state.warp);
#endif
        /* apply the last calculated warp rate */
        aec_reference_spkr_ttp_adjust_rate(op_extra_data, op_extra_data->spkr_pid_state.warp);         /* reset the averaging accumulator */
84202a0a:	63 f0 c2 88 	r1 = M[r4 + 776];
84202a0e:	32 00       	r0 = r4 + Null;
84202a10:	07 4e       	call (m) Lc_aec_reference_spkr_ttp_adjust_rate_1;

        op_extra_data->spkr_ttp_error_acc_cnt = 0;
84202a12:	60 f0 ba 8e 	M[r4 + 744] = Null;
        op_extra_data->spkr_ttp_error_acc = 0;
84202a16:	60 f0 b9 8e 	M[r4 + 740] = Null;

84202a1a <Lc_aec_reference_spkr_ttp_error_control_4>:
    }
}
84202a1a:	f1 48       	popm <FP, r4, rLink>;
84202a1c:	d8 4c       	rts;

84202a1e <Lc_aec_reference_spkr_ttp_adjust_rate_1>:
 * \brief applies warp rate to enacting sra
 * \param pointer to AEC_REFERENCE_OP_DATA data
 * \param warp warp value
 */
static void aec_reference_spkr_ttp_adjust_rate(AEC_REFERENCE_OP_DATA *op_extra_data, int warp)
{
84202a1e:	c8 1c       	pushm <FP(=SP), rLink>;
84202a20:	1c 00       	r2 = r1 + Null;
    patch_fn_shared(aec_reference);

    /* expect to come here only in timed playback mode */
    PL_ASSERT(op_extra_data->spkr_timed_playback_mode);
84202a22:	20 f0 b2 88 	Null = M[r0 + 712];
84202a26:	09 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_adjust_rate_3;

84202a28 <Lc_aec_reference_spkr_ttp_adjust_rate_2>:
84202a28:	03 f0 6b 42 	r1 = Null + 619;
84202a2c:	02 f0 13 60 	r0 = Null + 4115;
84202a30:	ff fd 8a f0 	call (m) 0x13f12;
84202a34:	23 e7 
84202a36:	1b 6e       	jump (m) Lc_aec_reference_spkr_ttp_adjust_rate_9;

84202a38 <Lc_aec_reference_spkr_ttp_adjust_rate_3>:

    if(op_extra_data->spkr_ttp_adjust_type == RATEMATCHING_SUPPORT_HW)
84202a38:	21 f0 bc 88 	rMAC = M[r0 + 752];
84202a3c:	88 24       	Null = rMAC - 2;
84202a3e:	07 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_adjust_rate_5;

84202a40 <Lc_aec_reference_spkr_ttp_adjust_rate_4>:
    {
        /* set the HW warp value by sending that to real audio ep
         * NOTE TODO_AEC_REFERENCE_TTP: HW warp hasn't been tested */
        set_override_ep_ratematch_adjustment(op_extra_data->spkr_endpoint, warp);
84202a40:	22 f0 80 88 	r0 = M[r0 + 512];
84202a44:	ff fd 10 f0 	call (m) 0x4aa0;
84202a48:	3d e2 
84202a4a:	11 6e       	jump (m) Lc_aec_reference_spkr_ttp_adjust_rate_9;

84202a4c <Lc_aec_reference_spkr_ttp_adjust_rate_5>:
    }
    else if(op_extra_data->spkr_ttp_adjust_type == RATEMATCHING_SUPPORT_SW)
84202a4c:	48 24       	Null = rMAC - 1;
84202a4e:	0f 62       	if NE jump (m) Lc_aec_reference_spkr_ttp_adjust_rate_9;

84202a50 <Lc_aec_reference_spkr_ttp_adjust_rate_6>:
    {
#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
        if(0 != op_extra_data->spkr_ext_rate_adjust_op)
84202a50:	21 f0 ae 88 	rMAC = M[r0 + 696];
84202a54:	05 60       	if EQ jump (m) Lc_aec_reference_spkr_ttp_adjust_rate_8;

84202a56 <Lc_aec_reference_spkr_ttp_adjust_rate_7>:
        {
            /* rate adjust using external rate adjust operator */
            stream_delegate_rate_adjust_set_current_rate(op_extra_data->spkr_ext_rate_adjust_op, warp);
84202a56:	0a 00       	r0 = rMAC + Null;
84202a58:	01 f0 35 e5 	call (m) $_stream_delegate_rate_adjust_set_current_rate;
84202a5c:	08 6e       	jump (m) Lc_aec_reference_spkr_ttp_adjust_rate_9;

84202a5e <Lc_aec_reference_spkr_ttp_adjust_rate_8>:
        }
        else
#endif /* INSTALL_DELEGATE_RATE_ADJUST_SUPPORT */
        {
            /* set the SW rate adjust warp value */
            cbops_sra_set_rate_adjust(op_extra_data->spkr_sw_rateadj_op, op_extra_data->num_spkr_channels, warp);
84202a5e:	23 f0 77 88 	r1 = M[r0 + 476];
84202a62:	22 f0 7e 88 	r0 = M[r0 + 504];
84202a66:	ff fd a1 f0 	call (m) 0x16c9c;
84202a6a:	37 e1 

84202a6c <Lc_aec_reference_spkr_ttp_adjust_rate_9>:
        }
    }
}
84202a6c:	c8 48       	popm <FP, rLink>;
84202a6e:	d8 4c       	rts;

84202a70 <$_create_aec_ref_sidetone_op>:
                                     unsigned nr_spkrs,
                                     unsigned *sidetone_idx,
                                     unsigned spkr_threshold,
                                     unsigned safety_threshold)

{
84202a70:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84202a72:	13 09       	r9 = r0 + Null;
84202a74:	1a 09       	r8 = r1 + Null;
84202a76:	21 09       	r7 = r2 + Null;
84202a78:	2f 00       	r5 = r3 + Null;
84202a7a:	ee d9       	r4 = M[FP + -12];
    cbops_op *op = NULL;
84202a7c:	02 00       	r0 = Null + Null;

    patch_fn_shared(aec_reference);

    /* sidetone can be mixed to 1 or 2 speakers only */
    if(nr_spkrs > 2)
84202a7e:	b8 24       	Null = r5 - 2;
84202a80:	09 f0 87 e0 	if LS jump (m) Lc_create_aec_ref_sidetone_op_3;

84202a84 <Lc_create_aec_ref_sidetone_op_2>:
    {
        return op;
84202a84:	2c 6e       	jump (m) Lc_create_aec_ref_sidetone_op_6;

84202a86 <Lc_create_aec_ref_sidetone_op_3>:
    }

    // cbop param struct size (header plus cbop-specific parameters)
    op = (cbops_op*)xzpmalloc(sizeof_cbops_op(cbops_aec_ref_sidetone_op, 1, nr_spkrs));
84202a86:	c3 20       	r1 = Null + 3;
84202a88:	7a 20       	r0 = r5 + 1;
84202a8a:	52 54       	r0 = r0 LSHIFT 2;
84202a8c:	02 f0 58 44 	r0 = r0 + 88;
84202a90:	ff fd 12 f0 	call (m) 0x4f2a;
84202a94:	3b e4 
84202a96:	10 09       	r6 = r0 + Null;
    if(op)
84202a98:	21 60       	if EQ jump (m) Lc_create_aec_ref_sidetone_op_5;

84202a9a <Lc_create_aec_ref_sidetone_op_4>:
    {
        cbops_aec_ref_sidetone_op *params;

        /* Setup Operator func table */
        op->function_vector    = cbops_aec_ref_sidetone_table;
84202a9a:	07 f0 01 f0 	rMAC = Null + 7340368;
84202a9e:	50 41 
84202aa0:	81 f0 02 8e 	M[r6 + 8] = rMAC;
        /* Setup cbop param struct header info */
        params = (cbops_aec_ref_sidetone_op*)cbops_populate_param_hdr(op,
                                                                      1,
                                                                      0,
                                                                      sidetone_idx,
                                                                      NULL);
84202aa4:	00 f0 30 cf 	push Null;
84202aa8:	fd d9       	r3 = M[FP + -4];
84202aaa:	43 20       	r1 = Null + 1;
84202aac:	04 00       	r2 = Null + Null;
84202aae:	ff fd a2 f0 	call (m) 0x16f30;
84202ab2:	23 e4 
84202ab4:	7f 4c       	SP = SP + -4;

        /* Setup cbop-specific parameters */
        params->spkr_threshold  = spkr_threshold;
84202ab6:	f1 d9       	rMAC = M[FP + -8];
84202ab8:	51 9e       	M[r0 + 36] = rMAC;
        params->safety_threshold_low = safety_threshold;
84202aba:	96 8f       	M[r0 + 24] = r4;
        params->safety_threshold_high = safety_threshold*2;
84202abc:	33 54       	r1 = r4 LSHIFT 1;
84202abe:	d3 8f       	M[r0 + 28] = r1;
        params->safety_set_threshold = (params->safety_threshold_low + params->safety_threshold_high)/2;
84202ac0:	f3 00       	r1 = r4 + r1;
84202ac2:	1b 50       	r1 = r1 LSHIFT -1;
84202ac4:	13 9e       	M[r0 + 32] = r1;
        params->mic_buf = mic_buf;
84202ac6:	2b f0 01 8e 	M[r0 + 4] = r9;
        params->spkr_bufs = spkr_bufs;
84202aca:	29 f0 00 ee 	M[r0 + Null] = r7;
        params->mic_idx = mic_idx;
84202ace:	2a f0 05 8e 	M[r0 + 20] = r8;
        params->nr_spkrs = nr_spkrs;
84202ad2:	97 8e       	M[r0 + 8] = r5;

        /* initialise the operator */
        aec_ref_sidetone_initialise(op);
84202ad4:	42 08       	r0 = r6 + Null;
84202ad6:	03 f0 3b e0 	call (m) $_aec_ref_sidetone_initialise;

84202ada <Lc_create_aec_ref_sidetone_op_5>:
    }

    return(op);
84202ada:	42 08       	r0 = r6 + Null;

84202adc <Lc_create_aec_ref_sidetone_op_6>:
}
84202adc:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84202ade:	d8 4c       	rts;

84202ae0 <$_AEC_REFERENCE_GetDefaults>:
   0x00000001u,			// ST_PEQ_SCALE2
   0x00000001u			// ST_PEQ_SCALE3
};

unsigned *AEC_REFERENCE_GetDefaults(unsigned capid){
	switch(capid){
84202ae0:	20 f0 43 24 	Null = r0 - 67;
84202ae4:	05 60       	if EQ jump (m) Lc_AEC_REFERENCE_GetDefaults_3;

84202ae6 <Lc_AEC_REFERENCE_GetDefaults_2>:
84202ae6:	01 f0 20 f0 	Null = r0 - 16391;
84202aea:	07 24 
84202aec:	05 62       	if NE jump (m) Lc_AEC_REFERENCE_GetDefaults_4;

84202aee <Lc_AEC_REFERENCE_GetDefaults_3>:
		case 0x0043: return defaults_aec_referenceAECREF;
84202aee:	f8 ff 02 f0 	r0 = Null + -8388604;
84202af2:	04 40 
84202af4:	02 6e       	jump (m) Lc_AEC_REFERENCE_GetDefaults_5;

84202af6 <Lc_AEC_REFERENCE_GetDefaults_4>:
		case 0x4007: return defaults_aec_referenceAECREF;
	}
	return((unsigned *)0);
84202af6:	02 00       	r0 = Null + Null;

84202af8 <Lc_AEC_REFERENCE_GetDefaults_5>:
84202af8:	d8 4c       	rts;

84202afa <$_cbops_remove_operator_from_graph>:
        pfree(op);
    }
}

void cbops_remove_operator_from_graph(cbops_graph *graph,cbops_op *op)
{
84202afa:	c8 1c       	pushm <FP(=SP), rLink>;
    cbops_op   *prev_op = op->prev_operator_addr;
84202afc:	19 e8       	rMAC = M[r1 + Null];
    cbops_op   *next_op = op->next_operator_addr;
84202afe:	5c 88       	r2 = M[r1 + 4];

   if(graph->first == op)
84202b00:	15 e8       	r3 = M[r0 + Null];
84202b02:	e8 04       	Null = r3 - r1;
84202b04:	07 62       	if NE jump (m) Lc_cbops_remove_operator_from_graph_5;

84202b06 <Lc_cbops_remove_operator_from_graph_2>:
   {
       /* we are removing the first operator in the graph,
        * next op will become new first
        */
       graph->first = next_op;
       if(next_op == NULL)
84202b06:	14 ee       	M[r0 + Null] = r2;
84202b08:	03 62       	if NE jump (m) Lc_cbops_remove_operator_from_graph_4;

84202b0a <Lc_cbops_remove_operator_from_graph_3>:
       {
           /* this op was the only op in the graph
            * now graph is empty
            */
           graph->last = NULL;
84202b0a:	50 8e       	M[r0 + 4] = Null;
84202b0c:	0a 6e       	jump (m) Lc_cbops_remove_operator_from_graph_8;

84202b0e <Lc_cbops_remove_operator_from_graph_4>:
       else
       {
           /* there is still op remaing,
            * just config the new first
            */
           next_op->prev_operator_addr = NULL;
84202b0e:	20 ee       	M[r2 + Null] = Null;
84202b10:	08 6e       	jump (m) Lc_cbops_remove_operator_from_graph_8;

84202b12 <Lc_cbops_remove_operator_from_graph_5>:
       }
   }
   else if(next_op == NULL)
84202b12:	20 04       	Null = r2 - Null;
84202b14:	04 62       	if NE jump (m) Lc_cbops_remove_operator_from_graph_7;

84202b16 <Lc_cbops_remove_operator_from_graph_6>:
   {
       /* This isn't the only operator in the graph,
        * but it is the last one in chain
        */
       prev_op->next_operator_addr = NULL;
84202b16:	48 8e       	M[rMAC + 4] = Null;
       graph->last = prev_op;
84202b18:	51 8e       	M[r0 + 4] = rMAC;
84202b1a:	03 6e       	jump (m) Lc_cbops_remove_operator_from_graph_8;

84202b1c <Lc_cbops_remove_operator_from_graph_7>:
   else
   {
       /* easy part, the op is neither first
        * nor last
        */
       prev_op->next_operator_addr = next_op;
84202b1c:	4c 8e       	M[rMAC + 4] = r2;
       next_op->prev_operator_addr = prev_op;
84202b1e:	21 ee       	M[r2 + Null] = rMAC;

84202b20 <Lc_cbops_remove_operator_from_graph_8>:
   }

   /* op removed from the graph, now
    * destroy the operator
    */
   destroy_operator(op);
84202b20:	1a 00       	r0 = r1 + Null;
84202b22:	1c 4e       	call (m) Lc_destroy_operator_1;

84202b24 <Lc_cbops_remove_operator_from_graph_9>:
}
84202b24:	c8 48       	popm <FP, rLink>;
84202b26:	d8 4c       	rts;

84202b28 <$_cbops_insert_operator_into_graph>:


void cbops_insert_operator_into_graph(cbops_graph *graph,cbops_op *op, cbops_op *after)
{
84202b28:	c8 1c       	pushm <FP(=SP), rLink>;
    if(after->next_operator_addr == NULL)
84202b2a:	61 88       	rMAC = M[r2 + 4];
84202b2c:	05 62       	if NE jump (m) Lc_cbops_insert_operator_into_graph_3;

84202b2e <Lc_cbops_insert_operator_into_graph_2>:
    {
        /* if this is the last operator in the graph
         * then append it to end of graph
         */
        cbops_append_operator_to_graph(graph, op);
84202b2e:	ff fd a1 f0 	call (m) 0x16e96;
84202b32:	29 eb 
84202b34:	07 6e       	jump (m) Lc_cbops_insert_operator_into_graph_4;

84202b36 <Lc_cbops_insert_operator_into_graph_3>:
    }
    else
    {
        /* put the operator between after and after->next */
        op->prev_operator_addr = after;
84202b36:	1c ee       	M[r1 + Null] = r2;
        op->next_operator_addr = after->next_operator_addr;
84202b38:	61 88       	rMAC = M[r2 + 4];
84202b3a:	59 8e       	M[r1 + 4] = rMAC;
        after->next_operator_addr->prev_operator_addr = op;        
84202b3c:	61 88       	rMAC = M[r2 + 4];
84202b3e:	0b ee       	M[rMAC + Null] = r1;
        after->next_operator_addr = op;
84202b40:	63 8e       	M[r2 + 4] = r1;

84202b42 <Lc_cbops_insert_operator_into_graph_4>:
    }
}
84202b42:	c8 48       	popm <FP, rLink>;
84202b44:	d8 4c       	rts;

84202b46 <$_cbops_unset_buffer>:

void cbops_unset_buffer(cbops_graph *graph,unsigned index)
{
    cbops_buffer *buffer = &graph->buffers[index];
84202b46:	19 47       	rMAC = r1 * 28 (int);
84202b48:	51 00       	rMAC = r0 + rMAC;
    if(buffer != NULL)
84202b4a:	09 31       	rMAC = rMAC + 36;
84202b4c:	06 60       	if EQ jump (m) Lc_cbops_unset_buffer_3;

84202b4e <Lc_cbops_unset_buffer_2>:
    {
        /* make the buffer index unused */
        buffer->type = 0;
84202b4e:	08 ec       	MH[rMAC + Null] = Null;
        buffer->buffer = NULL;
84202b50:	48 8e       	M[rMAC + 4] = Null;
        buffer->transfer_ptr = NULL;
84202b52:	48 8f       	M[rMAC + 20] = Null;
84202b54:	41 20       	rMAC = Null + 1;
84202b56:	d1 8f       	M[r0 + 28] = rMAC;

84202b58 <Lc_cbops_unset_buffer_3>:
84202b58:	d8 4c       	rts;

84202b5a <Lc_destroy_operator_1>:
 */
#include "cbops_c.h"
#include "pmalloc/pl_malloc.h"

static void destroy_operator(cbops_op *op)
{
84202b5a:	c8 1c       	pushm <FP(=SP), rLink>;
    if(op->function_vector == (void*)cbops_rate_adjust_table)
84202b5c:	91 88       	rMAC = M[r0 + 8];
84202b5e:	03 f0 28 42 	r1 = Null + 552;
84202b62:	c8 04       	Null = rMAC - r1;
84202b64:	05 62       	if NE jump (m) Lc_destroy_operator_3;

84202b66 <Lc_destroy_operator_2>:
    {
         destroy_sw_rate_adj_op((cbops_op*)op);
84202b66:	ff fd a0 f0 	call (m) 0x16c7c;
84202b6a:	37 e8 
84202b6c:	0c 6e       	jump (m) Lc_destroy_operator_6;

84202b6e <Lc_destroy_operator_3>:
    }
    else if(op->function_vector == (void*)cbops_iir_resampler_table)
84202b6e:	03 f0 4c 42 	r1 = Null + 588;
84202b72:	c8 04       	Null = rMAC - r1;
84202b74:	05 62       	if NE jump (m) Lc_destroy_operator_5;

84202b76 <Lc_destroy_operator_4>:
    {
         destroy_iir_resamplerv2_op(op);
84202b76:	ff fd a2 f0 	call (m) 0x17064;
84202b7a:	2f e7 
84202b7c:	04 6e       	jump (m) Lc_destroy_operator_6;

84202b7e <Lc_destroy_operator_5>:
    }
    else
    {
        pfree(op);
84202b7e:	ff fd 11 f0 	call (m) 0x4f62;
84202b82:	25 ef 

84202b84 <Lc_destroy_operator_6>:
    }
}
84202b84:	c8 48       	popm <FP, rLink>;
84202b86:	d8 4c       	rts;

84202b88 <$_create_rate_monitor_operator>:
 * create_rate_monitor_operator
 */
#define RATE_MATCH_OP_NUM_INPUTS    1

cbops_op* create_rate_monitor_operator(unsigned clk_per_sec,unsigned idx)
{
84202b88:	f2 1d       	pushm <FP(=SP), r4, r5, rLink>, SP = SP + 0x10;
84202b8a:	16 00       	r4 = r0 + Null;
84202b8c:	23 de       	M[FP + 16] = r1;
    // cbop param struct size (header plus cbop-specific parameters)
    cbops_op *op = (cbops_op*)xzpmalloc(sizeof_cbops_op(cbops_rate_monitor_op, RATE_MATCH_OP_NUM_INPUTS, 0));
84202b8e:	c3 20       	r1 = Null + 3;
84202b90:	02 f0 5c 40 	r0 = Null + 92;
84202b94:	ff fd 11 f0 	call (m) 0x4f2a;
84202b98:	37 ec 
84202b9a:	17 00       	r5 = r0 + Null;

    if(op)
84202b9c:	12 60       	if EQ jump (m) Lc_create_rate_monitor_operator_3;

84202b9e <Lc_create_rate_monitor_operator_2>:
    {
        cbops_rate_monitor_op *params;
        
        /* Setup Operator func table */
        op->function_vector    = cbops_rate_monitor_table;
84202b9e:	01 f0 e4 42 	rMAC = Null + 740;
84202ba2:	b9 8e       	M[r5 + 8] = rMAC;

        /* Setup cbop param struct header info */
        params  = (cbops_rate_monitor_op*)cbops_populate_param_hdr(op, RATE_MATCH_OP_NUM_INPUTS, 0, &idx, NULL);
84202ba4:	00 f0 30 cf 	push Null;
84202ba8:	05 11       	r3 = FP + 16;
84202baa:	43 20       	r1 = Null + 1;
84202bac:	04 00       	r2 = Null + Null;
84202bae:	ff fd a1 f0 	call (m) 0x16f30;
84202bb2:	23 ec 
84202bb4:	7f 4c       	SP = SP + -4;

        params->period_per_second = clk_per_sec;
84202bb6:	16 ee       	M[r0 + Null] = r4;
        params->average_io_rate = FRACTIONAL(0.5);
84202bb8:	ff f3 f1 f7 	rMAC = Null + 1073741823;
84202bbc:	ff 7b 
84202bbe:	11 8f       	M[r0 + 16] = rMAC;

84202bc0 <Lc_create_rate_monitor_operator_3>:
    }

    return(op);
84202bc0:	3a 00       	r0 = r5 + Null;

84202bc2 <Lc_create_rate_monitor_operator_4>:
}
84202bc2:	f2 49       	SP = SP - 0x10, popm <FP, r4, r5, rLink>;
84202bc4:	d8 4c       	rts;

84202bc6 <$_create_sidetone_filter_op>:
 * It fits into multi-channel model, but it only ever actually uses single in/out channel.
 */
cbops_op* create_sidetone_filter_op(unsigned input_idx, unsigned output_idx,
                                          unsigned max_stages, cbops_sidetone_params *st_params,
                                          unsigned *peq_params)
{
84202bc6:	f3 1d       	pushm <FP(=SP), r4, r5, r6, rLink>, SP = SP + 0x10;
84202bc8:	26 00       	r4 = r2 + Null;
84202bca:	28 09       	r6 = r3 + Null;
84202bcc:	33 de       	M[FP + 24] = r1;
84202bce:	2a de       	M[FP + 20] = r0;
    cbops_op *op;
    /* extra 2 words compared to ROM, needed as we use standard PEQ for filtering */
    op = (cbops_op*)xzpmalloc(sizeof_cbops_op(cbops_sidetone_filter_op, 1, 1) +
                              (2*(max_stages+1) + 2)*sizeof(unsigned) );
84202bd0:	c3 20       	r1 = Null + 3;
84202bd2:	b2 20       	r0 = r4 + 2;
84202bd4:	92 54       	r0 = r0 LSHIFT 3;
84202bd6:	02 f0 5c 44 	r0 = r0 + 92;
84202bda:	ff fd 11 f0 	call (m) 0x4f2a;
84202bde:	31 ea 
84202be0:	17 00       	r5 = r0 + Null;
    if(op)
84202be2:	16 60       	if EQ jump (m) Lc_create_sidetone_filter_op_3;

84202be4 <Lc_create_sidetone_filter_op_2>:
    {
        cbops_sidetone_filter_op  *params;

        op->function_vector    = cbops_sidetone_filter_table;
84202be4:	01 f0 cc 42 	rMAC = Null + 716;
84202be8:	b9 8e       	M[r5 + 8] = rMAC;

        /* Setup cbop param struct header info */
        params = (cbops_sidetone_filter_op*)cbops_populate_param_hdr(op, 1, 1, &input_idx, &output_idx);
84202bea:	81 11       	rMAC = FP + 24;
84202bec:	09 1c       	pushm <rMAC>;
84202bee:	45 11       	r3 = FP + 20;
84202bf0:	44 20       	r2 = Null + 1;
84202bf2:	23 00       	r1 = r2 + Null;
84202bf4:	ff fd a1 f0 	call (m) 0x16f30;
84202bf8:	3d e9 
84202bfa:	7f 4c       	SP = SP + -4;

        /* Set up the parameters - there are no channel-specific params as such, as it only works on a
         * single channel.
         */

        params->inv_dac_gain = FRACTIONAL(1.0); // TODO - handle gain adjustment for post volume
84202bfc:	ff f7 f1 f7 	rMAC = Null + 2147483647;
84202c00:	ff 7b 
84202c02:	d1 8e       	M[r0 + 12] = rMAC;

        params->params = st_params;
84202c04:	28 f0 00 ee 	M[r0 + Null] = r6;
        params->peq.max_stages = max_stages;
84202c08:	16 9e       	M[r0 + 32] = r4;
        params->peq.params = peq_params;
84202c0a:	f9 d9       	rMAC = M[FP + -4];
84202c0c:	51 9e       	M[r0 + 36] = rMAC;

84202c0e <Lc_create_sidetone_filter_op_3>:
    }

    return(op);
84202c0e:	3a 00       	r0 = r5 + Null;

84202c10 <Lc_create_sidetone_filter_op_4>:
}
84202c10:	f3 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, rLink>;
84202c12:	d8 4c       	rts;

84202c14 <$_create_iir_resamplerv2_op>:
    unsigned inter_stage_size,
    unsigned *inter_stage,
    int shift,
    unsigned dbl_precision,
    unsigned low_mips)
{
84202c14:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84202c16:	e6 d9       	r4 = M[FP + -16];
        out_rate,
        inter_stage_size,
        inter_stage,
        shift,
        dbl_precision,
        low_mips);
84202c18:	b1 f0 b3 5b 	rMAC = Null + 94131;
84202c1c:	d7 d9       	r5 = M[FP + -24];
84202c1e:	39 1c       	pushm <r5>;
84202c20:	df d9       	r5 = M[FP + -20];
84202c22:	39 1c       	pushm <r5>;
84202c24:	31 1c       	pushm <r4>;
84202c26:	ef d9       	r5 = M[FP + -12];
84202c28:	39 1c       	pushm <r5>;
84202c2a:	f7 d9       	r5 = M[FP + -8];
84202c2c:	39 1c       	pushm <r5>;
84202c2e:	ff d9       	r5 = M[FP + -4];
84202c30:	39 1c       	pushm <r5>;
84202c32:	d1 4c       	call rMAC;
84202c34:	7a 4c       	SP = SP + -24;

    if(op_ptr != NULL)
84202c36:	10 04       	Null = r0 - Null;
84202c38:	11 60       	if EQ jump (m) Lc_create_iir_resamplerv2_op_5;

84202c3a <Lc_create_iir_resamplerv2_op_2>:
    {
        /* increase the headroom by 1 bit (6dB) */
        cbops_param_hdr *params_hdr = (cbops_param_hdr*)CBOPS_OPERATOR_DATA_PTR(op_ptr);
84202c3a:	11 23       	rMAC = r0 + 12;

        cbops_iir_resampler_op *params =
            (cbops_iir_resampler_op *) params_hdr->operator_data_ptr;
84202c3c:	09 e8       	rMAC = M[rMAC + Null];
         * will increase the headroom by 1 bit or 6dB.
         */
        COMPILE_TIME_ASSERT(IIR_RESAMPLEV2_IO_SCALE_FACTOR == 9,
                        IIR_RESAMPLEV2_IO_SCALE_FACTOR_Not_Accepted);

        if(shift >= 0)
84202c3e:	30 04       	Null = r4 - Null;
84202c40:	04 f0 91 e0 	if NEG jump (m) Lc_create_iir_resamplerv2_op_4;

84202c44 <Lc_create_iir_resamplerv2_op_3>:
        {
            params->common.input_scale =  shift - IIR_RESAMPLEV2_IO_SCALE_FACTOR;
84202c44:	63 f3 f7 3b 	r1 = r4 + -9;
84202c48:	4b 8e       	M[rMAC + 4] = r1;
            params->common.output_scale =  IIR_RESAMPLEV2_IO_SCALE_FACTOR;
84202c4a:	43 22       	r1 = Null + 9;
84202c4c:	8b 8e       	M[rMAC + 8] = r1;
84202c4e:	06 6e       	jump (m) Lc_create_iir_resamplerv2_op_5;

84202c50 <Lc_create_iir_resamplerv2_op_4>:
        }
        else
        {
            params->common.input_scale = -IIR_RESAMPLEV2_IO_SCALE_FACTOR;
84202c50:	bb 78       	r1 = Null + -9;
84202c52:	4b 8e       	M[rMAC + 4] = r1;
            params->common.output_scale =  IIR_RESAMPLEV2_IO_SCALE_FACTOR - shift;
84202c54:	04 f6 53 d6 	r1 = 9 - r4;
84202c58:	8b 8e       	M[rMAC + 8] = r1;

84202c5a <Lc_create_iir_resamplerv2_op_5>:
        }
    }

    return op_ptr;
84202c5a:	f2 48       	popm <FP, r4, r5, rLink>;
84202c5c:	d8 4c       	rts;

84202c5e <$_opmgr_op_is_running>:
84202c5e:	01 00       	rMAC = Null + Null;
 *
 * \param op_data The data structure of the operator to query
 */
bool opmgr_op_is_running(OPERATOR_DATA *op_data)
{
    return op_data->state == OP_RUNNING;
84202c60:	10 b0       	Null = MBS[r0 + 24];
84202c62:	20 f0 41 ce 	if EQ rMAC = Null + 1;
84202c66:	0a 00       	r0 = rMAC + Null;

84202c68 <Lc_opmgr_op_is_running_2>:
84202c68:	d8 4c       	rts;

84202c6a <$_get_override_ep_rate_adjust_op>:
84202c6a:	f1 1e       	pushm <FP(=SP), r4, rLink>, SP = SP + 0x20;
#define EP_CURRENT_HW_WARP ((uint32)0x1001A)

#ifdef INSTALL_DELEGATE_RATE_ADJUST_SUPPORT
/* get_override_ep_rate_adjust_op */
bool get_override_ep_rate_adjust_op(OVERRIDE_EP_HANDLE ep_hdl, uint32* value)
{
84202c6c:	1e 00       	r4 = r1 + Null;
/** Set the unreliable flag
 * \param rm Rate measurement context
 */
static void inline rate_measure_set_unreliable(RATE_MEASURE* rm)
{
    rm->unreliable = TRUE;
84202c6e:	c4 10       	r2 = FP + 12;
84202c70:	58 dc       	MH[FP + 22] = Null;
84202c72:	80 da       	MB[FP + 16] = Null;
    ENDPOINT_GET_CONFIG_RESULT result;
    result.u.value = 0;
84202c74:	18 de       	M[FP + 12] = Null;
    bool success = stream_get_connected_to_endpoint_config((ENDPOINT*)ep_hdl, EP_RATE_ADJUST_OP, &result);
84202c76:	83 f0 18 40 	r1 = Null + 65560;
84202c7a:	ff fd 1a f0 	call (m) 0x6128;
84202c7e:	2f e5 
    *value = result.u.value;
84202c80:	19 d8       	rMAC = M[FP + 12];
84202c82:	31 ee       	M[r4 + Null] = rMAC;

84202c84 <Lc_get_override_ep_rate_adjust_op_2>:
    return success;
84202c84:	f1 4a       	SP = SP - 0x20, popm <FP, r4, rLink>;
84202c86:	d8 4c       	rts;

84202c88 <$_set_override_ep_set_hw_warp_apply_mode>:
}
#endif /* INSTALL_DELEGATE_RATE_ADJUST_SUPPORT */
/* set_override_ep_set_hw_warp_apply_mode */
bool set_override_ep_set_hw_warp_apply_mode(OVERRIDE_EP_HANDLE ep_hdl, uint32 value)
{
84202c88:	c8 1c       	pushm <FP(=SP), rLink>;
84202c8a:	1c 00       	r2 = r1 + Null;
    return stream_configure_connected_to_endpoint((ENDPOINT*)ep_hdl, EP_HW_WARP_APPLY_MODE, value);
84202c8c:	83 f0 19 40 	r1 = Null + 65561;
84202c90:	ff fd 1a f0 	call (m) 0x6146;
84202c94:	37 e5 

84202c96 <Lc_set_override_ep_set_hw_warp_apply_mode_2>:
}
84202c96:	c8 48       	popm <FP, rLink>;
84202c98:	d8 4c       	rts;

84202c9a <$_get_override_ep_current_hw_warp>:


/* get_override_ep_current_hw_warp */
bool get_override_ep_current_hw_warp(OVERRIDE_EP_HANDLE ep_hdl, uint32* value)
{
84202c9a:	f1 1e       	pushm <FP(=SP), r4, rLink>, SP = SP + 0x20;
84202c9c:	1e 00       	r4 = r1 + Null;
84202c9e:	c4 10       	r2 = FP + 12;
84202ca0:	58 dc       	MH[FP + 22] = Null;
84202ca2:	80 da       	MB[FP + 16] = Null;
    ENDPOINT_GET_CONFIG_RESULT result;
    result.u.value = 0;
84202ca4:	18 de       	M[FP + 12] = Null;
    bool success = stream_get_connected_to_endpoint_config((ENDPOINT*)ep_hdl, EP_CURRENT_HW_WARP, &result);
84202ca6:	83 f0 1a 40 	r1 = Null + 65562;
84202caa:	ff fd 1a f0 	call (m) 0x6128;
84202cae:	3f e3 
    *value = result.u.value;
84202cb0:	19 d8       	rMAC = M[FP + 12];
84202cb2:	31 ee       	M[r4 + Null] = rMAC;

84202cb4 <Lc_get_override_ep_current_hw_warp_2>:
    return success;
84202cb4:	f1 4a       	SP = SP - 0x20, popm <FP, r4, rLink>;
84202cb6:	d8 4c       	rts;

84202cb8 <$_stream_delegate_rate_adjust_set_target_rate>:
84202cb8:	c8 1d       	pushm <FP(=SP), rLink>, SP = SP + 0x10;
 *
 * \param opid operator id for the standalone rate adjust operator
 * \param target_rate_addr target rate
 */
void stream_delegate_rate_adjust_set_target_rate(unsigned opid, unsigned target_rate)
{
84202cba:	11 00       	rMAC = r0 + Null;
    unsigned params[3];

    /* send SET_TARGET_RATE message to the operator */
    params[0] = OPMSG_COMMON_SET_RATE_ADJUST_TARGET_RATE;
84202cbc:	12 f0 18 40 	r0 = Null + 8216;
84202cc0:	12 de       	M[FP + 8] = r0;
    params[1] = (uint16) (target_rate >> 16);
84202cc2:	9a 52       	r0 = r1 LSHIFT -16;
84202cc4:	1a de       	M[FP + 12] = r0;
    params[2] = (uint16) (target_rate & 0xFFFF);
84202cc6:	9a c6       	r0 = r1 AND 0xffff;
84202cc8:	22 de       	M[FP + 16] = r0;
    opmgr_operator_message(RESPOND_TO_OBPM,
                           opid,
                           sizeof(params)/sizeof(unsigned),
                           params,
                           stream_delegate_rate_adjust_message_callback);
84202cca:	42 f0 2d f0 	push Null + 69217593;
84202cce:	59 e3 
84202cd0:	85 10       	r3 = FP + 8;
84202cd2:	c4 20       	r2 = Null + 3;
84202cd4:	c2 2b       	r0 = Null + 31;
84202cd6:	0b 00       	r1 = rMAC + Null;
84202cd8:	ff fd 05 f0 	call (m) 0x37ca;
84202cdc:	33 e7 
84202cde:	7f 4c       	SP = SP + -4;

84202ce0 <Lc_stream_delegate_rate_adjust_set_target_rate_2>:
}
84202ce0:	c8 49       	SP = SP - 0x10, popm <FP, rLink>;
84202ce2:	d8 4c       	rts;

84202ce4 <$_stream_delegate_rate_adjust_set_passthrough_mode>:
 *
 * \param opid operator id for the standalone rate adjust operator
 * \param enable if TRUE enables pass-through mode else disables it
 */
void stream_delegate_rate_adjust_set_passthrough_mode(unsigned opid, bool enable)
{
84202ce4:	c8 1d       	pushm <FP(=SP), rLink>, SP = SP + 0x10;
84202ce6:	11 00       	rMAC = r0 + Null;
    unsigned params[2];

    /* send PASSTHROUGH_MODE message to the operator */
    params[0] = OPMSG_COMMON_SET_RATE_ADJUST_PASSTHROUGH_MODE;
84202ce8:	12 f0 19 40 	r0 = Null + 8217;
84202cec:	12 de       	M[FP + 8] = r0;
    params[1] = (uint16) enable;
84202cee:	9a c6       	r0 = r1 AND 0xffff;
84202cf0:	1a de       	M[FP + 12] = r0;
    opmgr_operator_message(RESPOND_TO_OBPM,
                           opid,
                           sizeof(params)/sizeof(unsigned),
                           params,
                           stream_delegate_rate_adjust_message_callback);
84202cf2:	42 f0 2d f0 	push Null + 69217593;
84202cf6:	59 e3 
84202cf8:	85 10       	r3 = FP + 8;
84202cfa:	84 20       	r2 = Null + 2;
84202cfc:	c2 2b       	r0 = Null + 31;
84202cfe:	0b 00       	r1 = rMAC + Null;
84202d00:	ff fd 05 f0 	call (m) 0x37ca;
84202d04:	2b e6 
84202d06:	7f 4c       	SP = SP + -4;

84202d08 <Lc_stream_delegate_rate_adjust_set_passthrough_mode_2>:
}
84202d08:	c8 49       	SP = SP - 0x10, popm <FP, rLink>;
84202d0a:	d8 4c       	rts;

84202d0c <$_stream_delegate_rate_adjust_set_current_rate>:
 *
 * Note: This message when delivered will directly set the current sra rate,
 *       suitable for TTP-type rate adjustment.
 */
void stream_delegate_rate_adjust_set_current_rate(unsigned opid, unsigned rate)
{
84202d0c:	c8 1d       	pushm <FP(=SP), rLink>, SP = SP + 0x10;
84202d0e:	11 00       	rMAC = r0 + Null;
    unsigned params[3];

    /* send SET_CURRENT_RATE message to the operator */
    params[0] = OPMSG_COMMON_SET_RATE_ADJUST_CURRENT_RATE;
84202d10:	12 f0 17 40 	r0 = Null + 8215;
84202d14:	12 de       	M[FP + 8] = r0;
    params[1] = (uint16) (rate >> 16);
84202d16:	9a 52       	r0 = r1 LSHIFT -16;
84202d18:	1a de       	M[FP + 12] = r0;
    params[2] = (uint16) (rate & 0xFFFF);
84202d1a:	9a c6       	r0 = r1 AND 0xffff;
84202d1c:	22 de       	M[FP + 16] = r0;
    opmgr_operator_message(RESPOND_TO_OBPM,
                           opid,
                           sizeof(params)/sizeof(unsigned),
                           params,
                           stream_delegate_rate_adjust_message_callback);
84202d1e:	42 f0 2d f0 	push Null + 69217593;
84202d22:	59 e3 
84202d24:	85 10       	r3 = FP + 8;
84202d26:	c4 20       	r2 = Null + 3;
84202d28:	c2 2b       	r0 = Null + 31;
84202d2a:	0b 00       	r1 = rMAC + Null;
84202d2c:	ff fd 05 f0 	call (m) 0x37ca;
84202d30:	3f e4 
84202d32:	7f 4c       	SP = SP + -4;

84202d34 <Lc_stream_delegate_rate_adjust_set_current_rate_2>:
}
84202d34:	c8 49       	SP = SP - 0x10, popm <FP, rLink>;
84202d36:	d8 4c       	rts;

84202d38 <Lc_stream_delegate_rate_adjust_message_callback_1>:
static bool stream_delegate_rate_adjust_message_callback(unsigned con_id,
                                                         unsigned status,
                                                         unsigned op_id,
                                                         unsigned num_resp_params,
                                                         unsigned *resp_params)
{
84202d38:	c8 1c       	pushm <FP(=SP), rLink>;
84202d3a:	11 00       	rMAC = r0 + Null;
    /* No action, just log the response if message if it failed */
    if(status != STATUS_OK)
84202d3c:	18 04       	Null = r1 - Null;
84202d3e:	11 60       	if EQ jump (m) Lc_stream_delegate_rate_adjust_message_callback_6;

84202d40 <Lc_stream_delegate_rate_adjust_message_callback_2>:
    {
        L2_DBG_MSG4("Message to standalone rate adjust op failed: conid=%d, opid=%d, status=%d, messageID=%d",
                    con_id,
                    op_id,
                    status,
                    num_resp_params == 0?-1:resp_params[0]);
84202d40:	28 04       	Null = r3 - Null;
84202d42:	03 62       	if NE jump (m) Lc_stream_delegate_rate_adjust_message_callback_4;

84202d44 <Lc_stream_delegate_rate_adjust_message_callback_3>:
84202d44:	42 24       	r0 = Null - 1;
84202d46:	03 6e       	jump (m) Lc_stream_delegate_rate_adjust_message_callback_5;

84202d48 <Lc_stream_delegate_rate_adjust_message_callback_4>:
84202d48:	fa d9       	r0 = M[FP + -4];
84202d4a:	12 e8       	r0 = M[r0 + Null];

84202d4c <Lc_stream_delegate_rate_adjust_message_callback_5>:
84202d4c:	11 1c       	pushm <r0>;
84202d4e:	55 f1 02 f0 	r0 = Null + 357565199;
84202d52:	0f 43 
84202d54:	1d 00       	r3 = r1 + Null;
84202d56:	0b 00       	r1 = rMAC + Null;
84202d58:	ef fd ee ff 	call (m) 0x9f6;
84202d5c:	3f e4 
84202d5e:	7f 4c       	SP = SP + -4;

84202d60 <Lc_stream_delegate_rate_adjust_message_callback_6>:
    }

    return TRUE;
84202d60:	42 20       	r0 = Null + 1;

84202d62 <Lc_stream_delegate_rate_adjust_message_callback_7>:
}
84202d62:	c8 48       	popm <FP, rLink>;
84202d64:	d8 4c       	rts;

84202d66 <$kdc_start>:
.MODULE $M.kdc_start;
.CODESEGMENT PM;
.DATASEGMENT DM;

$kdc_start:
r0 = $_aec_reference_cap_data;
84202d66:	07 f0 02 f0 	r0 = Null + 7340032;
84202d6a:	00 40 
    /* Force this symbol to be exported in ELF */
    Null = $___kymera_debug_map_addr;
84202d6c:	20 f0 b0 41 	Null = Null + 16816;

84202d70 <$cbops.aec_ref_spkr_op.amount_to_use>:
          
#ifdef PATCH_LIBS
    LIBS_SLOW_SW_ROM_PATCH_POINT($cbops.aec_ref_spkr_op.amount_to_use.PATCH_ID_0, r7)
#endif
          
   push rlink;
84202d70:	00 f0 3d cf 	push rLink;
   
   // Get data pointer
   r7 = M[r8 + $cbops.param_hdr.OPERATOR_DATA_PTR_FIELD];
84202d74:	a9 f0 00 88 	r7 = M[r8 + 0];
   // Get amount of input
   r0 = M[r8 + $cbops.param_hdr.CHANNEL_INDEX_START_FIELD];    
84202d78:	a2 f0 03 88 	r0 = M[r8 + 12];
   call $cbops.get_amount_ptr;
84202d7c:	ff fd c8 f2 	call 0x5bd9c;
84202d80:	20 e1 
   r5 = M[r0];
84202d82:	17 e8       	r5 = M[r0 + Null];
   // Save data at input and make input large, will re-adjust for insertion
   M[r7 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.AMOUNT_DATA_FIELD] = r5;
84202d84:	97 f0 03 8e 	M[r7 + 12] = r5;
   r5 = 0x7FFF;
84202d88:	37 f0 ff 7b 	r5 = Null + 32767;
   M[r0] = r5;
84202d8c:	87 ee       	M[Null + r0] = r5;

#ifndef CHIP_BASE_A7DA_KAS
   // Get first output index
   r9 = M[r8 + $cbops.param_hdr.NR_INPUT_CHANNELS_FIELD];
84202d8e:	ab f0 01 88 	r9 = M[r8 + 4];
   Words2Addr(r9);
84202d92:	01 fb 1b c9 	r9 = r9 ASHIFT 2;
   r9 = r9 + $cbops.param_hdr.CHANNEL_INDEX_START_FIELD;
84202d96:	63 75       	r9 = r9 + 12;
   r0 = M[r8 + r9];
84202d98:	a2 f0 0b e8 	r0 = M[r8 + r9];
   call $cbops.get_cbuffer;
84202d9c:	ff fd c7 f2 	call 0x5bd8c;
84202da0:	30 ef 
   NULL = r0;
84202da2:	10 00       	Null = r0 + Null;
   if Z jump aec_ref_spkr_op.amount_to_use_done;
84202da4:	16 60       	if EQ jump (m) $M.cbops.aec_ref_spkr_op.aec_ref_spkr_op.amount_to_use_done;

   // First Port (r0);
   r5 = NULL;
84202da6:	07 00       	r5 = Null + Null;
   r6 = M[r7 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.MAX_ADVANCE_FIELD];
84202da8:	98 f0 01 88 	r6 = M[r7 + 4];
   r1 = M[r7 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.MAX_JITTER_FIELD];
84202dac:	93 f0 06 88 	r1 = M[r7 + 24];
   r6 = r6 + r1;  
84202db0:	18 0d       	r6 = r1 + r6;

   call calc_dac_amount_of_data;
84202db2:	67 4e       	call (m) $M.cbops.aec_ref_spkr_op.calc_dac_amount_of_data;
   // r2 is data in port (negative if wrap), r10 is max advance, r0 is adjustment
   // Limit amount of data after transfer to two times maximum advance
   NULL = r2 + r0;
84202db4:	a0 00       	Null = r2 + r0;
   if POS r1 = r6 - r2;
84202db6:	45 f8 03 c2 	if POS r1 = r6 - r2;
   if NEG r1 = Null;
84202dba:	04 f0 03 c0 	if NEG r1 = Null + Null;

   // Setup the limited transfer at output
   r0 = M[r8 + r9];
84202dbe:	a2 f0 0b e8 	r0 = M[r8 + r9];
   call $cbops.get_amount_ptr;
84202dc2:	ff fd c7 f2 	call 0x5bd9c;
84202dc6:	3a ee 
   M[r0]=r1;
84202dc8:	83 ee       	M[Null + r0] = r1;
   if Z call $cbops.force_processing;
84202dca:	f0 fd c7 f2 	if EQ call 0x5bdac;
84202dce:	22 ef 

84202dd0 <$M.cbops.aec_ref_spkr_op.aec_ref_spkr_op.amount_to_use_done>:
#endif

aec_ref_spkr_op.amount_to_use_done:
   pop rlink;
84202dd0:	00 f4 3d cf 	pop rLink;
   rts;
84202dd4:	d8 4c       	rts;

84202dd6 <$_get_aec_ref_cbops_inserts_total>:
   pop rlink;
   rts;
#endif /* #ifndef CBOPS_AEC_REF_SPKR_OP_PRE_MAIN_USE_ROM */
// unsigned get_aec_ref_cbops_inserts_total(cbops_op *op);
$_get_aec_ref_cbops_inserts_total:
    r0 = M[r0 + ($cbops_c.cbops_op_struct.PARAMETER_AREA_START_FIELD+$cbops.param_hdr.OPERATOR_DATA_PTR_FIELD)];
84202dd6:	d2 88       	r0 = M[r0 + 12];
    r1 = M[r0 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.WRAP_COUNT_FIELD];
84202dd8:	13 89       	r1 = M[r0 + 16];
    r0 = M[r0 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.NUM_INSERTS_FIELD];
84202dda:	52 89       	r0 = M[r0 + 20];
    r0 = r0 + r1;
84202ddc:	9a 00       	r0 = r1 + r0;
    rts;
84202dde:	d8 4c       	rts;

84202de0 <$_get_aec_ref_cbops_insert_op_insert_total>:

// unsigned get_aec_ref_cbops_insert_op_insert_total(cbops_op *op);
$_get_aec_ref_cbops_insert_op_insert_total:
    r0 = M[r0 + ($cbops_c.cbops_op_struct.PARAMETER_AREA_START_FIELD+$cbops.param_hdr.OPERATOR_DATA_PTR_FIELD)];
84202de0:	d2 88       	r0 = M[r0 + 12];
    r0 = M[r0 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.NUM_INSERTS_FIELD];
84202de2:	52 89       	r0 = M[r0 + 20];
    rts;
84202de4:	d8 4c       	rts;

84202de6 <$_get_aec_ref_cbops_wrap_op_insert_total>:

// unsigned get_aec_ref_cbops_wrap_op_insert_total(cbops_op *op);
$_get_aec_ref_cbops_wrap_op_insert_total:
    r0 = M[r0 + ($cbops_c.cbops_op_struct.PARAMETER_AREA_START_FIELD+$cbops.param_hdr.OPERATOR_DATA_PTR_FIELD)];
84202de6:	d2 88       	r0 = M[r0 + 12];
    r0 = M[r0 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.WRAP_COUNT_FIELD];
84202de8:	12 89       	r0 = M[r0 + 16];
    rts;
84202dea:	d8 4c       	rts;

84202dec <$cbops.aec_ref_spkr_op.post_main>:
#ifndef CHIP_BASE_A7DA_KAS
// Called after main processing of graph before buffer update
$cbops.aec_ref_spkr_op.post_main:

   // Check for Buffer Wrapping
    push rLink;
84202dec:	00 f0 3d cf 	push rLink;
#ifdef PATCH_LIBS
    LIBS_SLOW_SW_ROM_PATCH_POINT($cbops.aec_ref_spkr_op.post_main.PATCH_ID_0, r9)
#endif

    // Get first output index
    r9 = M[r8 + $cbops.param_hdr.NR_INPUT_CHANNELS_FIELD];
84202df0:	ab f0 01 88 	r9 = M[r8 + 4];
    Words2Addr(r9);
84202df4:	01 fb 1b c9 	r9 = r9 ASHIFT 2;
    r9 = r9 + r8;
84202df8:	53 0d       	r9 = r8 + r9;
    I4 = r9 + $cbops.param_hdr.CHANNEL_INDEX_START_FIELD;
84202dfa:	b4 f8 0c 20 	I4 = r9 + 12;

    // Get first buffer entry 
    r0 = M[I4,0];
84202dfe:	20 f0 30 d0 	Null = Null + Null, r0 = M[I4,0];
    r3 = r0 * $CBOP_BUFTAB_ENTRY_SIZE_IN_ADDR (int);
84202e02:	15 47       	r3 = r0 * 28 (int);
    r3 = r3 + r4;
84202e04:	75 01       	r3 = r4 + r3;

    // Get Cbuffer Ptr
    r0 = M[r3 + $cbops_c.cbops_buffer_struct.BUFFER_FIELD];
84202e06:	6a 88       	r0 = M[r3 + 4];
    if Z jump $pop_rLink_and_rts;
84202e08:	7c ff 40 f5 	if EQ jump (m) 0x2cf82;
84202e0c:	fb e2 

#if !defined(CHIP_BASE_BC7)   
    // Get transfer amount (r5)
    r1 = M[r3 + $cbops_c.cbops_buffer_struct.TRANSFER_PTR_FIELD];
84202e0e:	6b 89       	r1 = M[r3 + 20];
    r5 = M[r1];
84202e10:	1f e8       	r5 = M[r1 + Null];
#else
    r5 = NULL;
#endif

    // Compute amount of data in source
    r7 = M[r8 + $cbops.param_hdr.OPERATOR_DATA_PTR_FIELD];
84202e12:	a9 f0 00 88 	r7 = M[r8 + 0];
    r6 = M[r7 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.MAX_JITTER_FIELD];
84202e16:	98 f0 06 88 	r6 = M[r7 + 24];
    call calc_dac_amount_of_data;
84202e1a:	33 4e       	call (m) $M.cbops.aec_ref_spkr_op.calc_dac_amount_of_data;

    r6 = M[r7 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.MAX_ADVANCE_FIELD];
84202e1c:	98 f0 01 88 	r6 = M[r7 + 4];

    // r2 is number of samples in port, negative if overflow
    r10 = r6 - r2;
84202e20:	4f f8 0c c2 	r10 = r6 - r2;
    if LE jump $pop_rLink_and_rts;
84202e24:	7c ff 4d f5 	if LE jump (m) 0x2cf82;
84202e28:	df e2 

    // Increment Wrap count
    r1 = M[r7 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.WRAP_COUNT_FIELD];
84202e2a:	93 f0 04 88 	r1 = M[r7 + 16];
    r1 = r1 + r10;    
84202e2e:	63 0c       	r1 = r10 + r1;
    M[r7 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.WRAP_COUNT_FIELD]=r1;
84202e30:	93 f0 04 8e 	M[r7 + 16] = r1;
    
    // setup amounts for insertions
    r5 = r5 + r10;
84202e34:	67 0c       	r5 = r10 + r5;
    r6 = r10;
84202e36:	60 09       	r6 = r10 + Null;

    // Number of Ports
    r9 = M[r8 + $cbops.param_hdr.NR_OUTPUT_CHANNELS_FIELD];
84202e38:	ab f0 02 88 	r9 = M[r8 + 8];

84202e3c <$M.cbops.aec_ref_spkr_op.process_channel>:

    // Perform insertion
 process_channel:
    r0 = M[I4,0];
84202e3c:	20 f0 30 d0 	Null = Null + Null, r0 = M[I4,0];
    call $cbops.get_buffer_address_and_length;
84202e40:	ff fd c7 f2 	call 0x5bd20;
84202e44:	20 e7 
    I0 = r0;
84202e46:	10 0a       	I0 = r0 + Null;
    if Z jump process_channel_next;
84202e48:	11 60       	if EQ jump (m) $M.cbops.aec_ref_spkr_op.process_channel_next;
      // Insert r6 zeros
      r10 = r6;
84202e4a:	44 09       	r10 = r6 + Null;
      L0 = r1;
84202e4c:	1c 0b       	L0 = r1 + Null;
      push r2;
84202e4e:	00 f0 34 cf 	push r2;
      pop B0;
84202e52:	00 f6 3a cf 	pop B0;
      r1  = Null;
84202e56:	03 00       	r1 = Null + Null;
      do lp_insert_loop;
84202e58:	03 4c       	do (m) $M.cbops.aec_ref_spkr_op.lp_insert_loop;
         M[I0, MK1] = r1;
84202e5a:	b1 f0 30 c0 	Null = Null + Null, M[I0,4] = r1;

84202e5e <$M.cbops.aec_ref_spkr_op.lp_insert_loop>:
      lp_insert_loop:
      // Update amount (r5)
      r0 = M[I4,MK1];
84202e5e:	21 f0 30 d0 	Null = Null + Null, r0 = M[I4,4];
      call $cbops.get_amount_ptr;
84202e62:	ff fd c7 f2 	call 0x5bd9c;
84202e66:	3a e9 
      M[r0]=r5;
84202e68:	87 ee       	M[Null + r0] = r5;

84202e6a <$M.cbops.aec_ref_spkr_op.process_channel_next>:
    process_channel_next:
    r9 = r9 - 1;
84202e6a:	bb f0 01 24 	r9 = r9 - 1;
    if GT jump process_channel;
84202e6e:	e7 6b       	if GT jump (m) $M.cbops.aec_ref_spkr_op.process_channel;

    // Clear cicular buffer
    L0=NULL;
84202e70:	04 0b       	L0 = Null + Null;
    push NULL;
84202e72:	00 f0 30 cf 	push Null;
    pop B0;
84202e76:	00 f6 3a cf 	pop B0;

    pop rlink;
84202e7a:	00 f4 3d cf 	pop rLink;
    rts;
84202e7e:	d8 4c       	rts;

84202e80 <$M.cbops.aec_ref_spkr_op.calc_dac_amount_of_data>:
// TRASHED REGISTERS:
//    r0,r1,r2
//
// *****************************************************************************
calc_dac_amount_of_data:
    push rLink;
84202e80:	00 f0 3d cf 	push rLink;
    call $cbuffer.calc_amount_space_in_words;
84202e84:	ff fd 49 f1 	call (m) 0x2c1b6;
84202e88:	33 e9 

#ifdef CHIP_BASE_HYDRA
    // Hydra: r2 is local buffer size in addr
    Addr2Words(r2);
84202e8a:	64 58       	r2 = r2 ASHIFT -2;
    // Adjust space for amount written, buffer not port
    r0 = r0 - r5;
84202e8c:	d2 05       	r0 = r0 - r5;
#endif

    // r0 is space in port minus one
    // r2 = amount data in port
    // r6 min required space
    r2  = r2 - r0;    
84202e8e:	a4 04       	r2 = r2 - r0;
    // check minimum space, if less than that
    // wrap has happened
    Null = r0 - r6;
84202e90:	8f f2 00 c2 	Null = r0 - r6;
    if NEG r2 = NULL - r0;
84202e94:	24 f0 04 c2 	if NEG r2 = Null - r0;

    r0 = M[r7 + $cbops_aec_ref_spkr_op._aec_ref_op_struct.BUFFER_ADJ_FIELD];
84202e98:	92 f0 02 88 	r0 = M[r7 + 8];
    r2 = r2 - r0;
84202e9c:	a4 04       	r2 = r2 - r0;
    // r2 is number of samples in port, negative if overflow
    pop rLink;
84202e9e:	00 f4 3d cf 	pop rLink;
    rts;
84202ea2:	d8 4c       	rts;

84202ea4 <$_aecref_calc_sync_mic_rate>:
$_aecref_calc_sync_mic_rate:
    // r0 = spkr_ra
    // r1 = spkr_rt
    // r2 = mic_rt
    // return spkr_rt/(mic_rt*(1+spkr_ra))
    rMAC = -r0;
84202ea4:	81 04       	rMAC = Null - r0;
    r3 = r0 * r0 (frac);
84202ea6:	2f f2 45 c9 	r3 = r0 * r0 (frac);
    rMAC = rMAC + r0 * r0;
84202eaa:	2f f2 c1 ca 	rMAC = rMAC + r0 * r0 (SS);
    rMAC = rMAC - r0*r3;   // rMAC = -spkr_ra + spkr_ra^2 - spkr_ra^3
84202eae:	5f f2 c1 cb 	rMAC = rMAC - r0 * r3 (SS);
                           // good enough estimation of 1.0/(1.0+spkr_ra) -1.0
    r0 = rMAC;
84202eb2:	0a 00       	r0 = rMAC + Null;
    rMAC = r1 - r2;
84202eb4:	19 05       	rMAC = r1 - r2;
    if Z rts;              // all done if mic_rt==spkr_rt
84202eb6:	00 fd c0 cd 	if EQ rts;
    // calculate (spkr_rt/mic_rt)-1.0
#if DAWTH>24
   // division & rounding
   rMAC0 = r2;
84202eba:	05 f0 00 f4 	rMAC0 = r2 LSHIFT 0;
84202ebe:	de c8 
   r2 = r2 + r2;
84202ec0:	24 01       	r2 = r2 + r2;
   Div = rMAC / r2;
84202ec2:	a1 4c       	Div = rMAC / r2;
   r1 = DivResult;       // r1 = (spkr_rt/mic_rt)-1.0
84202ec4:	c3 4c       	r1 = DivResult;
   r1 = r1 - 0.5;    // r1 = 0.5(spkr_rt/mic_rt-1.0)
   r1 = r1 + r1;     // r1 = (spkr_rt/mic_rt)-1.0
#endif
    // r1 = (spkr_rt/mic_rt)-1.0
    // r0 = 1.0/(1.0+spkr_ra)-1.0
    r2 = r1 * r0 (frac);
84202ec6:	2f f3 44 c9 	r2 = r1 * r0 (frac);
    r0 = r1 + r0;
84202eca:	9a 00       	r0 = r1 + r0;
    r0 = r0 + r2;
84202ecc:	a2 00       	r0 = r2 + r0;
    // r0 = spkr_rt/mic_rt/(1+spkr_ra) - 1.0
    rts;
84202ece:	d8 4c       	rts;

84202ed0 <$cbops.aec_ref_sidetone_op.amount_to_use>:
// Called before amount_to_use of graph
$cbops.aec_ref_sidetone_op.amount_to_use:
#ifdef PATCH_LIBS
   LIBS_SLOW_SW_ROM_PATCH_POINT($cbops.aec_ref_sidetone_op.amount_to_use.PATCH_ID_0, r7)
#endif
   push rlink;
84202ed0:	00 f0 3d cf 	push rLink;

   // Get data pointer
   r7 = M[r8 + $cbops.param_hdr.OPERATOR_DATA_PTR_FIELD];
84202ed4:	a9 f0 00 88 	r7 = M[r8 + 0];

   // update sidetone mic buffer
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.MIC_BUF_FIELD];
84202ed8:	92 f0 01 88 	r0 = M[r7 + 4];
   call $cbuffer.get_write_address_and_size_and_start_address;
84202edc:	ff fd 4b f1 	call (m) 0x2c6d6;
84202ee0:	3b ef 
   r6 = r0;
84202ee2:	10 09       	r6 = r0 + Null;
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.MIC_IDX_FIELD];
84202ee4:	92 f0 05 88 	r0 = M[r7 + 20];
   call $cbops.get_cbuffer;
84202ee8:	ff fd c7 f2 	call 0x5bd8c;
84202eec:	24 e5 
   r1 = r6;
84202eee:	43 08       	r1 = r6 + Null;
   r6 = r0;
84202ef0:	10 09       	r6 = r0 + Null;
   call $cbuffer.set_write_address;
84202ef2:	ff fd 4c f1 	call (m) 0x2c73e;
84202ef6:	2d e2 

   // update amount to read from mic
   r0 = r6;
84202ef8:	42 08       	r0 = r6 + Null;
   call $cbuffer.calc_amount_data_in_words;
84202efa:	ff fd 49 f1 	call (m) 0x2c208;
84202efe:	2f e8 
   r6 = r0;
84202f00:	10 09       	r6 = r0 + Null;
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.MIC_IDX_FIELD];
84202f02:	92 f0 05 88 	r0 = M[r7 + 20];
   call $cbops.get_amount_ptr;
84202f06:	ff fd c7 f2 	call 0x5bd9c;
84202f0a:	36 e4 
   M[r0] = r6;
84202f0c:	08 f0 02 ee 	M[Null + r0] = r6;

   /* See how many samples speakr has moved, we will mix the same
    * number of samples from sidetone buffer.
    */
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SPKR_BUFS_FIELD];
84202f10:	92 f0 00 88 	r0 = M[r7 + 0];
   r0 = M[r0];
84202f14:	12 e8       	r0 = M[r0 + Null];
   call $cbuffer.get_read_address_and_size_and_start_address;
84202f16:	ff fd 4b f1 	call (m) 0x2c6a4;
84202f1a:	2f ec 
   r3 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.LAST_SPKR_ADDR_FIELD];
84202f1c:	95 f0 0e 88 	r3 = M[r7 + 56];
   M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.LAST_SPKR_ADDR_FIELD] = r0;
84202f20:	92 f0 0e 8e 	M[r7 + 56] = r0;
   r3 = r0 - r3;
84202f24:	55 05       	r3 = r0 - r3;
   if NEG r3 = r3 + r1;
84202f26:	34 f5 05 c0 	if NEG r3 = r3 + r1;
   BUFFER_ADDRS_TO_WORDS_ASM(r3);
84202f2a:	6d 58       	r3 = r3 ASHIFT -2;
   M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.AMOUNT_TO_MIX_FIELD] = r3;
84202f2c:	95 f0 0f 8e 	M[r7 + 60] = r3;
   pop rlink;
84202f30:	00 f4 3d cf 	pop rLink;
   rts;
84202f34:	d8 4c       	rts;

84202f36 <$cbops.aec_ref_sidetone_op.pre_main>:
// TRASHED REGISTERS:
//    Assume anything except r4 and r8
//
// *****************************************************************************
$cbops.aec_ref_sidetone_op.pre_main:
   push rLink;
84202f36:	00 f0 3d cf 	push rLink;
   /* Force processing */
#ifdef PATCH_LIBS
   LIBS_SLOW_SW_ROM_PATCH_POINT($cbops.aec_ref_sidetone_op.pre_main.PATCH_ID_0, r6)
#endif
   call $cbops.force_processing;
84202f3a:	ff fd c7 f2 	call 0x5bdac;
84202f3e:	32 e3 
   pop rlink;
84202f40:	00 f4 3d cf 	pop rLink;
   rts;
84202f44:	d8 4c       	rts;

84202f46 <$cbops.aec_ref_sidetone_op.post_main>:
// *****************************************************************************
$cbops.aec_ref_sidetone_op.post_main:
#ifdef PATCH_LIBS
   LIBS_SLOW_SW_ROM_PATCH_POINT($cbops.aec_ref_sidetone_op.post_main.PATCH_ID_0, r7)
#endif
   push rlink;
84202f46:	00 f0 3d cf 	push rLink;

   // Get data pointer
   r7 = M[r8 + $cbops.param_hdr.OPERATOR_DATA_PTR_FIELD];
84202f4a:	a9 f0 00 88 	r7 = M[r8 + 0];

   // get speaker buffer
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SPKR_BUFS_FIELD];
84202f4e:	92 f0 00 88 	r0 = M[r7 + 0];
   r0 = M[r0];
84202f52:	12 e8       	r0 = M[r0 + Null];
   call $cbuffer.get_read_address_and_size_and_start_address;
84202f54:	ff fd 4b f1 	call (m) 0x2c6a4;
84202f58:	31 ea 
   I0 = r0;
84202f5a:	10 0a       	I0 = r0 + Null;
   L0 = r1;
84202f5c:	1c 0b       	L0 = r1 + Null;
   push r2;
84202f5e:	00 f0 34 cf 	push r2;
   pop B0;
84202f62:	00 f6 3a cf 	pop B0;
   // save read address for later use
   I6 = r0;
84202f66:	16 0a       	I6 = r0 + Null;
   // I6 = read address of first speaker buffer

   // get threshold
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SAFETY_THRESHOLD_LOW_FIELD];
84202f68:	92 f0 06 88 	r0 = M[r7 + 24];
   BUFFER_WORDS_TO_ADDRS_ASM(r0);
84202f6c:	52 5c       	r0 = r0 ASHIFT 2;
   M0 = r0;
84202f6e:	10 0b       	M0 = r0 + Null;

   // r6 = spkr_rd + threshold_low
   r0 = M[I0, M0];
84202f70:	20 f0 20 c0 	Null = Null + Null, r0 = M[I0,M0];
   r6 = I0;
84202f74:	80 09       	r6 = I0 + Null;

   // r5 = spkr_rd + threshold_high
   I0 = I6;
84202f76:	b0 0a       	I0 = I6 + Null;
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SAFETY_THRESHOLD_HIGH_FIELD];
84202f78:	92 f0 07 88 	r0 = M[r7 + 28];
   BUFFER_WORDS_TO_ADDRS_ASM(r0);
84202f7c:	52 5c       	r0 = r0 ASHIFT 2;
   M0 = r0;
84202f7e:	10 0b       	M0 = r0 + Null;
   r0 = M[I0, M0];
84202f80:	20 f0 20 c0 	Null = Null + Null, r0 = M[I0,M0];
   r5 = I0;
84202f84:	87 08       	r5 = I0 + Null;

   r0 = r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SPKR_MIXING_OFFSETS_FIELD;
84202f86:	92 f0 0c 20 	r0 = r7 + 12;
   r0 = M[r0];
84202f8a:	12 e8       	r0 = M[r0 + Null];
   I0 = r0;
84202f8c:	10 0a       	I0 = r0 + Null;
   I7 = r0;
84202f8e:	17 0a       	I7 = r0 + Null;
   //            r0
   // --|----|---^---|-------------------------------------|--
   //   RD   Low     High                                 WR
   //
   // ====================================================================
   Null = r5 - r6;
84202f90:	8f f7 00 c2 	Null = r5 - r6;
   if NEG jump neg_part;
84202f94:	04 f0 95 e0 	if NEG jump (m) $M.cbops.aec_ref_sidetone_op.neg_part;

84202f98 <$M.cbops.aec_ref_sidetone_op.pos_part>:
   pos_part:
      // expect: r6 <= r0 < r5
      Null = r0 - r5;
84202f98:	d0 05       	Null = r0 - r5;
      if POS jump reset_mixing_offset;
84202f9a:	05 f0 9d e0 	if POS jump (m) $M.cbops.aec_ref_sidetone_op.reset_mixing_offset;
      Null = r0 - r6;
84202f9e:	8f f2 00 c2 	Null = r0 - r6;
      if NEG jump reset_mixing_offset;
84202fa2:	04 f0 95 e0 	if NEG jump (m) $M.cbops.aec_ref_sidetone_op.reset_mixing_offset;
      jump mixing_point_check_done;
84202fa6:	1a 6e       	jump (m) $M.cbops.aec_ref_sidetone_op.mixing_point_check_done;

84202fa8 <$M.cbops.aec_ref_sidetone_op.neg_part>:

   neg_part:
      // expect: r0 < r5 or r0 >= r6
      Null = r0 - r6;
84202fa8:	8f f2 00 c2 	Null = r0 - r6;
      if POS jump mixing_point_check_done;
84202fac:	05 f0 af e0 	if POS jump (m) $M.cbops.aec_ref_sidetone_op.mixing_point_check_done;
      Null = r0 - r5;
84202fb0:	d0 05       	Null = r0 - r5;
      if NEG jump mixing_point_check_done;
84202fb2:	04 f0 a9 e0 	if NEG jump (m) $M.cbops.aec_ref_sidetone_op.mixing_point_check_done;

84202fb6 <$M.cbops.aec_ref_sidetone_op.reset_mixing_offset>:

reset_mixing_offset:
   /* reset mixing offset */
   r1 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SAFETY_SET_THRESHOLD_FIELD];
84202fb6:	93 f0 08 88 	r1 = M[r7 + 32];
   BUFFER_WORDS_TO_ADDRS_ASM(r1);
84202fba:	5b 5c       	r1 = r1 ASHIFT 2;
   M0 = r1;
84202fbc:	18 0b       	M0 = r1 + Null;
   I0 = I6;
84202fbe:	b0 0a       	I0 = I6 + Null;
   r1 = M[I0, M0];
84202fc0:	30 f0 20 c0 	Null = Null + Null, r1 = M[I0,M0];

   // update debug counter showing mixing offset has been re-aligned
   r2 = I0 - r0;
84202fc4:	2f f0 84 c6 	r2 = I0 - r0;
   if NEG r2 = r2 + L0;
84202fc8:	c4 f4 44 c4 	if NEG r2 = r2 + L0;
   BUFFER_ADDRS_TO_WORDS_ASM(r2);
84202fcc:	64 58       	r2 = r2 ASHIFT -2;
   r1 = M[r7+ $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SIDETONE_ALIGNED_SAMPLES_FIELD];
84202fce:	93 f0 0d 88 	r1 = M[r7 + 52];
   r1 = r1 + r2;
84202fd2:	e3 00       	r1 = r2 + r1;
   M[r7+ $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SIDETONE_ALIGNED_SAMPLES_FIELD] = r1;
84202fd4:	93 f0 0d 8e 	M[r7 + 52] = r1;

   // r0 = mixing offset updated
   r0 = I0;
84202fd8:	82 08       	r0 = I0 + Null;

84202fda <$M.cbops.aec_ref_sidetone_op.mixing_point_check_done>:
   // L0 = speaker buffer length
   // I6 = speaker buffer read address

   // work out the distance between HW read address and
   // mixing address in samples
   push B0;
84202fda:	00 f2 3a cf 	push B0;
   pop r1;
84202fde:	00 f4 33 cf 	pop r1;
   r1 = r0 - I6;
84202fe2:	6f f2 43 c6 	r1 = r0 - I6;
   if NEG r1 = r1 + L0;
84202fe6:	c4 f3 43 c4 	if NEG r1 = r1 + L0;
   BUFFER_ADDRS_TO_WORDS_ASM(r1);
84202fea:	5b 58       	r1 = r1 ASHIFT -2;

   // get amount to mix
   r5 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.AMOUNT_TO_MIX_FIELD];
84202fec:	97 f0 0f 88 	r5 = M[r7 + 60];
   // r1 = distance before mixing
   // r3 = distance after mixing
   r3 = r5 + r1;
84202ff0:	fd 00       	r3 = r5 + r1;

   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SPKR_THRESHOLD_FIELD];
84202ff2:	92 f0 09 88 	r0 = M[r7 + 36];
   r1 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SAFETY_THRESHOLD_LOW_FIELD];
84202ff6:	93 f0 06 88 	r1 = M[r7 + 24];
   r2 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SAFETY_THRESHOLD_HIGH_FIELD];
84202ffa:	94 f0 07 88 	r2 = M[r7 + 28];
   r9 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SAFETY_SET_THRESHOLD_FIELD];
84202ffe:	9b f0 08 88 	r9 = M[r7 + 32];
   r1 = r0 + r1;   // low threshold after mixing
84203002:	d3 00       	r1 = r0 + r1;
   r2 = r0 + r2;   // high threshold after mixing
84203004:	14 01       	r2 = r0 + r2;
   r9 = r0 + r9;   // good threshold after mixing
84203006:	13 0d       	r9 = r0 + r9;

   // r6 = samples to insert
   r6 = 0;
84203008:	00 09       	r6 = Null + Null;

   // expect r1 < r3 < r2
   r0 = r1 - r3;
8420300a:	5a 05       	r0 = r1 - r3;
   if GT jump insert_sidetone;
8420300c:	0c 6a       	if GT jump (m) $M.cbops.aec_ref_sidetone_op.insert_sidetone;
   r0 = r3 - r2;
8420300e:	2a 05       	r0 = r3 - r2;
   if LE jump mix_sidetone;
84203010:	12 6c       	if LE jump (m) $M.cbops.aec_ref_sidetone_op.mix_sidetone;

84203012 <$M.cbops.aec_ref_sidetone_op.discard_sidetone>:

discard_sidetone:
   // discard here means ignore, we are doing in-place mixing
   // actual discard if needed will be done by sink_overflow_disgard operator
   r1 = r5 - r9;
84203012:	bf f7 03 c2 	r1 = r5 - r9;
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SIDETONE_DISCARDED_SAMPLES_FIELD];
84203016:	92 f0 0a 88 	r0 = M[r7 + 40];
   r0 = r0 + r1;
8420301a:	9a 00       	r0 = r1 + r0;
   M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SIDETONE_DISCARDED_SAMPLES_FIELD] = r0;
8420301c:	92 f0 0a 8e 	M[r7 + 40] = r0;
   r5 = r9;
84203020:	5f 08       	r5 = r9 + Null;
   jump mix_sidetone;
84203022:	09 6e       	jump (m) $M.cbops.aec_ref_sidetone_op.mix_sidetone;

84203024 <$M.cbops.aec_ref_sidetone_op.insert_sidetone>:

insert_sidetone:
   // we don't have enough samples to mix, we needs to mix
   // the difference, it will be mixing using last mixed sample
   r6 = r9 - r5;
84203024:	7f fb 08 c2 	r6 = r9 - r5;
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SIDETONE_INSERTED_SAMPLES_FIELD];
84203028:	92 f0 0b 88 	r0 = M[r7 + 44];
   r0 = r0 + r6;
8420302c:	42 0c       	r0 = r6 + r0;
   M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SIDETONE_INSERTED_SAMPLES_FIELD] = r0;
8420302e:	92 f0 0b 8e 	M[r7 + 44] = r0;
   r5 = r9;
84203032:	5f 08       	r5 = r9 + Null;

84203034 <$M.cbops.aec_ref_sidetone_op.mix_sidetone>:
mix_sidetone:

   // M0 = amount to adjust
   M0 = I0 - I7;
84203034:	7f f0 c8 c7 	M0 = I0 - I7;
   if NEG M0 = M0 + L0;
84203038:	c4 f8 c8 c5 	if NEG M0 = M0 + L0;

   // get number of speakers (1 or 2)
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.NR_SPKRS_FIELD];
8420303c:	92 f0 02 88 	r0 = M[r7 + 8];
   M3 = r0;
84203040:	13 0b       	M3 = r0 + Null;

   // mixing offset address
   I2 = r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SPKR_MIXING_OFFSETS_FIELD;
84203042:	92 f8 0c 20 	I2 = r7 + 12;

   // Get sidetone buffer and see how much we need to read
   r0 = M[r8 + $cbops.param_hdr.CHANNEL_INDEX_START_FIELD];
84203046:	a2 f0 03 88 	r0 = M[r8 + 12];
   call $cbops.get_cbuffer;
8420304a:	ff fd c6 f2 	call 0x5bd8c;
8420304e:	22 ea 
   I5 = r0;
84203050:	15 0a       	I5 = r0 + Null;

   // see how much data is in sidetone buffer
   call $cbuffer.calc_amount_data_in_words;
84203052:	ff fd 48 f1 	call (m) 0x2c208;
84203056:	37 ed 
   r3 = r0;
84203058:	15 00       	r3 = r0 + Null;
   r0 = M[r8 + $cbops.param_hdr.CHANNEL_INDEX_START_FIELD];
8420305a:	a2 f0 03 88 	r0 = M[r8 + 12];
   call $cbops.get_amount_ptr;
8420305e:	ff fd c6 f2 	call 0x5bd9c;
84203062:	3e e9 
   r0 = M[r0];
84203064:	12 e8       	r0 = M[r0 + Null];
   r0 = r0 + r3;
84203066:	aa 00       	r0 = r3 + r0;
   // r0: amount we have
   // r5: amount we need
   // r6: amount to invent
   r1 = r5 - r0;
84203068:	bb 04       	r1 = r5 - r0;
   if LE jump enough_data;
8420306a:	03 6c       	if LE jump (m) $M.cbops.aec_ref_sidetone_op.enough_data;
      // Limit to amount available
      r5 = r5 - r1;
8420306c:	ff 04       	r5 = r5 - r1;
      r6 = r6 + r1;
8420306e:	18 0d       	r6 = r1 + r6;

84203070 <$M.cbops.aec_ref_sidetone_op.enough_data>:
   enough_data:

   r0 = I5;
84203070:	aa 08       	r0 = I5 + Null;
   call $cbuffer.get_read_address_and_size_and_start_address;
84203072:	ff fd 4b f1 	call (m) 0x2c6a4;
84203076:	33 e1 
   I7 = r0;
84203078:	17 0a       	I7 = r0 + Null;
   L4 = r1;
8420307a:	1e 0b       	L4 = r1 + Null;
   push r2;
8420307c:	00 f0 34 cf 	push r2;
   pop B4;
84203080:	00 f6 3c cf 	pop B4;

   // speaker buffers
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SPKR_BUFS_FIELD];
84203084:	92 f0 00 88 	r0 = M[r7 + 0];
   I3 = r0;
84203088:	13 0a       	I3 = r0 + Null;

8420308a <$M.cbops.aec_ref_sidetone_op.channel_mixing_loop>:

channel_mixing_loop:

      // get base address for this speaker channel
      r0 = M[I3, MK1];
8420308a:	2d f0 30 c0 	Null = Null + Null, r0 = M[I3,4];
      r0 = M[r0 + $cbuffer.START_ADDR_FIELD];
8420308e:	d2 88       	r0 = M[r0 + 12];
      push r0;
84203090:	00 f0 32 cf 	push r0;
      pop B0;
84203094:	00 f6 3a cf 	pop B0;

      // get sidetone buffer
      I4 = I7;
84203098:	bc 0a       	I4 = I7 + Null;

      // get speaker mixing point
      r0 = M[I2, 0];
8420309a:	28 f0 30 c0 	Null = Null + Null, r0 = M[I2,0];
      I0 = r0;
8420309e:	10 0a       	I0 = r0 + Null;

      // M0 is amount to fix the mixing point (should be 0 in normal condition)
      r0 = M[I0, M0];
842030a0:	20 f0 20 c0 	Null = Null + Null, r0 = M[I0,M0];

      // get last sidetone sample
      r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.LAST_SIDETONE_SAMPLE_FIELD];
842030a4:	92 f0 0c 88 	r0 = M[r7 + 48];

      r2 = 1.0;
842030a8:	ff f7 f4 f7 	r2 = Null + 2147483647;
842030ac:	ff 7b 

      // r5 = sidetone samples to read and mix
      // r6 = sidetone samples to invent and mix
      r10 = r6;
842030ae:	44 09       	r10 = r6 + Null;
      if Z jump insert_done;
842030b0:	08 60       	if EQ jump (m) $M.cbops.aec_ref_sidetone_op.insert_done;
      do insert_loop;
842030b2:	07 4c       	do (m) $M.cbops.aec_ref_sidetone_op.insert_done;
         rMAC = M[I0, 0];
842030b4:	10 f0 30 c0 	Null = Null + Null, rMAC = M[I0,0];
         rMAC = rMAC + r0 * r2;
842030b8:	4f f2 c1 ca 	rMAC = rMAC + r0 * r2 (SS);
         M[I0, MK1] = rMAC;
842030bc:	91 f0 30 c0 	Null = Null + Null, M[I0,4] = rMAC;

842030c0 <$M.cbops.aec_ref_sidetone_op.insert_done>:
      insert_loop:

      insert_done:
      r10 = r5;
842030c0:	3c 09       	r10 = r5 + Null;
      do mix_loop;
842030c2:	07 4c       	do (m) $M.cbops.aec_ref_sidetone_op.mix_loop;
         rMAC = M[I0, 0], r0 = M[I4,MK1];
842030c4:	21 f0 31 d0 	Null = Null + Null, rMAC = M[I0,0], r0 = M[I4,4];
         rMAC = rMAC + r0 * r2;
842030c8:	4f f2 c1 ca 	rMAC = rMAC + r0 * r2 (SS);
         M[I0, MK1] = rMAC;
842030cc:	91 f0 30 c0 	Null = Null + Null, M[I0,4] = rMAC;

842030d0 <$M.cbops.aec_ref_sidetone_op.mix_loop>:
      mix_loop:
      M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.LAST_SIDETONE_SAMPLE_FIELD] = r0;
842030d0:	92 f0 0c 8e 	M[r7 + 48] = r0;

      // update mixing point for next time
      r1 = I0;
842030d4:	83 08       	r1 = I0 + Null;
      M[I2, MK1] = r1;
842030d6:	b9 f0 30 c0 	Null = Null + Null, M[I2,4] = r1;
   // next channel
   M3 = M3 - 1;
842030da:	bb fc 01 24 	M3 = M3 - 1;
   if GT jump channel_mixing_loop;
842030de:	d6 6b       	if GT jump (m) $M.cbops.aec_ref_sidetone_op.channel_mixing_loop;

   // update sidetone buffer
   r0 = I5;
842030e0:	aa 08       	r0 = I5 + Null;
   r1 = I4;
842030e2:	a3 08       	r1 = I4 + Null;
   call $cbuffer.set_read_address;
842030e4:	ff fd 4b f1 	call (m) 0x2c708;
842030e8:	25 e1 

   pop rlink;
842030ea:	00 f4 3d cf 	pop rLink;
   rts;
842030ee:	d8 4c       	rts;

842030f0 <$_aec_ref_sidetone_initialise>:
// TRASHED REGISTERS:
//    r0 (C callable)
//
// *****************************************************************************
$_aec_ref_sidetone_initialise:
   push rLink;
842030f0:	00 f0 3d cf 	push rLink;
   pushm <I2,I3>;
842030f4:	00 f0 4c e4 	pushm <I2, I3>;
   pushm <r1,r2,r3,r7>;
842030f8:	23 f0 48 e0 	pushm <r1, r2, r3, r7>;

   // here we got pointer to the cbops structure, so need to get to the
   // parameter struct first.
   r7 = M[r0 + ($cbops_c.cbops_op_struct.PARAMETER_AREA_START_FIELD+$cbops.param_hdr.OPERATOR_DATA_PTR_FIELD)];
842030fc:	29 f0 03 88 	r7 = M[r0 + 12];

   // save the read address of first speaker buffer, we use this to see how many
   // samples speaker has read since last run
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SPKR_BUFS_FIELD];
84203100:	92 f0 00 88 	r0 = M[r7 + 0];
   r0 = M[r0];
84203104:	12 e8       	r0 = M[r0 + Null];
   call $cbuffer.get_read_address_and_size_and_start_address;
84203106:	ff fd 4a f1 	call (m) 0x2c6a4;
8420310a:	3f ec 

   /* initialise mixing points */
   M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.LAST_SPKR_ADDR_FIELD] = r0;
8420310c:	92 f0 0e 8e 	M[r7 + 56] = r0;
   r10 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.NR_SPKRS_FIELD];
84203110:	9c f0 02 88 	r10 = M[r7 + 8];
   r0 = M[r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SPKR_BUFS_FIELD];
84203114:	92 f0 00 88 	r0 = M[r7 + 0];
   I2 = r0;
84203118:	12 0a       	I2 = r0 + Null;
   I3 = r7 + $cbops_aec_ref_sidetone_op.aec_ref_sidetone_op_struct.SPKR_MIXING_OFFSETS_FIELD;
8420311a:	93 f8 0c 20 	I3 = r7 + 12;
   do init_mixing_points;
8420311e:	06 4c       	do (m) $M.cbops.aec_ref_sidetone_op.init_mixing_points;
      r0 = M[I2, MK1];   // get speaker buffer
84203120:	29 f0 30 c0 	Null = Null + Null, r0 = M[I2,4];
      r0 = M[r0 + $cbuffer.START_ADDR_FIELD];
84203124:	d2 88       	r0 = M[r0 + 12];
      M[I3, MK1] = r0;   // mixing point
84203126:	ad f0 30 c0 	Null = Null + Null, M[I3,4] = r0;

8420312a <$M.cbops.aec_ref_sidetone_op.init_mixing_points>:
   init_mixing_points:

   popm <r1,r2,r3,r7>;
8420312a:	23 f0 68 e0 	popm <r1, r2, r3, r7>;
   popm <I2,I3>;
8420312e:	00 f0 6c e4 	popm <I2, I3>;
   pop rLink;
84203132:	00 f4 3d cf 	pop rLink;
   rts;
84203136:	d8 4c       	rts;

84203138 <$_create_mute_op>:
.MODULE $M.download_support_lib.create_mute_op;
.CODESEGMENT PM;
.MINIM;

$_create_mute_op:
    rMAC = M[$_patched_fw_version];
84203138:	01 f0 4b 98 	rMAC = M[Null + 0x92c];
    Null = rMAC - PATCH_BUILD_ID;
8420313c:	00 f0 10 f2 	Null = rMAC - 8988;
84203140:	1c 27 
    if EQ jump PATCH_ENTRY_CREATE_MUTE_OP;
84203142:	fc ff 10 f0 	if EQ jump (m) 0x4003bd2;
84203146:	91 e5 

84203148 <$M.download_support_lib.create_mute_op.L_pb_mismatch>:

L_pb_mismatch:
    /* Stub: return false; */
    r0 = 0;
84203148:	02 00       	r0 = Null + Null;
    rts;
8420314a:	d8 4c       	rts;

8420314c <$_set_aec_reference_not_running_from_rom>:
.CODESEGMENT PM;
.MINIM;
$_set_aec_reference_not_running_from_rom:
#ifndef DISABLE_PATCH_BUILD_ID_CHECK
    // panic if not using the right patch
    r0 = 0;
8420314c:	02 00       	r0 = Null + Null;
    rMAC = M[$_patched_fw_version];
8420314e:	01 f0 4b 98 	rMAC = M[Null + 0x92c];
    Null = rMAC - PATCH_BUILD_ID;
84203152:	00 f0 10 f2 	Null = rMAC - 8988;
84203156:	1c 27 
    if NZ call $error;
84203158:	f1 fd 4d f1 	if NE call (m) 0x2cb9c;
8420315c:	25 e2 
    // if we have patch entry for setting the downloadable flag
    // then go to that patch.
    jump PATCH_ENTRY_SET_AEC_REFERENCE_NOT_RUNNING_FROM_ROM;
#else
   // otherwise quietly return
   rts;
8420315e:	d8 4c       	rts;

84203160 <$_setup_cbops_dc_offset_compensation>:
#ifdef DISABLE_PATCH_BUILD_ID_CHECK
   .const $_setup_cbops_dc_offset_compensation PATCH_ENTRY_SETUP_CBOPS_DC_OFFSET_COMPENSATION;
#else /* PATCH_ENTRY_SETUP_CBOPS_DC_OFFSET_COMPENSATION */
$_setup_cbops_dc_offset_compensation:
   /* Check patch version */
    rMAC = M[$_patched_fw_version];
84203160:	01 f0 4b 98 	rMAC = M[Null + 0x92c];
    Null = rMAC - PATCH_BUILD_ID;
84203164:	00 f0 10 f2 	Null = rMAC - 8988;
84203168:	1c 27 
    if EQ jump PATCH_ENTRY_SETUP_CBOPS_DC_OFFSET_COMPENSATION;
8420316a:	fc ff 60 f0 	if EQ jump (m) 0x4006926;
8420316e:	bd ef 

84203170 <$M.download_support_lib.setup_cbops_dc_offset_compensation.return_null>:
#endif
return_null:
   /* if not matching then just return NULL,
    * so no dc offset op created/added
    */
    r0 = 0;
84203170:	02 00       	r0 = Null + Null;
    rts;
84203172:	d8 4c       	rts;
